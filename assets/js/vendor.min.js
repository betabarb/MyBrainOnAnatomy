!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=t.length,n=J.type(t);return"function"===n||J.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function i(t,e,n){if(J.isFunction(e))return J.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return J.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(st.test(e))return J.filter(e,t,n);e=J.filter(e,t)}return J.grep(t,function(t){return Q.call(e,t)>=0!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e=pt[t]={};return J.each(t.match(dt)||[],function(t,n){e[n]=!0}),e}function a(){Y.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1),J.ready()}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=J.expando+Math.random()}function u(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(wt,"-$1").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:bt.test(n)?J.parseJSON(n):n}catch(r){}yt.set(t,e,n)}else n=void 0;return n}function l(){return!0}function c(){return!1}function f(){try{return Y.activeElement}catch(t){}}function h(t,e){return J.nodeName(t,"table")&&J.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function d(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function p(t){var e=It.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var n=0,i=t.length;i>n;n++)vt.set(t[n],"globalEval",!e||vt.get(e[n],"globalEval"))}function m(t,e){var n,i,r,o,a,s,u,l;if(1===e.nodeType){if(vt.hasData(t)&&(o=vt.access(t),a=vt.set(e,o),l=o.events)){delete a.handle,a.events={};for(r in l)for(n=0,i=l[r].length;i>n;n++)J.event.add(e,r,l[r][n])}yt.hasData(t)&&(s=yt.access(t),u=J.extend({},s),yt.set(e,u))}}function v(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&J.nodeName(t,e)?J.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&kt.test(t.type)?e.checked=t.checked:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}function b(e,n){var i,r=J(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(r[0]))?i.display:J.css(r[0],"display");return r.detach(),o}function w(t){var e=Y,n=Ht[t];return n||(n=b(t,e),"none"!==n&&n||(qt=(qt||J("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=qt[0].contentDocument,e.write(),e.close(),n=b(t,e),qt.detach()),Ht[t]=n),n}function x(t,e,n){var i,r,o,a,s=t.style;return n=n||Wt(t),n&&(a=n.getPropertyValue(e)||n[e]),n&&(""!==a||J.contains(t.ownerDocument,t)||(a=J.style(t,e)),_t.test(a)&&Ut.test(e)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function C(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function T(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),i=e,r=Gt.length;r--;)if(e=Gt[r]+n,e in t)return e;return i}function k(t,e,n){var i=Bt.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function S(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=J.css(t,n+Ct[o],!0,r)),i?("content"===n&&(a-=J.css(t,"padding"+Ct[o],!0,r)),"margin"!==n&&(a-=J.css(t,"border"+Ct[o]+"Width",!0,r))):(a+=J.css(t,"padding"+Ct[o],!0,r),"padding"!==n&&(a+=J.css(t,"border"+Ct[o]+"Width",!0,r)));return a}function E(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=Wt(t),a="border-box"===J.css(t,"boxSizing",!1,o);if(0>=r||null==r){if(r=x(t,e,o),(0>r||null==r)&&(r=t.style[e]),_t.test(r))return r;i=a&&(X.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+S(t,e,n||(a?"border":"content"),i,o)+"px"}function A(t,e){for(var n,i,r,o=[],a=0,s=t.length;s>a;a++)i=t[a],i.style&&(o[a]=vt.get(i,"olddisplay"),n=i.style.display,e?(o[a]||"none"!==n||(i.style.display=""),""===i.style.display&&Tt(i)&&(o[a]=vt.access(i,"olddisplay",w(i.nodeName)))):(r=Tt(i),"none"===n&&r||vt.set(i,"olddisplay",r?n:J.css(i,"display"))));for(a=0;s>a;a++)i=t[a],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[a]||"":"none"));return t}function F(t,e,n,i,r){return new F.prototype.init(t,e,n,i,r)}function P(){return setTimeout(function(){Xt=void 0}),Xt=J.now()}function N(t,e){var n,i=0,r={height:t};for(e=e?1:0;4>i;i+=2-e)n=Ct[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function j(t,e,n){for(var i,r=(ne[e]||[]).concat(ne["*"]),o=0,a=r.length;a>o;o++)if(i=r[o].call(n,e,t))return i}function O(t,e,n){var i,r,o,a,s,u,l,c,f=this,h={},d=t.style,p=t.nodeType&&Tt(t),g=vt.get(t,"fxshow");n.queue||(s=J._queueHooks(t,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,J.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],l=J.css(t,"display"),c="none"===l?vt.get(t,"olddisplay")||w(t.nodeName):l,"inline"===c&&"none"===J.css(t,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],Zt.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;p=!0}h[i]=g&&g[i]||J.style(t,i)}else l=void 0;if(J.isEmptyObject(h))"inline"===("none"===l?w(t.nodeName):l)&&(d.display=l);else{g?"hidden"in g&&(p=g.hidden):g=vt.access(t,"fxshow",{}),o&&(g.hidden=!p),p?J(t).show():f.done(function(){J(t).hide()}),f.done(function(){var e;vt.remove(t,"fxshow");for(e in h)J.style(t,e,h[e])});for(i in h)a=j(p?g[i]:0,i,f),i in g||(g[i]=a.start,p&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}}function L(t,e){var n,i,r,o,a;for(n in t)if(i=J.camelCase(n),r=e[i],o=t[n],J.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),a=J.cssHooks[i],a&&"expand"in a){o=a.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function D(t,e,n){var i,r,o=0,a=ee.length,s=J.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var e=Xt||P(),n=Math.max(0,l.startTime+l.duration-e),i=n/l.duration||0,o=1-i,a=0,u=l.tweens.length;u>a;a++)l.tweens[a].run(o);return s.notifyWith(t,[l,o,n]),1>o&&u?n:(s.resolveWith(t,[l]),!1)},l=s.promise({elem:t,props:J.extend({},e),opts:J.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Xt||P(),duration:n.duration,tweens:[],createTween:function(e,n){var i=J.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(i),i},stop:function(e){var n=0,i=e?l.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)l.tweens[n].run(1);return e?s.resolveWith(t,[l,e]):s.rejectWith(t,[l,e]),this}}),c=l.props;for(L(c,l.opts.specialEasing);a>o;o++)if(i=ee[o].call(l,t,c,l.opts))return i;return J.map(c,j,l),J.isFunction(l.opts.start)&&l.opts.start.call(t,l),J.fx.timer(J.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function M(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(dt)||[];if(J.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function I(t,e,n,i){function r(s){var u;return o[s]=!0,J.each(t[s]||[],function(t,s){var l=s(e,n,i);return"string"!=typeof l||a||o[l]?a?!(u=l):void 0:(e.dataTypes.unshift(l),r(l),!1)}),u}var o={},a=t===xe;return r(e.dataTypes[0])||!o["*"]&&r("*")}function R(t,e){var n,i,r=J.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&J.extend(!0,t,i),t}function $(t,e,n){for(var i,r,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||t.converters[r+" "+u[0]]){o=r;break}a||(a=r)}o=o||a}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function q(t,e,n,i){var r,o,a,s,u,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=l[u+" "+o]||l["* "+o],!a)for(r in l)if(s=r.split(" "),s[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){a===!0?a=l[r]:l[r]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}function H(t,e,n,i){var r;if(J.isArray(e))J.each(e,function(e,r){n||Se.test(t)?i(t,r):H(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==J.type(e))i(t,e);else for(r in e)H(t+"["+r+"]",e[r],n,i)}function U(t){return J.isWindow(t)?t:9===t.nodeType&&t.defaultView}var _=[],W=_.slice,V=_.concat,B=_.push,Q=_.indexOf,K={},z=K.toString,G=K.hasOwnProperty,X={},Y=t.document,Z="2.1.1",J=function(t,e){return new J.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,it=function(t,e){return e.toUpperCase()};J.fn=J.prototype={jquery:Z,constructor:J,selector:"",length:0,toArray:function(){return W.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:W.call(this)},pushStack:function(t){var e=J.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return J.each(this,t,e)},map:function(t){return this.pushStack(J.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(W.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:B,sort:_.sort,splice:_.splice},J.extend=J.fn.extend=function(){var t,e,n,i,r,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||J.isFunction(a)||(a={}),s===u&&(a=this,s--);u>s;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],i=t[e],a!==i&&(l&&i&&(J.isPlainObject(i)||(r=J.isArray(i)))?(r?(r=!1,o=n&&J.isArray(n)?n:[]):o=n&&J.isPlainObject(n)?n:{},a[e]=J.extend(l,o,i)):void 0!==i&&(a[e]=i));return a},J.extend({expando:"jQuery"+(Z+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===J.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!J.isArray(t)&&t-parseFloat(t)>=0},isPlainObject:function(t){return"object"!==J.type(t)||t.nodeType||J.isWindow(t)?!1:t.constructor&&!G.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?K[z.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=J.trim(t),t&&(1===t.indexOf("use strict")?(e=Y.createElement("script"),e.text=t,Y.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,it)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,o=0,a=t.length,s=n(t);if(i){if(s)for(;a>o&&(r=e.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=e.apply(t[o],i),r===!1)break}else if(s)for(;a>o&&(r=e.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=e.call(t[o],o,t[o]),r===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?J.merge(i,"string"==typeof t?[t]:t):B.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:Q.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,a=t.length,s=!n;a>o;o++)i=!e(t[o],o),i!==s&&r.push(t[o]);return r},map:function(t,e,i){var r,o=0,a=t.length,s=n(t),u=[];if(s)for(;a>o;o++)r=e(t[o],o,i),null!=r&&u.push(r);else for(o in t)r=e(t[o],o,i),null!=r&&u.push(r);return V.apply([],u)},guid:1,proxy:function(t,e){var n,i,r;return"string"==typeof e&&(n=t[e],e=t,t=n),J.isFunction(t)?(i=W.call(arguments,2),r=function(){return t.apply(e||this,i.concat(W.call(arguments)))},r.guid=t.guid=t.guid||J.guid++,r):void 0},now:Date.now,support:X}),J.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){K["[object "+e+"]"]=e.toLowerCase()});var rt=function(t){function e(t,e,n,i){var r,o,a,s,u,l,f,d,p,g;if((e?e.ownerDocument||e:H)!==O&&j(e),e=e||O,n=n||[],!t||"string"!=typeof t)return n;if(1!==(s=e.nodeType)&&9!==s)return[];if(D&&!i){if(r=yt.exec(t))if(a=r[1]){if(9===s){if(o=e.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(a))&&$(e,o)&&o.id===a)return n.push(o),n}else{if(r[2])return J.apply(n,e.getElementsByTagName(t)),n;if((a=r[3])&&x.getElementsByClassName&&e.getElementsByClassName)return J.apply(n,e.getElementsByClassName(a)),n}if(x.qsa&&(!M||!M.test(t))){if(d=f=q,p=e,g=9===s&&t,1===s&&"object"!==e.nodeName.toLowerCase()){for(l=S(t),(f=e.getAttribute("id"))?d=f.replace(wt,"\\$&"):e.setAttribute("id",d),d="[id='"+d+"'] ",u=l.length;u--;)l[u]=d+h(l[u]);p=bt.test(t)&&c(e.parentNode)||e,g=l.join(",")}if(g)try{return J.apply(n,p.querySelectorAll(g)),n}catch(m){}finally{f||e.removeAttribute("id")}}}return A(t.replace(ut,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>C.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[q]=!0,t}function r(t){var e=O.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=t.length;i--;)C.attrHandle[n[i]]=e}function a(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||z)-(~t.sourceIndex||z);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function u(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function l(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function c(t){return t&&typeof t.getElementsByTagName!==K&&t}function f(){}function h(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function d(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=_++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,a){var s,u,l=[U,o];if(a){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,a))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(u=e[q]||(e[q]={}),(s=u[i])&&s[0]===U&&s[1]===o)return l[2]=s[2];if(u[i]=l,l[2]=t(e,n,a))return!0}}}function p(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function g(t,n,i){for(var r=0,o=n.length;o>r;r++)e(t,n[r],i);return i}function m(t,e,n,i,r){for(var o,a=[],s=0,u=t.length,l=null!=e;u>s;s++)(o=t[s])&&(!n||n(o,i,r))&&(a.push(o),l&&e.push(s));return a}function v(t,e,n,r,o,a){return r&&!r[q]&&(r=v(r)),o&&!o[q]&&(o=v(o,a)),i(function(i,a,s,u){var l,c,f,h=[],d=[],p=a.length,v=i||g(e||"*",s.nodeType?[s]:s,[]),y=!t||!i&&e?v:m(v,h,t,s,u),b=n?o||(i?t:p||r)?[]:a:y;if(n&&n(y,b,s,u),r)for(l=m(b,d),r(l,[],s,u),c=l.length;c--;)(f=l[c])&&(b[d[c]]=!(y[d[c]]=f));if(i){if(o||t){if(o){for(l=[],c=b.length;c--;)(f=b[c])&&l.push(y[c]=f);o(null,b=[],l,u)}for(c=b.length;c--;)(f=b[c])&&(l=o?et.call(i,f):h[c])>-1&&(i[l]=!(a[l]=f))}}else b=m(b===a?b.splice(p,b.length):b),o?o(null,a,b,u):J.apply(a,b)})}function y(t){for(var e,n,i,r=t.length,o=C.relative[t[0].type],a=o||C.relative[" "],s=o?1:0,u=d(function(t){return t===e},a,!0),l=d(function(t){return et.call(e,t)>-1},a,!0),c=[function(t,n,i){return!o&&(i||n!==F)||((e=n).nodeType?u(t,n,i):l(t,n,i))}];r>s;s++)if(n=C.relative[t[s].type])c=[d(p(c),n)];else{if(n=C.filter[t[s].type].apply(null,t[s].matches),n[q]){for(i=++s;r>i&&!C.relative[t[i].type];i++);return v(s>1&&p(c),s>1&&h(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(ut,"$1"),n,i>s&&y(t.slice(s,i)),r>i&&y(t=t.slice(i)),r>i&&h(t))}c.push(n)}return p(c)}function b(t,n){var r=n.length>0,o=t.length>0,a=function(i,a,s,u,l){var c,f,h,d=0,p="0",g=i&&[],v=[],y=F,b=i||o&&C.find.TAG("*",l),w=U+=null==y?1:Math.random()||.1,x=b.length;for(l&&(F=a!==O&&a);p!==x&&null!=(c=b[p]);p++){if(o&&c){for(f=0;h=t[f++];)if(h(c,a,s)){u.push(c);break}l&&(U=w)}r&&((c=!h&&c)&&d--,i&&g.push(c))}if(d+=p,r&&p!==d){for(f=0;h=n[f++];)h(g,v,a,s);if(i){if(d>0)for(;p--;)g[p]||v[p]||(v[p]=Y.call(u));v=m(v)}J.apply(u,v),l&&!i&&v.length>0&&d+n.length>1&&e.uniqueSort(u)}return l&&(U=w,F=y),g};return r?i(a):a}var w,x,C,T,k,S,E,A,F,P,N,j,O,L,D,M,I,R,$,q="sizzle"+-new Date,H=t.document,U=0,_=0,W=n(),V=n(),B=n(),Q=function(t,e){return t===e&&(N=!0),0},K="undefined",z=1<<31,G={}.hasOwnProperty,X=[],Y=X.pop,Z=X.push,J=X.push,tt=X.slice,et=X.indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(this[e]===t)return e;return-1},nt="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ot=rt.replace("w","w#"),at="\\["+it+"*("+rt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ot+"))|)"+it+"*\\]",st=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+at+")*)|.*)\\)|)",ut=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),lt=new RegExp("^"+it+"*,"+it+"*"),ct=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ft=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),ht=new RegExp(st),dt=new RegExp("^"+ot+"$"),pt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+at),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+nt+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bt=/[+~]/,wt=/'|\\/g,xt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),Ct=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)};try{J.apply(X=tt.call(H.childNodes),H.childNodes),X[H.childNodes.length].nodeType}catch(Tt){J={apply:X.length?function(t,e){Z.apply(t,tt.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}x=e.support={},k=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},j=e.setDocument=function(t){var e,n=t?t.ownerDocument||t:H,i=n.defaultView;return n!==O&&9===n.nodeType&&n.documentElement?(O=n,L=n.documentElement,D=!k(n),i&&i!==i.top&&(i.addEventListener?i.addEventListener("unload",function(){j()},!1):i.attachEvent&&i.attachEvent("onunload",function(){j()})),x.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),x.getElementsByTagName=r(function(t){return t.appendChild(n.createComment("")),!t.getElementsByTagName("*").length}),x.getElementsByClassName=vt.test(n.getElementsByClassName)&&r(function(t){return t.innerHTML="<div class='a'></div><div class='a i'></div>",t.firstChild.className="i",2===t.getElementsByClassName("i").length}),x.getById=r(function(t){return L.appendChild(t).id=q,!n.getElementsByName||!n.getElementsByName(q).length}),x.getById?(C.find.ID=function(t,e){if(typeof e.getElementById!==K&&D){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},C.filter.ID=function(t){var e=t.replace(xt,Ct);return function(t){return t.getAttribute("id")===e}}):(delete C.find.ID,C.filter.ID=function(t){var e=t.replace(xt,Ct);return function(t){var n=typeof t.getAttributeNode!==K&&t.getAttributeNode("id");return n&&n.value===e}}),C.find.TAG=x.getElementsByTagName?function(t,e){return typeof e.getElementsByTagName!==K?e.getElementsByTagName(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},C.find.CLASS=x.getElementsByClassName&&function(t,e){return typeof e.getElementsByClassName!==K&&D?e.getElementsByClassName(t):void 0},I=[],M=[],(x.qsa=vt.test(n.querySelectorAll))&&(r(function(t){t.innerHTML="<select msallowclip=''><option selected=''></option></select>",t.querySelectorAll("[msallowclip^='']").length&&M.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||M.push("\\["+it+"*(?:value|"+nt+")"),t.querySelectorAll(":checked").length||M.push(":checked")}),r(function(t){var e=n.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&M.push("name"+it+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||M.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),M.push(",.*:")})),(x.matchesSelector=vt.test(R=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&r(function(t){x.disconnectedMatch=R.call(t,"div"),R.call(t,"[s!='']:x"),I.push("!=",st)}),M=M.length&&new RegExp(M.join("|")),I=I.length&&new RegExp(I.join("|")),e=vt.test(L.compareDocumentPosition),$=e||vt.test(L.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},Q=e?function(t,e){if(t===e)return N=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!x.sortDetached&&e.compareDocumentPosition(t)===i?t===n||t.ownerDocument===H&&$(H,t)?-1:e===n||e.ownerDocument===H&&$(H,e)?1:P?et.call(P,t)-et.call(P,e):0:4&i?-1:1)}:function(t,e){if(t===e)return N=!0,0;var i,r=0,o=t.parentNode,s=e.parentNode,u=[t],l=[e];if(!o||!s)return t===n?-1:e===n?1:o?-1:s?1:P?et.call(P,t)-et.call(P,e):0;if(o===s)return a(t,e);for(i=t;i=i.parentNode;)u.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;u[r]===l[r];)r++;return r?a(u[r],l[r]):u[r]===H?-1:l[r]===H?1:0},n):O},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==O&&j(t),n=n.replace(ft,"='$1']"),x.matchesSelector&&D&&(!I||!I.test(n))&&(!M||!M.test(n)))try{var i=R.call(t,n);if(i||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,O,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==O&&j(t),$(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==O&&j(t);var n=C.attrHandle[e.toLowerCase()],i=n&&G.call(C.attrHandle,e.toLowerCase())?n(t,e,!D):void 0;return void 0!==i?i:x.attributes||!D?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(N=!x.detectDuplicates,P=!x.sortStable&&t.slice(0),t.sort(Q),N){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return P=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},C=e.selectors={cacheLength:50,createPseudo:i,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,Ct),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,Ct),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=S(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,Ct).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||typeof t.getAttribute!==K&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,u){var l,c,f,h,d,p,g=o!==a?"nextSibling":"previousSibling",m=e.parentNode,v=s&&e.nodeName.toLowerCase(),y=!u&&!s;if(m){if(o){for(;g;){for(f=e;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&y){for(c=m[q]||(m[q]={}),l=c[t]||[],d=l[0]===U&&l[1],h=l[0]===U&&l[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||(h=d=0)||p.pop();)if(1===f.nodeType&&++h&&f===e){c[t]=[U,d,h];break}}else if(y&&(l=(e[q]||(e[q]={}))[t])&&l[0]===U)h=l[1];else for(;(f=++d&&f&&f[g]||(h=d=0)||p.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++h||(y&&((f[q]||(f[q]={}))[t]=[U,h]),f!==e)););return h-=r,h===i||h%i===0&&h/i>=0}}},PSEUDO:function(t,n){var r,o=C.pseudos[t]||C.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[q]?o(n):o.length>1?(r=[t,t,"",n],C.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),a=r.length;a--;)i=et.call(t,r[a]),t[i]=!(e[i]=r[a])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=E(t.replace(ut,"$1"));return r[q]?i(function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return dt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,Ct).toLowerCase(),function(e){var n;do if(n=D?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===L},focus:function(t){return t===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!C.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:l(function(){return[0]}),last:l(function(t,e){return[e-1]}),eq:l(function(t,e,n){return[0>n?n+e:n]}),even:l(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:l(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:l(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:l(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=s(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=u(w);return f.prototype=C.filters=C.pseudos,C.setFilters=new f,S=e.tokenize=function(t,n){var i,r,o,a,s,u,l,c=V[t+" "];if(c)return n?0:c.slice(0);for(s=t,u=[],l=C.preFilter;s;){(!i||(r=lt.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),u.push(o=[])),i=!1,(r=ct.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(ut," ")}),s=s.slice(i.length));for(a in C.filter)!(r=pt[a].exec(s))||l[a]&&!(r=l[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?e.error(t):V(t,u).slice(0)},E=e.compile=function(t,e){var n,i=[],r=[],o=B[t+" "];if(!o){for(e||(e=S(t)),n=e.length;n--;)o=y(e[n]),o[q]?i.push(o):r.push(o);o=B(t,b(r,i)),o.selector=t}return o},A=e.select=function(t,e,n,i){var r,o,a,s,u,l="function"==typeof t&&t,f=!i&&S(t=l.selector||t);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&x.getById&&9===e.nodeType&&D&&C.relative[o[1].type]){if(e=(C.find.ID(a.matches[0].replace(xt,Ct),e)||[])[0],!e)return n;l&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=pt.needsContext.test(t)?0:o.length;r--&&(a=o[r],!C.relative[s=a.type]);)if((u=C.find[s])&&(i=u(a.matches[0].replace(xt,Ct),bt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&h(o),!t)return J.apply(n,i),n;break}}return(l||E(t,f))(i,e,!D,n,bt.test(t)&&c(e.parentNode)||e),n},x.sortStable=q.split("").sort(Q).join("")===q,x.detectDuplicates=!!N,j(),x.sortDetached=r(function(t){return 1&t.compareDocumentPosition(O.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),x.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(nt,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);J.find=rt,J.expr=rt.selectors,J.expr[":"]=J.expr.pseudos,J.unique=rt.uniqueSort,J.text=rt.getText,J.isXMLDoc=rt.isXML,J.contains=rt.contains;var ot=J.expr.match.needsContext,at=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,st=/^.[^:#\[\.,]*$/;J.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?J.find.matchesSelector(i,t)?[i]:[]:J.find.matches(t,J.grep(e,function(t){return 1===t.nodeType}))},J.fn.extend({find:function(t){var e,n=this.length,i=[],r=this;if("string"!=typeof t)return this.pushStack(J(t).filter(function(){
for(e=0;n>e;e++)if(J.contains(r[e],this))return!0}));for(e=0;n>e;e++)J.find(t,r[e],i);return i=this.pushStack(n>1?J.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ot.test(t)?J(t):t||[],!1).length}});var ut,lt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ct=J.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:lt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||ut).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof J?e[0]:e,J.merge(this,J.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:Y,!0)),at.test(n[1])&&J.isPlainObject(e))for(n in e)J.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return i=Y.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=Y,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):J.isFunction(t)?"undefined"!=typeof ut.ready?ut.ready(t):t(J):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),J.makeArray(t,this))};ct.prototype=J.fn,ut=J(Y);var ft=/^(?:parents|prev(?:Until|All))/,ht={children:!0,contents:!0,next:!0,prev:!0};J.extend({dir:function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&J(t).is(n))break;i.push(t)}return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),J.fn.extend({has:function(t){var e=J(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(J.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],a=ot.test(t)||"string"!=typeof t?J(t,e||this.context):0;r>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&J.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?J.unique(o):o)},index:function(t){return t?"string"==typeof t?Q.call(J(t),this[0]):Q.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(J.unique(J.merge(this.get(),J(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),J.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return J.dir(t,"parentNode")},parentsUntil:function(t,e,n){return J.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return J.dir(t,"nextSibling")},prevAll:function(t){return J.dir(t,"previousSibling")},nextUntil:function(t,e,n){return J.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return J.dir(t,"previousSibling",n)},siblings:function(t){return J.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return J.sibling(t.firstChild)},contents:function(t){return t.contentDocument||J.merge([],t.childNodes)}},function(t,e){J.fn[t]=function(n,i){var r=J.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=J.filter(i,r)),this.length>1&&(ht[t]||J.unique(r),ft.test(t)&&r.reverse()),this.pushStack(r)}});var dt=/\S+/g,pt={};J.Callbacks=function(t){t="string"==typeof t?pt[t]||o(t):J.extend({},t);var e,n,i,r,a,s,u=[],l=!t.once&&[],c=function(o){for(e=t.memory&&o,n=!0,s=r||0,r=0,a=u.length,i=!0;u&&a>s;s++)if(u[s].apply(o[0],o[1])===!1&&t.stopOnFalse){e=!1;break}i=!1,u&&(l?l.length&&c(l.shift()):e?u=[]:f.disable())},f={add:function(){if(u){var n=u.length;!function o(e){J.each(e,function(e,n){var i=J.type(n);"function"===i?t.unique&&f.has(n)||u.push(n):n&&n.length&&"string"!==i&&o(n)})}(arguments),i?a=u.length:e&&(r=n,c(e))}return this},remove:function(){return u&&J.each(arguments,function(t,e){for(var n;(n=J.inArray(e,u,n))>-1;)u.splice(n,1),i&&(a>=n&&a--,s>=n&&s--)}),this},has:function(t){return t?J.inArray(t,u)>-1:!(!u||!u.length)},empty:function(){return u=[],a=0,this},disable:function(){return u=l=e=void 0,this},disabled:function(){return!u},lock:function(){return l=void 0,e||f.disable(),this},locked:function(){return!l},fireWith:function(t,e){return!u||n&&!l||(e=e||[],e=[t,e.slice?e.slice():e],i?l.push(e):c(e)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!n}};return f},J.extend({Deferred:function(t){var e=[["resolve","done",J.Callbacks("once memory"),"resolved"],["reject","fail",J.Callbacks("once memory"),"rejected"],["notify","progress",J.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return J.Deferred(function(n){J.each(e,function(e,o){var a=J.isFunction(t[e])&&t[e];r[o[1]](function(){var t=a&&a.apply(this,arguments);t&&J.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?J.extend(t,i):i}},r={};return i.pipe=i.then,J.each(e,function(t,o){var a=o[2],s=o[3];i[o[1]]=a.add,s&&a.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=a.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=W.call(arguments),a=o.length,s=1!==a||t&&J.isFunction(t.promise)?a:0,u=1===s?t:J.Deferred(),l=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?W.call(arguments):r,i===e?u.notifyWith(n,i):--s||u.resolveWith(n,i)}};if(a>1)for(e=new Array(a),n=new Array(a),i=new Array(a);a>r;r++)o[r]&&J.isFunction(o[r].promise)?o[r].promise().done(l(r,i,o)).fail(u.reject).progress(l(r,n,e)):--s;return s||u.resolveWith(i,o),u.promise()}});var gt;J.fn.ready=function(t){return J.ready.promise().done(t),this},J.extend({isReady:!1,readyWait:1,holdReady:function(t){t?J.readyWait++:J.ready(!0)},ready:function(t){(t===!0?--J.readyWait:J.isReady)||(J.isReady=!0,t!==!0&&--J.readyWait>0||(gt.resolveWith(Y,[J]),J.fn.triggerHandler&&(J(Y).triggerHandler("ready"),J(Y).off("ready"))))}}),J.ready.promise=function(e){return gt||(gt=J.Deferred(),"complete"===Y.readyState?setTimeout(J.ready):(Y.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1))),gt.promise(e)},J.ready.promise();var mt=J.access=function(t,e,n,i,r,o,a){var s=0,u=t.length,l=null==n;if("object"===J.type(n)){r=!0;for(s in n)J.access(t,e,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,J.isFunction(i)||(a=!0),l&&(a?(e.call(t,i),e=null):(l=e,e=function(t,e,n){return l.call(J(t),n)})),e))for(;u>s;s++)e(t[s],n,a?i:i.call(t[s],s,e(t[s],n)));return r?t:l?e.call(t):u?e(t[0],n):o};J.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},s.uid=1,s.accepts=J.acceptData,s.prototype={key:function(t){if(!s.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=s.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(i){e[this.expando]=n,J.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var i,r=this.key(t),o=this.cache[r];if("string"==typeof e)o[e]=n;else if(J.isEmptyObject(o))J.extend(this.cache[r],e);else for(i in e)o[i]=e[i];return o},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,J.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,r,o=this.key(t),a=this.cache[o];if(void 0===e)this.cache[o]={};else{J.isArray(e)?i=e.concat(e.map(J.camelCase)):(r=J.camelCase(e),e in a?i=[e,r]:(i=r,i=i in a?[i]:i.match(dt)||[])),n=i.length;for(;n--;)delete a[i[n]]}},hasData:function(t){return!J.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var vt=new s,yt=new s,bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,wt=/([A-Z])/g;J.extend({hasData:function(t){return yt.hasData(t)||vt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return vt.access(t,e,n)},_removeData:function(t,e){vt.remove(t,e)}}),J.fn.extend({data:function(t,e){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(r=yt.get(o),1===o.nodeType&&!vt.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=J.camelCase(i.slice(5)),u(o,i,r[i])));vt.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){yt.set(this,t)}):mt(this,function(e){var n,i=J.camelCase(t);if(o&&void 0===e){if(n=yt.get(o,t),void 0!==n)return n;if(n=yt.get(o,i),void 0!==n)return n;if(n=u(o,i,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,i);yt.set(this,i,e),-1!==t.indexOf("-")&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),J.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=vt.get(t,e),n&&(!i||J.isArray(n)?i=vt.access(t,e,J.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=J.queue(t,e),i=n.length,r=n.shift(),o=J._queueHooks(t,e),a=function(){J.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return vt.get(t,n)||vt.access(t,n,{empty:J.Callbacks("once memory").add(function(){vt.remove(t,[e+"queue",n])})})}}),J.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?J.queue(this[0],t):void 0===e?this:this.each(function(){var n=J.queue(this,t,e);J._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&J.dequeue(this,t)})},dequeue:function(t){return this.each(function(){J.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=J.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=vt.get(o[a],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(e)}});var xt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ct=["Top","Right","Bottom","Left"],Tt=function(t,e){return t=e||t,"none"===J.css(t,"display")||!J.contains(t.ownerDocument,t)},kt=/^(?:checkbox|radio)$/i;!function(){var t=Y.createDocumentFragment(),e=t.appendChild(Y.createElement("div")),n=Y.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),X.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",X.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var St="undefined";X.focusinBubbles="onfocusin"in t;var Et=/^key/,At=/^(?:mouse|pointer|contextmenu)|click/,Ft=/^(?:focusinfocus|focusoutblur)$/,Pt=/^([^.]*)(?:\.(.+)|)$/;J.event={global:{},add:function(t,e,n,i,r){var o,a,s,u,l,c,f,h,d,p,g,m=vt.get(t);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),n.guid||(n.guid=J.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(e){return typeof J!==St&&J.event.triggered!==e.type?J.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(dt)||[""],l=e.length;l--;)s=Pt.exec(e[l])||[],d=g=s[1],p=(s[2]||"").split(".").sort(),d&&(f=J.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,f=J.event.special[d]||{},c=J.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&J.expr.match.needsContext.test(r),namespace:p.join(".")},o),(h=u[d])||(h=u[d]=[],h.delegateCount=0,f.setup&&f.setup.call(t,i,p,a)!==!1||t.addEventListener&&t.addEventListener(d,a,!1)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),J.event.global[d]=!0)},remove:function(t,e,n,i,r){var o,a,s,u,l,c,f,h,d,p,g,m=vt.hasData(t)&&vt.get(t);if(m&&(u=m.events)){for(e=(e||"").match(dt)||[""],l=e.length;l--;)if(s=Pt.exec(e[l])||[],d=g=s[1],p=(s[2]||"").split(".").sort(),d){for(f=J.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,h=u[d]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!r&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&f.teardown.call(t,p,m.handle)!==!1||J.removeEvent(t,d,m.handle),delete u[d])}else for(d in u)J.event.remove(t,d+e[l],n,i,!0);J.isEmptyObject(u)&&(delete m.handle,vt.remove(t,"events"))}},trigger:function(e,n,i,r){var o,a,s,u,l,c,f,h=[i||Y],d=G.call(e,"type")?e.type:e,p=G.call(e,"namespace")?e.namespace.split("."):[];if(a=s=i=i||Y,3!==i.nodeType&&8!==i.nodeType&&!Ft.test(d+J.event.triggered)&&(d.indexOf(".")>=0&&(p=d.split("."),d=p.shift(),p.sort()),l=d.indexOf(":")<0&&"on"+d,e=e[J.expando]?e:new J.Event(d,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:J.makeArray(n,[e]),f=J.event.special[d]||{},r||!f.trigger||f.trigger.apply(i,n)!==!1)){if(!r&&!f.noBubble&&!J.isWindow(i)){for(u=f.delegateType||d,Ft.test(u+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(i.ownerDocument||Y)&&h.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)e.type=o>1?u:f.bindType||d,c=(vt.get(a,"events")||{})[e.type]&&vt.get(a,"handle"),c&&c.apply(a,n),c=l&&a[l],c&&c.apply&&J.acceptData(a)&&(e.result=c.apply(a,n),e.result===!1&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!J.acceptData(i)||l&&J.isFunction(i[d])&&!J.isWindow(i)&&(s=i[l],s&&(i[l]=null),J.event.triggered=d,i[d](),J.event.triggered=void 0,s&&(i[l]=s)),e.result}},dispatch:function(t){t=J.event.fix(t);var e,n,i,r,o,a=[],s=W.call(arguments),u=(vt.get(this,"events")||{})[t.type]||[],l=J.event.special[t.type]||{};if(s[0]=t,t.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,t)!==!1){for(a=J.event.handlers.call(this,t,u),e=0;(r=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(o.namespace))&&(t.handleObj=o,t.data=o.data,i=((J.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,a=[],s=e.delegateCount,u=t.target;if(s&&u.nodeType&&(!t.button||"click"!==t.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==t.type){for(i=[],n=0;s>n;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?J(r,this).index(u)>=0:J.find(r,this,null,[u]).length),i[r]&&i.push(o);i.length&&a.push({elem:u,handlers:i})}return s<e.length&&a.push({elem:this,handlers:e.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Y,i=n.documentElement,r=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[J.expando])return t;var e,n,i,r=t.type,o=t,a=this.fixHooks[r];for(a||(this.fixHooks[r]=a=At.test(r)?this.mouseHooks:Et.test(r)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,t=new J.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=Y),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==f()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&J.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return J.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=J.extend(new J.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?J.event.trigger(r,null,e):J.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},J.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},J.Event=function(t,e){return this instanceof J.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?l:c):this.type=t,e&&J.extend(this,e),this.timeStamp=t&&t.timeStamp||J.now(),void(this[J.expando]=!0)):new J.Event(t,e)},J.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=l,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=l,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=l,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},J.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){J.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return(!r||r!==i&&!J.contains(i,r))&&(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),X.focusinBubbles||J.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){J.event.simulate(e,t.target,J.event.fix(t),!0)};J.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=vt.access(i,e);r||i.addEventListener(t,n,!0),vt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=vt.access(i,e)-1;r?vt.access(i,e,r):(i.removeEventListener(t,n,!0),vt.remove(i,e))}}}),J.fn.extend({on:function(t,e,n,i,r){var o,a;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(a in t)this.on(a,e,n,t[a],r);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=c;else if(!i)return this;return 1===r&&(o=i,i=function(t){return J().off(t),o.apply(this,arguments)},i.guid=o.guid||(o.guid=J.guid++)),this.each(function(){J.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,J(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=c),this.each(function(){J.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){J.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?J.event.trigger(t,e,n,!0):void 0}});var Nt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jt=/<([\w:]+)/,Ot=/<|&#?\w+;/,Lt=/<(?:script|style|link)/i,Dt=/checked\s*(?:[^=]|=\s*.checked.)/i,Mt=/^$|\/(?:java|ecma)script/i,It=/^true\/(.*)/,Rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,$t={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$t.optgroup=$t.option,$t.tbody=$t.tfoot=$t.colgroup=$t.caption=$t.thead,$t.th=$t.td,J.extend({clone:function(t,e,n){var i,r,o,a,s=t.cloneNode(!0),u=J.contains(t.ownerDocument,t);if(!(X.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||J.isXMLDoc(t)))for(a=v(s),o=v(t),i=0,r=o.length;r>i;i++)y(o[i],a[i]);if(e)if(n)for(o=o||v(t),a=a||v(s),i=0,r=o.length;r>i;i++)m(o[i],a[i]);else m(t,s);return a=v(s,"script"),a.length>0&&g(a,!u&&v(t,"script")),s},buildFragment:function(t,e,n,i){for(var r,o,a,s,u,l,c=e.createDocumentFragment(),f=[],h=0,d=t.length;d>h;h++)if(r=t[h],r||0===r)if("object"===J.type(r))J.merge(f,r.nodeType?[r]:r);else if(Ot.test(r)){for(o=o||c.appendChild(e.createElement("div")),a=(jt.exec(r)||["",""])[1].toLowerCase(),s=$t[a]||$t._default,o.innerHTML=s[1]+r.replace(Nt,"<$1></$2>")+s[2],l=s[0];l--;)o=o.lastChild;J.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(e.createTextNode(r));for(c.textContent="",h=0;r=f[h++];)if((!i||-1===J.inArray(r,i))&&(u=J.contains(r.ownerDocument,r),o=v(c.appendChild(r),"script"),u&&g(o),n))for(l=0;r=o[l++];)Mt.test(r.type||"")&&n.push(r);return c},cleanData:function(t){for(var e,n,i,r,o=J.event.special,a=0;void 0!==(n=t[a]);a++){if(J.acceptData(n)&&(r=n[vt.expando],r&&(e=vt.cache[r]))){if(e.events)for(i in e.events)o[i]?J.event.remove(n,i):J.removeEvent(n,i,e.handle);vt.cache[r]&&delete vt.cache[r]}delete yt.cache[n[yt.expando]]}}}),J.fn.extend({text:function(t){return mt(this,function(t){return void 0===t?J.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?J.filter(t,this):this,r=0;null!=(n=i[r]);r++)e||1!==n.nodeType||J.cleanData(v(n)),n.parentNode&&(e&&J.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(J.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return J.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Lt.test(t)&&!$t[(jt.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Nt,"<$1></$2>");try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(J.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,J.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=V.apply([],t);var n,i,r,o,a,s,u=0,l=this.length,c=this,f=l-1,h=t[0],g=J.isFunction(h);if(g||l>1&&"string"==typeof h&&!X.checkClone&&Dt.test(h))return this.each(function(n){var i=c.eq(n);g&&(t[0]=h.call(this,n,i.html())),i.domManip(t,e)});if(l&&(n=J.buildFragment(t,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(r=J.map(v(n,"script"),d),o=r.length;l>u;u++)a=n,u!==f&&(a=J.clone(a,!0,!0),o&&J.merge(r,v(a,"script"))),e.call(this[u],a,u);if(o)for(s=r[r.length-1].ownerDocument,J.map(r,p),u=0;o>u;u++)a=r[u],Mt.test(a.type||"")&&!vt.access(a,"globalEval")&&J.contains(s,a)&&(a.src?J._evalUrl&&J._evalUrl(a.src):J.globalEval(a.textContent.replace(Rt,"")))}return this}}),J.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){J.fn[t]=function(t){for(var n,i=[],r=J(t),o=r.length-1,a=0;o>=a;a++)n=a===o?this:this.clone(!0),J(r[a])[e](n),B.apply(i,n.get());return this.pushStack(i)}});var qt,Ht={},Ut=/^margin/,_t=new RegExp("^("+xt+")(?!px)[a-z%]+$","i"),Wt=function(t){return t.ownerDocument.defaultView.getComputedStyle(t,null)};!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",a.innerHTML="",r.appendChild(o);var e=t.getComputedStyle(a,null);n="1%"!==e.top,i="4px"===e.width,r.removeChild(o)}var n,i,r=Y.documentElement,o=Y.createElement("div"),a=Y.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",X.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(a),t.getComputedStyle&&J.extend(X,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},reliableMarginRight:function(){var e,n=a.appendChild(Y.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",r.appendChild(o),e=!parseFloat(t.getComputedStyle(n,null).marginRight),r.removeChild(o),e}}))}(),J.swap=function(t,e,n,i){var r,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=a[o];return r};var Vt=/^(none|table(?!-c[ea]).+)/,Bt=new RegExp("^("+xt+")(.*)$","i"),Qt=new RegExp("^([+-])=("+xt+")","i"),Kt={position:"absolute",visibility:"hidden",display:"block"},zt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];J.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=x(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,a,s=J.camelCase(e),u=t.style;return e=J.cssProps[s]||(J.cssProps[s]=T(u,s)),a=J.cssHooks[e]||J.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(r=a.get(t,!1,i))?r:u[e]:(o=typeof n,"string"===o&&(r=Qt.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(J.css(t,e)),o="number"),null!=n&&n===n&&("number"!==o||J.cssNumber[s]||(n+="px"),X.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,i))||(u[e]=n)),void 0)}},css:function(t,e,n,i){var r,o,a,s=J.camelCase(e);return e=J.cssProps[s]||(J.cssProps[s]=T(t.style,s)),a=J.cssHooks[e]||J.cssHooks[s],a&&"get"in a&&(r=a.get(t,!0,n)),void 0===r&&(r=x(t,e,i)),"normal"===r&&e in zt&&(r=zt[e]),""===n||n?(o=parseFloat(r),n===!0||J.isNumeric(o)?o||0:r):r}}),J.each(["height","width"],function(t,e){J.cssHooks[e]={get:function(t,n,i){return n?Vt.test(J.css(t,"display"))&&0===t.offsetWidth?J.swap(t,Kt,function(){return E(t,e,i)}):E(t,e,i):void 0},set:function(t,n,i){var r=i&&Wt(t);return k(t,n,i?S(t,e,i,"border-box"===J.css(t,"boxSizing",!1,r),r):0)}}}),J.cssHooks.marginRight=C(X.reliableMarginRight,function(t,e){return e?J.swap(t,{display:"inline-block"},x,[t,"marginRight"]):void 0}),J.each({margin:"",padding:"",border:"Width"},function(t,e){J.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+Ct[i]+e]=o[i]||o[i-2]||o[0];return r}},Ut.test(t)||(J.cssHooks[t+e].set=k)}),J.fn.extend({css:function(t,e){return mt(this,function(t,e,n){var i,r,o={},a=0;if(J.isArray(e)){for(i=Wt(t),r=e.length;r>a;a++)o[e[a]]=J.css(t,e[a],!1,i);return o}return void 0!==n?J.style(t,e,n):J.css(t,e)},t,e,arguments.length>1)},show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Tt(this)?J(this).show():J(this).hide()})}}),J.Tween=F,F.prototype={constructor:F,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(J.cssNumber[n]?"":"px")},cur:function(){var t=F.propHooks[this.prop];return t&&t.get?t.get(this):F.propHooks._default.get(this)},run:function(t){var e,n=F.propHooks[this.prop];return this.options.duration?this.pos=e=J.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):F.propHooks._default.set(this),this}},F.prototype.init.prototype=F.prototype,F.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=J.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){J.fx.step[t.prop]?J.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[J.cssProps[t.prop]]||J.cssHooks[t.prop])?J.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},F.propHooks.scrollTop=F.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},J.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},J.fx=F.prototype.init,J.fx.step={};var Xt,Yt,Zt=/^(?:toggle|show|hide)$/,Jt=new RegExp("^(?:([+-])=|)("+xt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[O],ne={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),r=Jt.exec(e),o=r&&r[3]||(J.cssNumber[t]?"":"px"),a=(J.cssNumber[t]||"px"!==o&&+i)&&Jt.exec(J.css(n.elem,t)),s=1,u=20;if(a&&a[3]!==o){o=o||a[3],r=r||[],a=+i||1;do s=s||".5",a/=s,J.style(n.elem,t,a+o);while(s!==(s=n.cur()/i)&&1!==s&&--u)}return r&&(a=n.start=+a||+i||0,n.unit=o,n.end=r[1]?a+(r[1]+1)*r[2]:+r[2]),n}]};J.Animation=J.extend(D,{tweener:function(t,e){J.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;r>i;i++)n=t[i],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),J.speed=function(t,e,n){var i=t&&"object"==typeof t?J.extend({},t):{complete:n||!n&&e||J.isFunction(t)&&t,duration:t,easing:n&&e||e&&!J.isFunction(e)&&e};return i.duration=J.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in J.fx.speeds?J.fx.speeds[i.duration]:J.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){J.isFunction(i.old)&&i.old.call(this),i.queue&&J.dequeue(this,i.queue)},i},J.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Tt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=J.isEmptyObject(t),o=J.speed(e,n,i),a=function(){var e=D(this,J.extend({},t),o);(r||vt.get(this,"finish"))&&e.stop(!0)};return a.finish=a,r||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=J.timers,a=vt.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&te.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));(e||!n)&&J.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=vt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=J.timers,a=i?i.length:0;for(n.finish=!0,J.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;a>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);
delete n.finish})}}),J.each(["toggle","show","hide"],function(t,e){var n=J.fn[e];J.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(N(e,!0),t,i,r)}}),J.each({slideDown:N("show"),slideUp:N("hide"),slideToggle:N("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){J.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),J.timers=[],J.fx.tick=function(){var t,e=0,n=J.timers;for(Xt=J.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||J.fx.stop(),Xt=void 0},J.fx.timer=function(t){J.timers.push(t),t()?J.fx.start():J.timers.pop()},J.fx.interval=13,J.fx.start=function(){Yt||(Yt=setInterval(J.fx.tick,J.fx.interval))},J.fx.stop=function(){clearInterval(Yt),Yt=null},J.fx.speeds={slow:600,fast:200,_default:400},J.fn.delay=function(t,e){return t=J.fx?J.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t=Y.createElement("input"),e=Y.createElement("select"),n=e.appendChild(Y.createElement("option"));t.type="checkbox",X.checkOn=""!==t.value,X.optSelected=n.selected,e.disabled=!0,X.optDisabled=!n.disabled,t=Y.createElement("input"),t.value="t",t.type="radio",X.radioValue="t"===t.value}();var ie,re,oe=J.expr.attrHandle;J.fn.extend({attr:function(t,e){return mt(this,J.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){J.removeAttr(this,t)})}}),J.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return typeof t.getAttribute===St?J.prop(t,e,n):(1===o&&J.isXMLDoc(t)||(e=e.toLowerCase(),i=J.attrHooks[e]||(J.expr.match.bool.test(e)?re:ie)),void 0===n?i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=J.find.attr(t,e),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void J.removeAttr(t,e))},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(dt);if(o&&1===t.nodeType)for(;n=o[r++];)i=J.propFix[n]||n,J.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!X.radioValue&&"radio"===e&&J.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),re={set:function(t,e,n){return e===!1?J.removeAttr(t,n):t.setAttribute(n,n),n}},J.each(J.expr.match.bool.source.match(/\w+/g),function(t,e){var n=oe[e]||J.find.attr;oe[e]=function(t,e,i){var r,o;return i||(o=oe[e],oe[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,oe[e]=o),r}});var ae=/^(?:input|select|textarea|button)$/i;J.fn.extend({prop:function(t,e){return mt(this,J.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[J.propFix[t]||t]})}}),J.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,r,o,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return o=1!==a||!J.isXMLDoc(t),o&&(e=J.propFix[e]||e,r=J.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||ae.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),X.optSelected||(J.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),J.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){J.propFix[this.toLowerCase()]=this});var se=/[\t\r\n\f]/g;J.fn.extend({addClass:function(t){var e,n,i,r,o,a,s="string"==typeof t&&t,u=0,l=this.length;if(J.isFunction(t))return this.each(function(e){J(this).addClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(dt)||[];l>u;u++)if(n=this[u],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=J.trim(i),n.className!==a&&(n.className=a)}return this},removeClass:function(t){var e,n,i,r,o,a,s=0===arguments.length||"string"==typeof t&&t,u=0,l=this.length;if(J.isFunction(t))return this.each(function(e){J(this).removeClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(dt)||[];l>u;u++)if(n=this[u],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):"")){for(o=0;r=e[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");a=t?J.trim(i):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):J.isFunction(t)?this.each(function(n){J(this).toggleClass(t.call(this,n,this.className,e),e)}):this.each(function(){if("string"===n)for(var e,i=0,r=J(this),o=t.match(dt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else(n===St||"boolean"===n)&&(this.className&&vt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":vt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(se," ").indexOf(e)>=0)return!0;return!1}});var ue=/\r/g;J.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=J.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,J(this).val()):t,null==r?r="":"number"==typeof r?r+="":J.isArray(r)&&(r=J.map(r,function(t){return null==t?"":t+""})),e=J.valHooks[this.type]||J.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=J.valHooks[r.type]||J.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(ue,""):null==n?"":n)}}}),J.extend({valHooks:{option:{get:function(t){var e=J.find.attr(t,"value");return null!=e?e:J.trim(J.text(t))}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||0>r,a=o?null:[],s=o?r+1:i.length,u=0>r?s:o?r:0;s>u;u++)if(n=i[u],(n.selected||u===r)&&(X.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!J.nodeName(n.parentNode,"optgroup"))){if(e=J(n).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,o=J.makeArray(e),a=r.length;a--;)i=r[a],(i.selected=J.inArray(i.value,o)>=0)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),J.each(["radio","checkbox"],function(){J.valHooks[this]={set:function(t,e){return J.isArray(e)?t.checked=J.inArray(J(t).val(),e)>=0:void 0}},X.checkOn||(J.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),J.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){J.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),J.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var le=J.now(),ce=/\?/;J.parseJSON=function(t){return JSON.parse(t+"")},J.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(i){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&J.error("Invalid XML: "+t),e};var fe,he,de=/#.*$/,pe=/([?&])_=[^&]*/,ge=/^(.*?):[ \t]*([^\r\n]*)$/gm,me=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ve=/^(?:GET|HEAD)$/,ye=/^\/\//,be=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,we={},xe={},Ce="*/".concat("*");try{he=location.href}catch(Te){he=Y.createElement("a"),he.href="",he=he.href}fe=be.exec(he.toLowerCase())||[],J.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:he,type:"GET",isLocal:me.test(fe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ce,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":J.parseJSON,"text xml":J.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?R(R(t,J.ajaxSettings),e):R(J.ajaxSettings,t)},ajaxPrefilter:M(we),ajaxTransport:M(xe),ajax:function(t,e){function n(t,e,n,a){var u,c,v,y,w,C=e;2!==b&&(b=2,s&&clearTimeout(s),i=void 0,o=a||"",x.readyState=t>0?4:0,u=t>=200&&300>t||304===t,n&&(y=$(f,x,n)),y=q(f,y,x,u),u?(f.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(J.lastModified[r]=w),w=x.getResponseHeader("etag"),w&&(J.etag[r]=w)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=y.state,c=y.data,v=y.error,u=!v)):(v=C,(t||!C)&&(C="error",0>t&&(t=0))),x.status=t,x.statusText=(e||C)+"",u?p.resolveWith(h,[c,C,x]):p.rejectWith(h,[x,C,v]),x.statusCode(m),m=void 0,l&&d.trigger(u?"ajaxSuccess":"ajaxError",[x,f,u?c:v]),g.fireWith(h,[x,C]),l&&(d.trigger("ajaxComplete",[x,f]),--J.active||J.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,a,s,u,l,c,f=J.ajaxSetup({},e),h=f.context||f,d=f.context&&(h.nodeType||h.jquery)?J(h):J.event,p=J.Deferred(),g=J.Callbacks("once memory"),m=f.statusCode||{},v={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!a)for(a={};e=ge.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?o:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=y[n]=y[n]||t,v[t]=e),this},overrideMimeType:function(t){return b||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)m[e]=[m[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||w;return i&&i.abort(e),n(0,e),this}};if(p.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,f.url=((t||f.url||he)+"").replace(de,"").replace(ye,fe[1]+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=J.trim(f.dataType||"*").toLowerCase().match(dt)||[""],null==f.crossDomain&&(u=be.exec(f.url.toLowerCase()),f.crossDomain=!(!u||u[1]===fe[1]&&u[2]===fe[2]&&(u[3]||("http:"===u[1]?"80":"443"))===(fe[3]||("http:"===fe[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=J.param(f.data,f.traditional)),I(we,f,e,x),2===b)return x;l=f.global,l&&0===J.active++&&J.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!ve.test(f.type),r=f.url,f.hasContent||(f.data&&(r=f.url+=(ce.test(r)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=pe.test(r)?r.replace(pe,"$1_="+le++):r+(ce.test(r)?"&":"?")+"_="+le++)),f.ifModified&&(J.lastModified[r]&&x.setRequestHeader("If-Modified-Since",J.lastModified[r]),J.etag[r]&&x.setRequestHeader("If-None-Match",J.etag[r])),(f.data&&f.hasContent&&f.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ce+"; q=0.01":""):f.accepts["*"]);for(c in f.headers)x.setRequestHeader(c,f.headers[c]);if(f.beforeSend&&(f.beforeSend.call(h,x,f)===!1||2===b))return x.abort();w="abort";for(c in{success:1,error:1,complete:1})x[c](f[c]);if(i=I(xe,f,e,x)){x.readyState=1,l&&d.trigger("ajaxSend",[x,f]),f.async&&f.timeout>0&&(s=setTimeout(function(){x.abort("timeout")},f.timeout));try{b=1,i.send(v,n)}catch(C){if(!(2>b))throw C;n(-1,C)}}else n(-1,"No Transport");return x},getJSON:function(t,e,n){return J.get(t,e,n,"json")},getScript:function(t,e){return J.get(t,void 0,e,"script")}}),J.each(["get","post"],function(t,e){J[e]=function(t,n,i,r){return J.isFunction(n)&&(r=r||i,i=n,n=void 0),J.ajax({url:t,type:e,dataType:r,data:n,success:i})}}),J.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){J.fn[e]=function(t){return this.on(e,t)}}),J._evalUrl=function(t){return J.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},J.fn.extend({wrapAll:function(t){var e;return J.isFunction(t)?this.each(function(e){J(this).wrapAll(t.call(this,e))}):(this[0]&&(e=J(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return J.isFunction(t)?this.each(function(e){J(this).wrapInner(t.call(this,e))}):this.each(function(){var e=J(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=J.isFunction(t);return this.each(function(n){J(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){J.nodeName(this,"body")||J(this).replaceWith(this.childNodes)}).end()}}),J.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},J.expr.filters.visible=function(t){return!J.expr.filters.hidden(t)};var ke=/%20/g,Se=/\[\]$/,Ee=/\r?\n/g,Ae=/^(?:submit|button|image|reset|file)$/i,Fe=/^(?:input|select|textarea|keygen)/i;J.param=function(t,e){var n,i=[],r=function(t,e){e=J.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=J.ajaxSettings&&J.ajaxSettings.traditional),J.isArray(t)||t.jquery&&!J.isPlainObject(t))J.each(t,function(){r(this.name,this.value)});else for(n in t)H(n,t[n],e,r);return i.join("&").replace(ke,"+")},J.fn.extend({serialize:function(){return J.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=J.prop(this,"elements");return t?J.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!J(this).is(":disabled")&&Fe.test(this.nodeName)&&!Ae.test(t)&&(this.checked||!kt.test(t))}).map(function(t,e){var n=J(this).val();return null==n?null:J.isArray(n)?J.map(n,function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}}):{name:e.name,value:n.replace(Ee,"\r\n")}}).get()}}),J.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Pe=0,Ne={},je={0:200,1223:204},Oe=J.ajaxSettings.xhr();t.ActiveXObject&&J(t).on("unload",function(){for(var t in Ne)Ne[t]()}),X.cors=!!Oe&&"withCredentials"in Oe,X.ajax=Oe=!!Oe,J.ajaxTransport(function(t){var e;return X.cors||Oe&&!t.crossDomain?{send:function(n,i){var r,o=t.xhr(),a=++Pe;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)o[r]=t.xhrFields[r];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)o.setRequestHeader(r,n[r]);e=function(t){return function(){e&&(delete Ne[a],e=o.onload=o.onerror=null,"abort"===t?o.abort():"error"===t?i(o.status,o.statusText):i(je[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=e(),o.onerror=e("error"),e=Ne[a]=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(s){if(e)throw s}},abort:function(){e&&e()}}:void 0}),J.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return J.globalEval(t),t}}}),J.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),J.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=J("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),Y.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Le=[],De=/(=)\?(?=&|$)|\?\?/;J.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Le.pop()||J.expando+"_"+le++;return this[t]=!0,t}}),J.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,a,s=e.jsonp!==!1&&(De.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&De.test(e.data)&&"data");return s||"jsonp"===e.dataTypes[0]?(r=e.jsonpCallback=J.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(De,"$1"+r):e.jsonp!==!1&&(e.url+=(ce.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||J.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){a=arguments},i.always(function(){t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,Le.push(r)),a&&J.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),J.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||Y;var i=at.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=J.buildFragment([t],e,r),r&&r.length&&J(r).remove(),J.merge([],i.childNodes))};var Me=J.fn.load;J.fn.load=function(t,e,n){if("string"!=typeof t&&Me)return Me.apply(this,arguments);var i,r,o,a=this,s=t.indexOf(" ");return s>=0&&(i=J.trim(t.slice(s)),t=t.slice(0,s)),J.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),a.length>0&&J.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){o=arguments,a.html(i?J("<div>").append(J.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){a.each(n,o||[t.responseText,e,t])}),this},J.expr.filters.animated=function(t){return J.grep(J.timers,function(e){return t===e.elem}).length};var Ie=t.document.documentElement;J.offset={setOffset:function(t,e,n){var i,r,o,a,s,u,l,c=J.css(t,"position"),f=J(t),h={};"static"===c&&(t.style.position="relative"),s=f.offset(),o=J.css(t,"top"),u=J.css(t,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(i=f.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(u)||0),J.isFunction(e)&&(e=e.call(t,n,s)),null!=e.top&&(h.top=e.top-s.top+a),null!=e.left&&(h.left=e.left-s.left+r),"using"in e?e.using.call(t,h):f.css(h)}},J.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){J.offset.setOffset(this,t,e)});var e,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;if(o)return e=o.documentElement,J.contains(e,i)?(typeof i.getBoundingClientRect!==St&&(r=i.getBoundingClientRect()),n=U(o),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===J.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),J.nodeName(t[0],"html")||(i=t.offset()),i.top+=J.css(t[0],"borderTopWidth",!0),i.left+=J.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-J.css(n,"marginTop",!0),left:e.left-i.left-J.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||Ie;t&&!J.nodeName(t,"html")&&"static"===J.css(t,"position");)t=t.offsetParent;return t||Ie})}}),J.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var i="pageYOffset"===n;J.fn[e]=function(r){return mt(this,function(e,r,o){var a=U(e);return void 0===o?a?a[n]:e[r]:void(a?a.scrollTo(i?t.pageXOffset:o,i?o:t.pageYOffset):e[r]=o)},e,r,arguments.length,null)}}),J.each(["top","left"],function(t,e){J.cssHooks[e]=C(X.pixelPosition,function(t,n){return n?(n=x(t,e),_t.test(n)?J(t).position()[e]+"px":n):void 0})}),J.each({Height:"height",Width:"width"},function(t,e){J.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){J.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),a=n||(i===!0||r===!0?"margin":"border");return mt(this,function(e,n,i){var r;return J.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?J.css(e,n,a):J.style(e,n,i,a)},e,o?i:void 0,o,null)}})}),J.fn.size=function(){return this.length},J.fn.andSelf=J.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return J});var Re=t.jQuery,$e=t.$;return J.noConflict=function(e){return t.$===J&&(t.$=$e),e&&t.jQuery===J&&(t.jQuery=Re),J},typeof e===St&&(t.jQuery=t.$=J),J}),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.affix"),o="object"==typeof e&&e;r||i.data("bs.affix",r=new n(this,o)),"string"==typeof e&&r[e]()})}var n=function(e,i){this.options=t.extend({},n.DEFAULTS,i),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.2.0",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=t(document).height(),i=this.$target.scrollTop(),r=this.$element.offset(),o=this.options.offset,a=o.top,s=o.bottom;"object"!=typeof o&&(s=a=o),"function"==typeof a&&(a=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var u=null!=this.unpin&&i+this.unpin<=r.top?!1:null!=s&&r.top+this.$element.height()>=e-s?"bottom":null!=a&&a>=i?"top":!1;if(this.affixed!==u){null!=this.unpin&&this.$element.css("top","");var l="affix"+(u?"-"+u:""),c=t.Event(l+".bs.affix");this.$element.trigger(c),c.isDefaultPrevented()||(this.affixed=u,this.unpin="bottom"==u?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(t.Event(l.replace("affix","affixed"))),"bottom"==u&&this.$element.offset({top:e-this.$element.height()-s}))}}};var i=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},i.offsetBottom&&(i.offset.bottom=i.offsetBottom),i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),r=n.data("bs.alert");r||n.data("bs.alert",r=new i(this)),"string"==typeof e&&r[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.2.0",i.prototype.close=function(e){function n(){o.detach().trigger("closed.bs.alert").remove()}var i=t(this),r=i.attr("data-target");r||(r=i.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));var o=t(r);e&&e.preventDefault(),o.length||(o=i.hasClass("alert")?i:i.parent()),o.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",n).emulateTransitionEnd(150):n())};var r=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=r,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.button"),o="object"==typeof e&&e;r||i.data("bs.button",r=new n(this,o)),"toggle"==e?r.toggle():e&&r.setState(e)})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.isLoading=!1};n.VERSION="3.2.0",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,r=i.is("input")?"val":"html",o=i.data();e+="Text",null==o.resetText&&i.data("resetText",i[r]()),i[r](null==o[e]?this.options[e]:o[e]),setTimeout(t.proxy(function(){"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?t=!1:e.find(".active").removeClass("active")),t&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}t&&this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target);i.hasClass("btn")||(i=i.closest(".btn")),e.call(i,"toggle"),n.preventDefault()})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.carousel"),o=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e),a="string"==typeof e?e:o.slide;r||i.data("bs.carousel",r=new n(this,o)),"number"==typeof e?r.to(e):a?r[a]():o.interval&&r.pause().cycle()})}var n=function(e,n){this.$element=t(e).on("keydown.bs.carousel",t.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.2.0",n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},n.prototype.keydown=function(t){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.to=function(e){var n=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));return e>this.$items.length-1||0>e?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){n.to(e)}):i==e?this.pause().cycle():this.slide(e>i?"next":"prev",t(this.$items[e]))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,n){var i=this.$element.find(".item.active"),r=n||i[e](),o=this.interval,a="next"==e?"left":"right",s="next"==e?"first":"last",u=this;if(!r.length){if(!this.options.wrap)return;r=this.$element.find(".item")[s]()}if(r.hasClass("active"))return this.sliding=!1;var l=r[0],c=t.Event("slide.bs.carousel",{relatedTarget:l,direction:a});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(r)]);f&&f.addClass("active")}var h=t.Event("slid.bs.carousel",{relatedTarget:l,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(r.addClass(e),r[0].offsetWidth,i.addClass(a),r.addClass(a),i.one("bsTransitionEnd",function(){r.removeClass([e,a].join(" ")).addClass("active"),i.removeClass(["active",a].join(" ")),u.sliding=!1,setTimeout(function(){u.$element.trigger(h)},0)}).emulateTransitionEnd(1e3*i.css("transition-duration").slice(0,-1))):(i.removeClass("active"),r.addClass("active"),this.sliding=!1,this.$element.trigger(h)),o&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this},t(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(n){var i,r=t(this),o=t(r.attr("data-target")||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var a=t.extend({},o.data(),r.data()),s=r.attr("data-slide-to");s&&(a.interval=!1),e.call(o,a),s&&o.data("bs.carousel").to(s),n.preventDefault()}}),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.collapse"),o=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);!r&&o.toggle&&"show"==e&&(e=!e),r||i.data("bs.collapse",r=new n(this,o)),"string"==typeof e&&r[e]()})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.transitioning=null,this.options.parent&&(this.$parent=t(this.options.parent)),this.options.toggle&&this.toggle()};n.VERSION="3.2.0",n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n=t.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var i=this.$parent&&this.$parent.find("> .panel > .in");if(i&&i.length){var r=i.data("bs.collapse");if(r&&r.transitioning)return;e.call(i,"hide"),r||i.data("bs.collapse",null)}var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var s=t.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(350)[o](this.$element[0][s])}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(350):i.call(this)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var i=t.fn.collapse;t.fn.collapse=e,t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var i,r=t(this),o=r.attr("data-target")||n.preventDefault()||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""),a=t(o),s=a.data("bs.collapse"),u=s?"toggle":r.data(),l=r.attr("data-parent"),c=l&&t(l);s&&s.transitioning||(c&&c.find('[data-toggle="collapse"][data-parent="'+l+'"]').not(r).addClass("collapsed"),r[a.hasClass("in")?"addClass":"removeClass"]("collapsed")),e.call(a,u)})}(jQuery),+function(t){"use strict";function e(e){e&&3===e.which||(t(r).remove(),t(o).each(function(){var i=n(t(this)),r={relatedTarget:this};i.hasClass("open")&&(i.trigger(e=t.Event("hide.bs.dropdown",r)),e.isDefaultPrevented()||i.removeClass("open").trigger("hidden.bs.dropdown",r))}))}function n(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new a(this)),"string"==typeof e&&i[e].call(n)})}var r=".dropdown-backdrop",o='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.2.0",a.prototype.toggle=function(i){var r=t(this);if(!r.is(".disabled, :disabled")){var o=n(r),a=o.hasClass("open");if(e(),!a){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t('<div class="dropdown-backdrop"/>').insertAfter(t(this)).on("click",e);var s={relatedTarget:this};if(o.trigger(i=t.Event("show.bs.dropdown",s)),i.isDefaultPrevented())return;
r.trigger("focus"),o.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},a.prototype.keydown=function(e){if(/(38|40|27)/.test(e.keyCode)){var i=t(this);if(e.preventDefault(),e.stopPropagation(),!i.is(".disabled, :disabled")){var r=n(i),a=r.hasClass("open");if(!a||a&&27==e.keyCode)return 27==e.which&&r.find(o).trigger("focus"),i.trigger("click");var s=" li:not(.divider):visible a",u=r.find('[role="menu"]'+s+', [role="listbox"]'+s);if(u.length){var l=u.index(u.filter(":focus"));38==e.keyCode&&l>0&&l--,40==e.keyCode&&l<u.length-1&&l++,~l||(l=0),u.eq(l).trigger("focus")}}}};var s=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",e).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,a.prototype.toggle).on("keydown.bs.dropdown.data-api",o+', [role="menu"], [role="listbox"]',a.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tab");r||i.data("bs.tab",r=new n(this)),"string"==typeof e&&r[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.2.0",n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var r=n.find(".active:last a")[0],o=t.Event("show.bs.tab",{relatedTarget:r});if(e.trigger(o),!o.isDefaultPrevented()){var a=t(i);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){e.trigger({type:"shown.bs.tab",relatedTarget:r})})}}},n.prototype.activate=function(e,n,i){function r(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),e.addClass("active"),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu")&&e.closest("li.dropdown").addClass("active"),i&&i()}var o=n.find("> .active"),a=i&&t.support.transition&&o.hasClass("fade");a?o.one("bsTransitionEnd",r).emulateTransitionEnd(150):r(),o.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this},t(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),e.call(t(this),"show")})}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var r=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(r,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(n,i){var r=t.proxy(this.process,this);this.$body=t("body"),this.$scrollElement=t(t(n).is("body")?window:n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",r),this.refresh(),this.process()}function n(n){return this.each(function(){var i=t(this),r=i.data("bs.scrollspy"),o="object"==typeof n&&n;r||i.data("bs.scrollspy",r=new e(this,o)),"string"==typeof n&&r[n]()})}e.VERSION="3.2.0",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e="offset",n=0;t.isWindow(this.$scrollElement[0])||(e="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var i=this;this.$body.find(this.selector).map(function(){var i=t(this),r=i.data("target")||i.attr("href"),o=/^#./.test(r)&&t(r);return o&&o.length&&o.is(":visible")&&[[o[e]().top+n,r]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){i.offsets.push(this[0]),i.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),r=this.offsets,o=this.targets,a=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return a!=(t=o[o.length-1])&&this.activate(t);if(a&&e<=r[0])return a!=(t=o[0])&&this.activate(t);for(t=r.length;t--;)a!=o[t]&&e>=r[t]&&(!r[t+1]||e<=r[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,t(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e,i){return this.each(function(){var r=t(this),o=r.data("bs.modal"),a=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e);o||r.data("bs.modal",o=new n(this,a)),"string"==typeof e?o[e](i):a.show&&o.show(i)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.2.0",n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var n=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.backdrop(function(){var i=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),i&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:e});i?n.$element.find(".modal-dialog").one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(300):n.$element.trigger("focus").trigger(r)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var n=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&i;if(this.$backdrop=t('<div class="modal-backdrop '+i+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;r?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(150):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){n.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(150):o()}else e&&e()},n.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),r=i.attr("href"),o=t(i.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),a=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(r)&&r},o.data(),i.data());i.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(o,a,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tooltip"),o="object"==typeof e&&e;(r||"destroy"!=e)&&(r||i.data("bs.tooltip",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",t,e)};n.VERSION="3.2.0",n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,i){this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(this.options.viewport.selector||this.options.viewport);for(var r=this.options.trigger.split(" "),o=r.length;o--;){var a=r[o];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var s="hover"==a?"mouseenter":"focusin",u="hover"==a?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(u+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show()},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide()},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var n=t.contains(document.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!n)return;var i=this,r=this.tip(),o=this.getUID(this.type);this.setContent(),r.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&r.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,u=s.test(a);u&&(a=a.replace(s,"")||"top"),r.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element);var l=this.getPosition(),c=r[0].offsetWidth,f=r[0].offsetHeight;if(u){var h=a,d=this.$element.parent(),p=this.getPosition(d);a="bottom"==a&&l.top+l.height+f-p.scroll>p.height?"top":"top"==a&&l.top-p.scroll-f<0?"bottom":"right"==a&&l.right+c>p.width?"left":"left"==a&&l.left-c<p.left?"right":a,r.removeClass(h).addClass(a)}var g=this.getCalculatedOffset(a,l,c,f);this.applyPlacement(g,a);var m=function(){i.$element.trigger("shown.bs."+i.type),i.hoverState=null};t.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",m).emulateTransitionEnd(150):m()}},n.prototype.applyPlacement=function(e,n){var i=this.tip(),r=i[0].offsetWidth,o=i[0].offsetHeight,a=parseInt(i.css("margin-top"),10),s=parseInt(i.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(s)&&(s=0),e.top=e.top+a,e.left=e.left+s,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var u=i[0].offsetWidth,l=i[0].offsetHeight;"top"==n&&l!=o&&(e.top=e.top+o-l);var c=this.getViewportAdjustedDelta(n,e,u,l);c.left?e.left+=c.left:e.top+=c.top;var f=c.left?2*c.left-r+u:2*c.top-o+l,h=c.left?"left":"top",d=c.left?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(f,i[0][d],h)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n,t?50*(1-t/e)+"%":"")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(){function e(){"in"!=n.hoverState&&i.detach(),n.$element.trigger("hidden.bs."+n.type)}var n=this,i=this.tip(),r=t.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(r),r.isDefaultPrevented()?void 0:(i.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",e).emulateTransitionEnd(150):e(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],i="BODY"==n.tagName;return t.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():null,{scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop(),width:i?t(window).width():e.outerWidth(),height:i?t(window).height():e.outerHeight()},i?{top:0,left:0}:e.offset())},n.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,i){var r={top:0,left:0};if(!this.$viewport)return r;var o=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-o-a.scroll,u=e.top+o-a.scroll+i;s<a.top?r.top=a.top-s:u>a.top+a.height&&(r.top=a.top+a.height-u)}else{var l=e.left-o,c=e.left+o+n;l<a.left?r.left=a.left-l:c>a.width&&(r.left=a.left+a.width-c)}return r},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){return this.$tip=this.$tip||t(this.options.template)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var i=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=i,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.popover"),o="object"==typeof e&&e;(r||"destroy"!=e)&&(r||i.data("bs.popover",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.2.0",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").empty()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip};var i=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=i,this}}(jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):window.jQuery||window.Zepto)}(function(t){var e,n,i,r,o,a,s,u="Close",l="BeforeClose",c="AfterClose",f="BeforeAppend",h="MarkupParse",d="Open",p="Change",g="mfp",m="."+g,v="mfp-ready",y="mfp-removing",b="mfp-prevent-close",w=function(){},x=!!window.jQuery,C=t(window),T=function(t,n){e.ev.on(g+t+m,n)},k=function(e,n,i,r){var o=document.createElement("div");return o.className="mfp-"+e,i&&(o.innerHTML=i),r?n&&n.appendChild(o):(o=t(o),n&&o.appendTo(n)),o},S=function(n,i){e.ev.triggerHandler(g+n,i),e.st.callbacks&&(n=n.charAt(0).toLowerCase()+n.slice(1),e.st.callbacks[n]&&e.st.callbacks[n].apply(e,t.isArray(i)?i:[i]))},E=function(n){return n===s&&e.currTemplate.closeBtn||(e.currTemplate.closeBtn=t(e.st.closeMarkup.replace("%title%",e.st.tClose)),s=n),e.currTemplate.closeBtn},A=function(){t.magnificPopup.instance||(e=new w,e.init(),t.magnificPopup.instance=e)},F=function(){var t=document.createElement("p").style,e=["ms","O","Moz","Webkit"];if(void 0!==t.transition)return!0;for(;e.length;)if(e.pop()+"Transition"in t)return!0;return!1};w.prototype={constructor:w,init:function(){var n=navigator.appVersion;e.isIE7=-1!==n.indexOf("MSIE 7."),e.isIE8=-1!==n.indexOf("MSIE 8."),e.isLowIE=e.isIE7||e.isIE8,e.isAndroid=/android/gi.test(n),e.isIOS=/iphone|ipad|ipod/gi.test(n),e.supportsTransition=F(),e.probablyMobile=e.isAndroid||e.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),r=t(document),e.popupsCache={}},open:function(n){i||(i=t(document.body));var o;if(n.isObj===!1){e.items=n.items.toArray(),e.index=0;var s,u=n.items;for(o=0;o<u.length;o++)if(s=u[o],s.parsed&&(s=s.el[0]),s===n.el[0]){e.index=o;break}}else e.items=t.isArray(n.items)?n.items:[n.items],e.index=n.index||0;if(e.isOpen)return void e.updateItemHTML();e.types=[],a="",n.mainEl&&n.mainEl.length?e.ev=n.mainEl.eq(0):e.ev=r,n.key?(e.popupsCache[n.key]||(e.popupsCache[n.key]={}),e.currTemplate=e.popupsCache[n.key]):e.currTemplate={},e.st=t.extend(!0,{},t.magnificPopup.defaults,n),e.fixedContentPos="auto"===e.st.fixedContentPos?!e.probablyMobile:e.st.fixedContentPos,e.st.modal&&(e.st.closeOnContentClick=!1,e.st.closeOnBgClick=!1,e.st.showCloseBtn=!1,e.st.enableEscapeKey=!1),e.bgOverlay||(e.bgOverlay=k("bg").on("click"+m,function(){e.close()}),e.wrap=k("wrap").attr("tabindex",-1).on("click"+m,function(t){e._checkIfClose(t.target)&&e.close()}),e.container=k("container",e.wrap)),e.contentContainer=k("content"),e.st.preloader&&(e.preloader=k("preloader",e.container,e.st.tLoading));var l=t.magnificPopup.modules;for(o=0;o<l.length;o++){var c=l[o];c=c.charAt(0).toUpperCase()+c.slice(1),e["init"+c].call(e)}S("BeforeOpen"),e.st.showCloseBtn&&(e.st.closeBtnInside?(T(h,function(t,e,n,i){n.close_replaceWith=E(i.type)}),a+=" mfp-close-btn-in"):e.wrap.append(E())),e.st.alignTop&&(a+=" mfp-align-top"),e.fixedContentPos?e.wrap.css({overflow:e.st.overflowY,overflowX:"hidden",overflowY:e.st.overflowY}):e.wrap.css({top:C.scrollTop(),position:"absolute"}),(e.st.fixedBgPos===!1||"auto"===e.st.fixedBgPos&&!e.fixedContentPos)&&e.bgOverlay.css({height:r.height(),position:"absolute"}),e.st.enableEscapeKey&&r.on("keyup"+m,function(t){27===t.keyCode&&e.close()}),C.on("resize"+m,function(){e.updateSize()}),e.st.closeOnContentClick||(a+=" mfp-auto-cursor"),a&&e.wrap.addClass(a);var f=e.wH=C.height(),p={};if(e.fixedContentPos&&e._hasScrollBar(f)){var g=e._getScrollbarSize();g&&(p.marginRight=g)}e.fixedContentPos&&(e.isIE7?t("body, html").css("overflow","hidden"):p.overflow="hidden");var y=e.st.mainClass;return e.isIE7&&(y+=" mfp-ie7"),y&&e._addClassToMFP(y),e.updateItemHTML(),S("BuildControls"),t("html").css(p),e.bgOverlay.add(e.wrap).prependTo(e.st.prependTo||i),e._lastFocusedEl=document.activeElement,setTimeout(function(){e.content?(e._addClassToMFP(v),e._setFocus()):e.bgOverlay.addClass(v),r.on("focusin"+m,e._onFocusIn)},16),e.isOpen=!0,e.updateSize(f),S(d),n},close:function(){e.isOpen&&(S(l),e.isOpen=!1,e.st.removalDelay&&!e.isLowIE&&e.supportsTransition?(e._addClassToMFP(y),setTimeout(function(){e._close()},e.st.removalDelay)):e._close())},_close:function(){S(u);var n=y+" "+v+" ";if(e.bgOverlay.detach(),e.wrap.detach(),e.container.empty(),e.st.mainClass&&(n+=e.st.mainClass+" "),e._removeClassFromMFP(n),e.fixedContentPos){var i={marginRight:""};e.isIE7?t("body, html").css("overflow",""):i.overflow="",t("html").css(i)}r.off("keyup"+m+" focusin"+m),e.ev.off(m),e.wrap.attr("class","mfp-wrap").removeAttr("style"),e.bgOverlay.attr("class","mfp-bg"),e.container.attr("class","mfp-container"),!e.st.showCloseBtn||e.st.closeBtnInside&&e.currTemplate[e.currItem.type]!==!0||e.currTemplate.closeBtn&&e.currTemplate.closeBtn.detach(),e._lastFocusedEl&&t(e._lastFocusedEl).focus(),e.currItem=null,e.content=null,e.currTemplate=null,e.prevHeight=0,S(c)},updateSize:function(t){if(e.isIOS){var n=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*n;e.wrap.css("height",i),e.wH=i}else e.wH=t||C.height();e.fixedContentPos||e.wrap.css("height",e.wH),S("Resize")},updateItemHTML:function(){var n=e.items[e.index];e.contentContainer.detach(),e.content&&e.content.detach(),n.parsed||(n=e.parseEl(e.index));var i=n.type;if(S("BeforeChange",[e.currItem?e.currItem.type:"",i]),e.currItem=n,!e.currTemplate[i]){var r=e.st[i]?e.st[i].markup:!1;S("FirstMarkupParse",r),r?e.currTemplate[i]=t(r):e.currTemplate[i]=!0}o&&o!==n.type&&e.container.removeClass("mfp-"+o+"-holder");var a=e["get"+i.charAt(0).toUpperCase()+i.slice(1)](n,e.currTemplate[i]);e.appendContent(a,i),n.preloaded=!0,S(p,n),o=n.type,e.container.prepend(e.contentContainer),S("AfterChange")},appendContent:function(t,n){e.content=t,t?e.st.showCloseBtn&&e.st.closeBtnInside&&e.currTemplate[n]===!0?e.content.find(".mfp-close").length||e.content.append(E()):e.content=t:e.content="",S(f),e.container.addClass("mfp-"+n+"-holder"),e.contentContainer.append(e.content)},parseEl:function(n){var i,r=e.items[n];if(r.tagName?r={el:t(r)}:(i=r.type,r={data:r,src:r.src}),r.el){for(var o=e.types,a=0;a<o.length;a++)if(r.el.hasClass("mfp-"+o[a])){i=o[a];break}r.src=r.el.attr("data-mfp-src"),r.src||(r.src=r.el.attr("href"))}return r.type=i||e.st.type||"inline",r.index=n,r.parsed=!0,e.items[n]=r,S("ElementParse",r),e.items[n]},addGroup:function(t,n){var i=function(i){i.mfpEl=this,e._openClick(i,t,n)};n||(n={});var r="click.magnificPopup";n.mainEl=t,n.items?(n.isObj=!0,t.off(r).on(r,i)):(n.isObj=!1,n.delegate?t.off(r).on(r,n.delegate,i):(n.items=t,t.off(r).on(r,i)))},_openClick:function(n,i,r){var o=void 0!==r.midClick?r.midClick:t.magnificPopup.defaults.midClick;if(o||2!==n.which&&!n.ctrlKey&&!n.metaKey){var a=void 0!==r.disableOn?r.disableOn:t.magnificPopup.defaults.disableOn;if(a)if(t.isFunction(a)){if(!a.call(e))return!0}else if(C.width()<a)return!0;n.type&&(n.preventDefault(),e.isOpen&&n.stopPropagation()),r.el=t(n.mfpEl),r.delegate&&(r.items=i.find(r.delegate)),e.open(r)}},updateStatus:function(t,i){if(e.preloader){n!==t&&e.container.removeClass("mfp-s-"+n),i||"loading"!==t||(i=e.st.tLoading);var r={status:t,text:i};S("UpdateStatus",r),t=r.status,i=r.text,e.preloader.html(i),e.preloader.find("a").on("click",function(t){t.stopImmediatePropagation()}),e.container.addClass("mfp-s-"+t),n=t}},_checkIfClose:function(n){if(!t(n).hasClass(b)){var i=e.st.closeOnContentClick,r=e.st.closeOnBgClick;if(i&&r)return!0;if(!e.content||t(n).hasClass("mfp-close")||e.preloader&&n===e.preloader[0])return!0;if(n===e.content[0]||t.contains(e.content[0],n)){if(i)return!0}else if(r&&t.contains(document,n))return!0;return!1}},_addClassToMFP:function(t){e.bgOverlay.addClass(t),e.wrap.addClass(t)},_removeClassFromMFP:function(t){this.bgOverlay.removeClass(t),e.wrap.removeClass(t)},_hasScrollBar:function(t){return(e.isIE7?r.height():document.body.scrollHeight)>(t||C.height())},_setFocus:function(){(e.st.focus?e.content.find(e.st.focus).eq(0):e.wrap).focus()},_onFocusIn:function(n){return n.target===e.wrap[0]||t.contains(e.wrap[0],n.target)?void 0:(e._setFocus(),!1)},_parseMarkup:function(e,n,i){var r;i.data&&(n=t.extend(i.data,n)),S(h,[e,n,i]),t.each(n,function(t,n){if(void 0===n||n===!1)return!0;if(r=t.split("_"),r.length>1){var i=e.find(m+"-"+r[0]);if(i.length>0){var o=r[1];"replaceWith"===o?i[0]!==n[0]&&i.replaceWith(n):"img"===o?i.is("img")?i.attr("src",n):i.replaceWith('<img src="'+n+'" class="'+i.attr("class")+'" />'):i.attr(r[1],n)}}else e.find(m+"-"+t).html(n)})},_getScrollbarSize:function(){if(void 0===e.scrollbarSize){var t=document.createElement("div");t.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(t),e.scrollbarSize=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return e.scrollbarSize}},t.magnificPopup={instance:null,proto:w.prototype,modules:[],open:function(e,n){return A(),e=e?t.extend(!0,{},e):{},e.isObj=!0,e.index=n||0,this.instance.open(e)},close:function(){return t.magnificPopup.instance&&t.magnificPopup.instance.close()},registerModule:function(e,n){n.options&&(t.magnificPopup.defaults[e]=n.options),t.extend(this.proto,n.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&times;</button>',tClose:"Close (Esc)",tLoading:"Loading..."}},t.fn.magnificPopup=function(n){A();var i=t(this);if("string"==typeof n)if("open"===n){var r,o=x?i.data("magnificPopup"):i[0].magnificPopup,a=parseInt(arguments[1],10)||0;o.items?r=o.items[a]:(r=i,o.delegate&&(r=r.find(o.delegate)),r=r.eq(a)),e._openClick({mfpEl:r},i,o)}else e.isOpen&&e[n].apply(e,Array.prototype.slice.call(arguments,1));else n=t.extend(!0,{},n),x?i.data("magnificPopup",n):i[0].magnificPopup=n,e.addGroup(i,n);return i};var P,N,j,O="inline",L=function(){j&&(N.after(j.addClass(P)).detach(),j=null)};t.magnificPopup.registerModule(O,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){e.types.push(O),T(u+"."+O,function(){L()})},getInline:function(n,i){if(L(),n.src){var r=e.st.inline,o=t(n.src);if(o.length){var a=o[0].parentNode;a&&a.tagName&&(N||(P=r.hiddenClass,N=k(P),P="mfp-"+P),j=o.after(N).detach().removeClass(P)),e.updateStatus("ready")}else e.updateStatus("error",r.tNotFound),o=t("<div>");return n.inlineElement=o,o}return e.updateStatus("ready"),e._parseMarkup(i,{},n),i}}});var D,M="ajax",I=function(){D&&i.removeClass(D)},R=function(){I(),e.req&&e.req.abort()};t.magnificPopup.registerModule(M,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){e.types.push(M),D=e.st.ajax.cursor,T(u+"."+M,R),T("BeforeChange."+M,R)},getAjax:function(n){D&&i.addClass(D),e.updateStatus("loading");var r=t.extend({url:n.src,success:function(i,r,o){var a={data:i,xhr:o};S("ParseAjax",a),e.appendContent(t(a.data),M),n.finished=!0,I(),e._setFocus(),setTimeout(function(){e.wrap.addClass(v)},16),e.updateStatus("ready"),S("AjaxContentAdded")},error:function(){I(),n.finished=n.loadError=!0,e.updateStatus("error",e.st.ajax.tError.replace("%url%",n.src))}},e.st.ajax.settings);return e.req=t.ajax(r),""}}});var $,q=function(n){if(n.data&&void 0!==n.data.title)return n.data.title;var i=e.st.image.titleSrc;if(i){if(t.isFunction(i))return i.call(e,n);if(n.el)return n.el.attr(i)||""}return""};t.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var t=e.st.image,n=".image";e.types.push("image"),T(d+n,function(){"image"===e.currItem.type&&t.cursor&&i.addClass(t.cursor)}),T(u+n,function(){t.cursor&&i.removeClass(t.cursor),C.off("resize"+m)}),T("Resize"+n,e.resizeImage),e.isLowIE&&T("AfterChange",e.resizeImage);
},resizeImage:function(){var t=e.currItem;if(t&&t.img&&e.st.image.verticalFit){var n=0;e.isLowIE&&(n=parseInt(t.img.css("padding-top"),10)+parseInt(t.img.css("padding-bottom"),10)),t.img.css("max-height",e.wH-n)}},_onImageHasSize:function(t){t.img&&(t.hasSize=!0,$&&clearInterval($),t.isCheckingImgSize=!1,S("ImageHasSize",t),t.imgHidden&&(e.content&&e.content.removeClass("mfp-loading"),t.imgHidden=!1))},findImageSize:function(t){var n=0,i=t.img[0],r=function(o){$&&clearInterval($),$=setInterval(function(){return i.naturalWidth>0?void e._onImageHasSize(t):(n>200&&clearInterval($),n++,void(3===n?r(10):40===n?r(50):100===n&&r(500)))},o)};r(1)},getImage:function(n,i){var r=0,o=function(){n&&(n.img[0].complete?(n.img.off(".mfploader"),n===e.currItem&&(e._onImageHasSize(n),e.updateStatus("ready")),n.hasSize=!0,n.loaded=!0,S("ImageLoadComplete")):(r++,200>r?setTimeout(o,100):a()))},a=function(){n&&(n.img.off(".mfploader"),n===e.currItem&&(e._onImageHasSize(n),e.updateStatus("error",s.tError.replace("%url%",n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},s=e.st.image,u=i.find(".mfp-img");if(u.length){var l=document.createElement("img");l.className="mfp-img",n.el&&n.el.find("img").length&&(l.alt=n.el.find("img").attr("alt")),n.img=t(l).on("load.mfploader",o).on("error.mfploader",a),l.src=n.src,u.is("img")&&(n.img=n.img.clone()),l=n.img[0],l.naturalWidth>0?n.hasSize=!0:l.width||(n.hasSize=!1)}return e._parseMarkup(i,{title:q(n),img_replaceWith:n.img},n),e.resizeImage(),n.hasSize?($&&clearInterval($),n.loadError?(i.addClass("mfp-loading"),e.updateStatus("error",s.tError.replace("%url%",n.src))):(i.removeClass("mfp-loading"),e.updateStatus("ready")),i):(e.updateStatus("loading"),n.loading=!0,n.hasSize||(n.imgHidden=!0,i.addClass("mfp-loading"),e.findImageSize(n)),i)}}});var H,U=function(){return void 0===H&&(H=void 0!==document.createElement("p").style.MozTransform),H};t.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(t){return t.is("img")?t:t.find("img")}},proto:{initZoom:function(){var t,n=e.st.zoom,i=".zoom";if(n.enabled&&e.supportsTransition){var r,o,a=n.duration,s=function(t){var e=t.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+n.duration/1e3+"s "+n.easing,r={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return r["-webkit-"+o]=r["-moz-"+o]=r["-o-"+o]=r[o]=i,e.css(r),e},c=function(){e.content.css("visibility","visible")};T("BuildControls"+i,function(){if(e._allowZoom()){if(clearTimeout(r),e.content.css("visibility","hidden"),t=e._getItemToZoom(),!t)return void c();o=s(t),o.css(e._getOffset()),e.wrap.append(o),r=setTimeout(function(){o.css(e._getOffset(!0)),r=setTimeout(function(){c(),setTimeout(function(){o.remove(),t=o=null,S("ZoomAnimationEnded")},16)},a)},16)}}),T(l+i,function(){if(e._allowZoom()){if(clearTimeout(r),e.st.removalDelay=a,!t){if(t=e._getItemToZoom(),!t)return;o=s(t)}o.css(e._getOffset(!0)),e.wrap.append(o),e.content.css("visibility","hidden"),setTimeout(function(){o.css(e._getOffset())},16)}}),T(u+i,function(){e._allowZoom()&&(c(),o&&o.remove(),t=null)})}},_allowZoom:function(){return"image"===e.currItem.type},_getItemToZoom:function(){return e.currItem.hasSize?e.currItem.img:!1},_getOffset:function(n){var i;i=n?e.currItem.img:e.st.zoom.opener(e.currItem.el||e.currItem);var r=i.offset(),o=parseInt(i.css("padding-top"),10),a=parseInt(i.css("padding-bottom"),10);r.top-=t(window).scrollTop()-o;var s={width:i.width(),height:(x?i.innerHeight():i[0].offsetHeight)-a-o};return U()?s["-moz-transform"]=s.transform="translate("+r.left+"px,"+r.top+"px)":(s.left=r.left,s.top=r.top),s}}});var _="iframe",W="//about:blank",V=function(t){if(e.currTemplate[_]){var n=e.currTemplate[_].find("iframe");n.length&&(t||(n[0].src=W),e.isIE8&&n.css("display",t?"block":"none"))}};t.magnificPopup.registerModule(_,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){e.types.push(_),T("BeforeChange",function(t,e,n){e!==n&&(e===_?V():n===_&&V(!0))}),T(u+"."+_,function(){V()})},getIframe:function(n,i){var r=n.src,o=e.st.iframe;t.each(o.patterns,function(){return r.indexOf(this.index)>-1?(this.id&&(r="string"==typeof this.id?r.substr(r.lastIndexOf(this.id)+this.id.length,r.length):this.id.call(this,r)),r=this.src.replace("%id%",r),!1):void 0});var a={};return o.srcAction&&(a[o.srcAction]=r),e._parseMarkup(i,a,n),e.updateStatus("ready"),i}}});var B=function(t){var n=e.items.length;return t>n-1?t-n:0>t?n+t:t},Q=function(t,e,n){return t.replace(/%curr%/gi,e+1).replace(/%total%/gi,n)};t.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var n=e.st.gallery,i=".mfp-gallery",o=Boolean(t.fn.mfpFastClick);return e.direction=!0,n&&n.enabled?(a+=" mfp-gallery",T(d+i,function(){n.navigateByImgClick&&e.wrap.on("click"+i,".mfp-img",function(){return e.items.length>1?(e.next(),!1):void 0}),r.on("keydown"+i,function(t){37===t.keyCode?e.prev():39===t.keyCode&&e.next()})}),T("UpdateStatus"+i,function(t,n){n.text&&(n.text=Q(n.text,e.currItem.index,e.items.length))}),T(h+i,function(t,i,r,o){var a=e.items.length;r.counter=a>1?Q(n.tCounter,o.index,a):""}),T("BuildControls"+i,function(){if(e.items.length>1&&n.arrows&&!e.arrowLeft){var i=n.arrowMarkup,r=e.arrowLeft=t(i.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,"left")).addClass(b),a=e.arrowRight=t(i.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,"right")).addClass(b),s=o?"mfpFastClick":"click";r[s](function(){e.prev()}),a[s](function(){e.next()}),e.isIE7&&(k("b",r[0],!1,!0),k("a",r[0],!1,!0),k("b",a[0],!1,!0),k("a",a[0],!1,!0)),e.container.append(r.add(a))}}),T(p+i,function(){e._preloadTimeout&&clearTimeout(e._preloadTimeout),e._preloadTimeout=setTimeout(function(){e.preloadNearbyImages(),e._preloadTimeout=null},16)}),void T(u+i,function(){r.off(i),e.wrap.off("click"+i),e.arrowLeft&&o&&e.arrowLeft.add(e.arrowRight).destroyMfpFastClick(),e.arrowRight=e.arrowLeft=null})):!1},next:function(){e.direction=!0,e.index=B(e.index+1),e.updateItemHTML()},prev:function(){e.direction=!1,e.index=B(e.index-1),e.updateItemHTML()},goTo:function(t){e.direction=t>=e.index,e.index=t,e.updateItemHTML()},preloadNearbyImages:function(){var t,n=e.st.gallery.preload,i=Math.min(n[0],e.items.length),r=Math.min(n[1],e.items.length);for(t=1;t<=(e.direction?r:i);t++)e._preloadItem(e.index+t);for(t=1;t<=(e.direction?i:r);t++)e._preloadItem(e.index-t)},_preloadItem:function(n){if(n=B(n),!e.items[n].preloaded){var i=e.items[n];i.parsed||(i=e.parseEl(n)),S("LazyLoad",i),"image"===i.type&&(i.img=t('<img class="mfp-img" />').on("load.mfploader",function(){i.hasSize=!0}).on("error.mfploader",function(){i.hasSize=!0,i.loadError=!0,S("LazyLoadError",i)}).attr("src",i.src)),i.preloaded=!0}}}});var K="retina";t.magnificPopup.registerModule(K,{options:{replaceSrc:function(t){return t.src.replace(/\.\w+$/,function(t){return"@2x"+t})},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var t=e.st.retina,n=t.ratio;n=isNaN(n)?n():n,n>1&&(T("ImageHasSize."+K,function(t,e){e.img.css({"max-width":e.img[0].naturalWidth/n,width:"100%"})}),T("ElementParse."+K,function(e,i){i.src=t.replaceSrc(i,n)}))}}}}),function(){var e=1e3,n="ontouchstart"in window,i=function(){C.off("touchmove"+o+" touchend"+o)},r="mfpFastClick",o="."+r;t.fn.mfpFastClick=function(r){return t(this).each(function(){var a,s=t(this);if(n){var u,l,c,f,h,d;s.on("touchstart"+o,function(t){f=!1,d=1,h=t.originalEvent?t.originalEvent.touches[0]:t.touches[0],l=h.clientX,c=h.clientY,C.on("touchmove"+o,function(t){h=t.originalEvent?t.originalEvent.touches:t.touches,d=h.length,h=h[0],(Math.abs(h.clientX-l)>10||Math.abs(h.clientY-c)>10)&&(f=!0,i())}).on("touchend"+o,function(t){i(),f||d>1||(a=!0,t.preventDefault(),clearTimeout(u),u=setTimeout(function(){a=!1},e),r())})})}s.on("click"+o,function(){a||r()})})},t.fn.destroyMfpFastClick=function(){t(this).off("touchstart"+o+" click"+o),n&&C.off("touchmove"+o+" touchend"+o)}}(),A()}),function(t){function e(t){var e=t.length,i=n.type(t);return"function"===i||n.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t}if(!t.jQuery){var n=function(t,e){return new n.fn.init(t,e)};n.isWindow=function(t){return null!=t&&t==t.window},n.type=function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?r[a.call(t)]||"object":typeof t},n.isArray=Array.isArray||function(t){return"array"===n.type(t)},n.isPlainObject=function(t){var e;if(!t||"object"!==n.type(t)||t.nodeType||n.isWindow(t))return!1;try{if(t.constructor&&!o.call(t,"constructor")&&!o.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(i){return!1}for(e in t);return void 0===e||o.call(t,e)},n.each=function(t,n,i){var r,o=0,a=t.length,s=e(t);if(i){if(s)for(;a>o&&(r=n.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=n.apply(t[o],i),r===!1)break}else if(s)for(;a>o&&(r=n.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=n.call(t[o],o,t[o]),r===!1)break;return t},n.data=function(t,e,r){if(void 0===r){var o=t[n.expando],a=o&&i[o];if(void 0===e)return a;if(a&&e in a)return a[e]}else if(void 0!==e){var o=t[n.expando]||(t[n.expando]=++n.uuid);return i[o]=i[o]||{},i[o][e]=r,r}},n.removeData=function(t,e){var r=t[n.expando],o=r&&i[r];o&&n.each(e,function(t,e){delete o[e]})},n.extend=function(){var t,e,i,r,o,a,s=arguments[0]||{},u=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[u]||{},u++),"object"!=typeof s&&"function"!==n.type(s)&&(s={}),u===l&&(s=this,u--);l>u;u++)if(null!=(o=arguments[u]))for(r in o)t=s[r],i=o[r],s!==i&&(c&&i&&(n.isPlainObject(i)||(e=n.isArray(i)))?(e?(e=!1,a=t&&n.isArray(t)?t:[]):a=t&&n.isPlainObject(t)?t:{},s[r]=n.extend(c,a,i)):void 0!==i&&(s[r]=i));return s},n.queue=function(t,i,r){function o(t,n){var i=n||[];return null!=t&&(e(Object(t))?!function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;)t[r++]=e[i++];if(n!==n)for(;void 0!==e[i];)t[r++]=e[i++];return t.length=r,t}(i,"string"==typeof t?[t]:t):[].push.call(i,t)),i}if(t){i=(i||"fx")+"queue";var a=n.data(t,i);return r?(!a||n.isArray(r)?a=n.data(t,i,o(r)):a.push(r),a):a||[]}},n.dequeue=function(t,e){n.each(t.nodeType?[t]:t,function(t,i){e=e||"fx";var r=n.queue(i,e),o=r.shift();"inprogress"===o&&(o=r.shift()),o&&("fx"===e&&r.unshift("inprogress"),o.call(i,function(){n.dequeue(i,e)}))})},n.fn=n.prototype={init:function(t){if(t.nodeType)return this[0]=t,this;throw new Error("Not a DOM node.")},offset:function(){var e=this[0].getBoundingClientRect?this[0].getBoundingClientRect():{top:0,left:0};return{top:e.top+(t.pageYOffset||document.scrollTop||0)-(document.clientTop||0),left:e.left+(t.pageXOffset||document.scrollLeft||0)-(document.clientLeft||0)}},position:function(){function t(){for(var t=this.offsetParent||document;t&&"html"===!t.nodeType.toLowerCase&&"static"===t.style.position;)t=t.offsetParent;return t||document}var e=this[0],t=t.apply(e),i=this.offset(),r=/^(?:body|html)$/i.test(t.nodeName)?{top:0,left:0}:n(t).offset();return i.top-=parseFloat(e.style.marginTop)||0,i.left-=parseFloat(e.style.marginLeft)||0,t.style&&(r.top+=parseFloat(t.style.borderTopWidth)||0,r.left+=parseFloat(t.style.borderLeftWidth)||0),{top:i.top-r.top,left:i.left-r.left}}};var i={};n.expando="velocity"+(new Date).getTime(),n.uuid=0;for(var r={},o=r.hasOwnProperty,a=r.toString,s="Boolean Number String Function Array Date RegExp Object Error".split(" "),u=0;u<s.length;u++)r["[object "+s[u]+"]"]=s[u].toLowerCase();n.fn.init.prototype=n.fn,t.Velocity={Utilities:n}}}(window),function(t){"object"==typeof module&&"object"==typeof module.exports?module.exports=t():"function"==typeof define&&define.amd?define(t):t()}(function(){return function(t,e,n,i){function r(t){for(var e=-1,n=t?t.length:0,i=[];++e<n;){var r=t[e];r&&i.push(r)}return i}function o(t){return g.isWrapped(t)?t=[].slice.call(t):g.isNode(t)&&(t=[t]),t}function a(t){var e=h.data(t,"velocity");return null===e?i:e}function s(t){return function(e){return Math.round(e*t)*(1/t)}}function u(t,n,i,r){function o(t,e){return 1-3*e+3*t}function a(t,e){return 3*e-6*t}function s(t){return 3*t}function u(t,e,n){return((o(e,n)*t+a(e,n))*t+s(e))*t}function l(t,e,n){return 3*o(e,n)*t*t+2*a(e,n)*t+s(e)}function c(e,n){for(var r=0;g>r;++r){var o=l(n,t,i);if(0===o)return n;var a=u(n,t,i)-e;n-=a/o}return n}function f(){for(var e=0;b>e;++e)T[e]=u(e*w,t,i)}function h(e,n,r){var o,a,s=0;do a=n+(r-n)/2,o=u(a,t,i)-e,o>0?r=a:n=a;while(Math.abs(o)>v&&++s<y);return a}function d(e){for(var n=0,r=1,o=b-1;r!=o&&T[r]<=e;++r)n+=w;--r;var a=(e-T[r])/(T[r+1]-T[r]),s=n+a*w,u=l(s,t,i);return u>=m?c(e,s):0==u?s:h(e,n,n+w)}function p(){k=!0,(t!=n||i!=r)&&f()}var g=4,m=.001,v=1e-7,y=10,b=11,w=1/(b-1),x="Float32Array"in e;if(4!==arguments.length)return!1;for(var C=0;4>C;++C)if("number"!=typeof arguments[C]||isNaN(arguments[C])||!isFinite(arguments[C]))return!1;t=Math.min(t,1),i=Math.min(i,1),t=Math.max(t,0),i=Math.max(i,0);var T=x?new Float32Array(b):new Array(b),k=!1,S=function(e){return k||p(),t===n&&i===r?e:0===e?0:1===e?1:u(d(e),n,r)};S.getControlPoints=function(){return[{x:t,y:n},{x:i,y:r}]};var E="generateBezier("+[t,n,i,r]+")";return S.toString=function(){return E},S}function l(t,e){var n=t;return g.isString(t)?b.Easings[t]||(n=!1):n=g.isArray(t)&&1===t.length?s.apply(null,t):g.isArray(t)&&2===t.length?w.apply(null,t.concat([e])):g.isArray(t)&&4===t.length?u.apply(null,t):!1,n===!1&&(n=b.Easings[b.defaults.easing]?b.defaults.easing:y),n}function c(t){if(t){var e=(new Date).getTime(),n=b.State.calls.length;n>1e4&&(b.State.calls=r(b.State.calls));for(var o=0;n>o;o++)if(b.State.calls[o]){var s=b.State.calls[o],u=s[0],l=s[2],d=s[3],p=!!d,m=null;d||(d=b.State.calls[o][3]=e-16);for(var v=Math.min((e-d)/l.duration,1),y=0,w=u.length;w>y;y++){var C=u[y],k=C.element;if(a(k)){var S=!1;if(l.display!==i&&null!==l.display&&"none"!==l.display){if("flex"===l.display){var E=["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex"];h.each(E,function(t,e){x.setPropertyValue(k,"display",e)})}x.setPropertyValue(k,"display",l.display)}l.visibility!==i&&"hidden"!==l.visibility&&x.setPropertyValue(k,"visibility",l.visibility);for(var A in C)if("element"!==A){var F,P=C[A],N=g.isString(P.easing)?b.Easings[P.easing]:P.easing;if(1===v)F=P.endValue;else{var j=P.endValue-P.startValue;if(F=P.startValue+j*N(v,l,j),!p&&F===P.currentValue)continue}if(P.currentValue=F,"tween"===A)m=F;else{if(x.Hooks.registered[A]){var O=x.Hooks.getRoot(A),L=a(k).rootPropertyValueCache[O];L&&(P.rootPropertyValue=L)}var D=x.setPropertyValue(k,A,P.currentValue+(0===parseFloat(F)?"":P.unitType),P.rootPropertyValue,P.scrollData);x.Hooks.registered[A]&&(x.Normalizations.registered[O]?a(k).rootPropertyValueCache[O]=x.Normalizations.registered[O]("extract",null,D[1]):a(k).rootPropertyValueCache[O]=D[1]),"transform"===D[0]&&(S=!0)}}l.mobileHA&&a(k).transformCache.translate3d===i&&(a(k).transformCache.translate3d="(0px, 0px, 0px)",S=!0),S&&x.flushTransformCache(k)}}l.display!==i&&"none"!==l.display&&(b.State.calls[o][2].display=!1),l.visibility!==i&&"hidden"!==l.visibility&&(b.State.calls[o][2].visibility=!1),l.progress&&l.progress.call(s[1],s[1],v,Math.max(0,d+l.duration-e),d,m),1===v&&f(o)}}b.State.isTicking&&T(c)}function f(t,e){if(!b.State.calls[t])return!1;for(var n=b.State.calls[t][0],r=b.State.calls[t][1],o=b.State.calls[t][2],s=b.State.calls[t][4],u=!1,l=0,c=n.length;c>l;l++){var f=n[l].element;if(e||o.loop||("none"===o.display&&x.setPropertyValue(f,"display",o.display),"hidden"===o.visibility&&x.setPropertyValue(f,"visibility",o.visibility)),o.loop!==!0&&(h.queue(f)[1]===i||!/\.velocityQueueEntryFlag/i.test(h.queue(f)[1]))&&a(f)){a(f).isAnimating=!1,a(f).rootPropertyValueCache={};var d=!1;h.each(x.Lists.transforms3D,function(t,e){var n=/^scale/.test(e)?1:0,r=a(f).transformCache[e];a(f).transformCache[e]!==i&&new RegExp("^\\("+n+"[^.]").test(r)&&(d=!0,delete a(f).transformCache[e])}),o.mobileHA&&(d=!0,delete a(f).transformCache.translate3d),d&&x.flushTransformCache(f),x.Values.removeClass(f,"velocity-animating")}if(!e&&o.complete&&!o.loop&&l===c-1)try{o.complete.call(r,r)}catch(p){setTimeout(function(){throw p},1)}s&&o.loop!==!0&&s(r),a(f)&&o.loop===!0&&!e&&(h.each(a(f).tweensContainer,function(t,e){/^rotate/.test(t)&&360===parseFloat(e.endValue)&&(e.endValue=0,e.startValue=360),/^backgroundPosition/.test(t)&&100===parseFloat(e.endValue)&&"%"===e.unitType&&(e.endValue=0,e.startValue=100)}),b(f,"reverse",{loop:!0,delay:o.delay})),o.queue!==!1&&h.dequeue(f,o.queue)}b.State.calls[t]=!1;for(var g=0,m=b.State.calls.length;m>g;g++)if(b.State.calls[g]!==!1){u=!0;break}u===!1&&(b.State.isTicking=!1,delete b.State.calls,b.State.calls=[])}var h,d=function(){if(n.documentMode)return n.documentMode;for(var t=7;t>4;t--){var e=n.createElement("div");if(e.innerHTML="<!--[if IE "+t+"]><span></span><![endif]-->",e.getElementsByTagName("span").length)return e=null,t}return i}(),p=function(){var t=0;return e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||function(e){var n,i=(new Date).getTime();return n=Math.max(0,16-(i-t)),t=i+n,setTimeout(function(){e(i+n)},n)}}(),g={isString:function(t){return"string"==typeof t},isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},isFunction:function(t){return"[object Function]"===Object.prototype.toString.call(t)},isNode:function(t){return t&&t.nodeType},isNodeList:function(t){return"object"==typeof t&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(t))&&t.length!==i&&(0===t.length||"object"==typeof t[0]&&t[0].nodeType>0)},isWrapped:function(t){return t&&(t.jquery||e.Zepto&&e.Zepto.zepto.isZ(t))},isSVG:function(t){return e.SVGElement&&t instanceof e.SVGElement},isEmptyObject:function(t){for(var e in t)return!1;return!0}},m=!1;if(t.fn&&t.fn.jquery?(h=t,m=!0):h=e.Velocity.Utilities,8>=d&&!m)throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");if(7>=d)return void(jQuery.fn.velocity=jQuery.fn.animate);var v=400,y="swing",b={State:{isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isAndroid:/Android/i.test(navigator.userAgent),isGingerbread:/Android 2\.3\.[3-7]/i.test(navigator.userAgent),isChrome:e.chrome,isFirefox:/Firefox/i.test(navigator.userAgent),prefixElement:n.createElement("div"),prefixMatches:{},scrollAnchor:null,scrollPropertyLeft:null,scrollPropertyTop:null,isTicking:!1,calls:[]},CSS:{},Utilities:h,Redirects:{},Easings:{},Promise:e.Promise,defaults:{queue:"",duration:v,easing:y,begin:i,complete:i,progress:i,display:i,visibility:i,loop:!1,delay:!1,mobileHA:!0,_cacheValues:!0},init:function(t){h.data(t,"velocity",{isSVG:g.isSVG(t),isAnimating:!1,computedStyle:null,tweensContainer:null,rootPropertyValueCache:{},transformCache:{}})},hook:null,mock:!1,version:{major:1,minor:2,patch:2},debug:!1};e.pageYOffset!==i?(b.State.scrollAnchor=e,b.State.scrollPropertyLeft="pageXOffset",b.State.scrollPropertyTop="pageYOffset"):(b.State.scrollAnchor=n.documentElement||n.body.parentNode||n.body,b.State.scrollPropertyLeft="scrollLeft",b.State.scrollPropertyTop="scrollTop");var w=function(){function t(t){return-t.tension*t.x-t.friction*t.v}function e(e,n,i){var r={x:e.x+i.dx*n,v:e.v+i.dv*n,tension:e.tension,friction:e.friction};return{dx:r.v,dv:t(r)}}function n(n,i){var r={dx:n.v,dv:t(n)},o=e(n,.5*i,r),a=e(n,.5*i,o),s=e(n,i,a),u=1/6*(r.dx+2*(o.dx+a.dx)+s.dx),l=1/6*(r.dv+2*(o.dv+a.dv)+s.dv);return n.x=n.x+u*i,n.v=n.v+l*i,n}return function i(t,e,r){var o,a,s,u={x:-1,v:0,tension:null,friction:null},l=[0],c=0,f=1e-4,h=.016;for(t=parseFloat(t)||500,e=parseFloat(e)||20,r=r||null,u.tension=t,u.friction=e,o=null!==r,o?(c=i(t,e),a=c/r*h):a=h;;)if(s=n(s||u,a),l.push(1+s.x),c+=16,!(Math.abs(s.x)>f&&Math.abs(s.v)>f))break;return o?function(t){return l[t*(l.length-1)|0]}:c}}();b.Easings={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},spring:function(t){return 1-Math.cos(4.5*t*Math.PI)*Math.exp(6*-t)}},h.each([["ease",[.25,.1,.25,1]],["ease-in",[.42,0,1,1]],["ease-out",[0,0,.58,1]],["ease-in-out",[.42,0,.58,1]],["easeInSine",[.47,0,.745,.715]],["easeOutSine",[.39,.575,.565,1]],["easeInOutSine",[.445,.05,.55,.95]],["easeInQuad",[.55,.085,.68,.53]],["easeOutQuad",[.25,.46,.45,.94]],["easeInOutQuad",[.455,.03,.515,.955]],["easeInCubic",[.55,.055,.675,.19]],["easeOutCubic",[.215,.61,.355,1]],["easeInOutCubic",[.645,.045,.355,1]],["easeInQuart",[.895,.03,.685,.22]],["easeOutQuart",[.165,.84,.44,1]],["easeInOutQuart",[.77,0,.175,1]],["easeInQuint",[.755,.05,.855,.06]],["easeOutQuint",[.23,1,.32,1]],["easeInOutQuint",[.86,0,.07,1]],["easeInExpo",[.95,.05,.795,.035]],["easeOutExpo",[.19,1,.22,1]],["easeInOutExpo",[1,0,0,1]],["easeInCirc",[.6,.04,.98,.335]],["easeOutCirc",[.075,.82,.165,1]],["easeInOutCirc",[.785,.135,.15,.86]]],function(t,e){b.Easings[e[0]]=u.apply(null,e[1])});var x=b.CSS={RegEx:{isHex:/^#([A-f\d]{3}){1,2}$/i,valueUnwrap:/^[A-z]+\((.*)\)$/i,wrappedValueAlreadyExtracted:/[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,valueSplit:/([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi},Lists:{colors:["fill","stroke","stopColor","color","backgroundColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor"],transformsBase:["translateX","translateY","scale","scaleX","scaleY","skewX","skewY","rotateZ"],transforms3D:["transformPerspective","translateZ","scaleZ","rotateX","rotateY"]},Hooks:{templates:{textShadow:["Color X Y Blur","black 0px 0px 0px"],boxShadow:["Color X Y Blur Spread","black 0px 0px 0px 0px"],clip:["Top Right Bottom Left","0px 0px 0px 0px"],backgroundPosition:["X Y","0% 0%"],transformOrigin:["X Y Z","50% 50% 0px"],perspectiveOrigin:["X Y","50% 50%"]},registered:{},register:function(){for(var t=0;t<x.Lists.colors.length;t++){var e="color"===x.Lists.colors[t]?"0 0 0 1":"255 255 255 1";x.Hooks.templates[x.Lists.colors[t]]=["Red Green Blue Alpha",e]}var n,i,r;if(d)for(n in x.Hooks.templates){i=x.Hooks.templates[n],r=i[0].split(" ");var o=i[1].match(x.RegEx.valueSplit);"Color"===r[0]&&(r.push(r.shift()),o.push(o.shift()),x.Hooks.templates[n]=[r.join(" "),o.join(" ")])}for(n in x.Hooks.templates){i=x.Hooks.templates[n],r=i[0].split(" ");for(var t in r){var a=n+r[t],s=t;x.Hooks.registered[a]=[n,s]}}},getRoot:function(t){var e=x.Hooks.registered[t];return e?e[0]:t},cleanRootPropertyValue:function(t,e){return x.RegEx.valueUnwrap.test(e)&&(e=e.match(x.RegEx.valueUnwrap)[1]),x.Values.isCSSNullValue(e)&&(e=x.Hooks.templates[t][1]),e},extractValue:function(t,e){var n=x.Hooks.registered[t];if(n){var i=n[0],r=n[1];return e=x.Hooks.cleanRootPropertyValue(i,e),e.toString().match(x.RegEx.valueSplit)[r]}return e},injectValue:function(t,e,n){var i=x.Hooks.registered[t];if(i){var r,o,a=i[0],s=i[1];return n=x.Hooks.cleanRootPropertyValue(a,n),r=n.toString().match(x.RegEx.valueSplit),r[s]=e,o=r.join(" ")}return n}},Normalizations:{registered:{clip:function(t,e,n){switch(t){case"name":return"clip";case"extract":var i;return x.RegEx.wrappedValueAlreadyExtracted.test(n)?i=n:(i=n.toString().match(x.RegEx.valueUnwrap),i=i?i[1].replace(/,(\s+)?/g," "):n),i;case"inject":return"rect("+n+")"}},blur:function(t,e,n){switch(t){case"name":return b.State.isFirefox?"filter":"-webkit-filter";case"extract":var i=parseFloat(n);if(!i&&0!==i){var r=n.toString().match(/blur\(([0-9]+[A-z]+)\)/i);i=r?r[1]:0}return i;case"inject":return parseFloat(n)?"blur("+n+")":"none"}},opacity:function(t,e,n){if(8>=d)switch(t){case"name":return"filter";case"extract":var i=n.toString().match(/alpha\(opacity=(.*)\)/i);return n=i?i[1]/100:1;case"inject":return e.style.zoom=1,parseFloat(n)>=1?"":"alpha(opacity="+parseInt(100*parseFloat(n),10)+")"}else switch(t){case"name":return"opacity";case"extract":return n;case"inject":return n}}},register:function(){9>=d||b.State.isGingerbread||(x.Lists.transformsBase=x.Lists.transformsBase.concat(x.Lists.transforms3D));for(var t=0;t<x.Lists.transformsBase.length;t++)!function(){var e=x.Lists.transformsBase[t];x.Normalizations.registered[e]=function(t,n,r){switch(t){case"name":return"transform";case"extract":return a(n)===i||a(n).transformCache[e]===i?/^scale/i.test(e)?1:0:a(n).transformCache[e].replace(/[()]/g,"");case"inject":var o=!1;switch(e.substr(0,e.length-1)){case"translate":o=!/(%|px|em|rem|vw|vh|\d)$/i.test(r);break;case"scal":case"scale":b.State.isAndroid&&a(n).transformCache[e]===i&&1>r&&(r=1),o=!/(\d)$/i.test(r);break;case"skew":o=!/(deg|\d)$/i.test(r);break;case"rotate":o=!/(deg|\d)$/i.test(r)}return o||(a(n).transformCache[e]="("+r+")"),a(n).transformCache[e]}}}();for(var t=0;t<x.Lists.colors.length;t++)!function(){var e=x.Lists.colors[t];x.Normalizations.registered[e]=function(t,n,r){switch(t){case"name":return e;case"extract":var o;if(x.RegEx.wrappedValueAlreadyExtracted.test(r))o=r;else{var a,s={black:"rgb(0, 0, 0)",blue:"rgb(0, 0, 255)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",red:"rgb(255, 0, 0)",white:"rgb(255, 255, 255)"};/^[A-z]+$/i.test(r)?a=s[r]!==i?s[r]:s.black:x.RegEx.isHex.test(r)?a="rgb("+x.Values.hexToRgb(r).join(" ")+")":/^rgba?\(/i.test(r)||(a=s.black),o=(a||r).toString().match(x.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g," ")}return 8>=d||3!==o.split(" ").length||(o+=" 1"),o;case"inject":return 8>=d?4===r.split(" ").length&&(r=r.split(/\s+/).slice(0,3).join(" ")):3===r.split(" ").length&&(r+=" 1"),(8>=d?"rgb":"rgba")+"("+r.replace(/\s+/g,",").replace(/\.(\d)+(?=,)/g,"")+")"}}}()}},Names:{camelCase:function(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})},SVGAttribute:function(t){var e="width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";return(d||b.State.isAndroid&&!b.State.isChrome)&&(e+="|transform"),new RegExp("^("+e+")$","i").test(t)},prefixCheck:function(t){if(b.State.prefixMatches[t])return[b.State.prefixMatches[t],!0];for(var e=["","Webkit","Moz","ms","O"],n=0,i=e.length;i>n;n++){var r;if(r=0===n?t:e[n]+t.replace(/^\w/,function(t){return t.toUpperCase()}),g.isString(b.State.prefixElement.style[r]))return b.State.prefixMatches[t]=r,[r,!0]}return[t,!1]}},Values:{hexToRgb:function(t){var e,n=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,i=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;return t=t.replace(n,function(t,e,n,i){return e+e+n+n+i+i}),e=i.exec(t),e?[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]:[0,0,0]},isCSSNullValue:function(t){return 0==t||/^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(t)},getUnitType:function(t){return/^(rotate|skew)/i.test(t)?"deg":/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(t)?"":"px"},getDisplayType:function(t){var e=t&&t.tagName.toString().toLowerCase();return/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(e)?"inline":/^(li)$/i.test(e)?"list-item":/^(tr)$/i.test(e)?"table-row":/^(table)$/i.test(e)?"table":/^(tbody)$/i.test(e)?"table-row-group":"block"},addClass:function(t,e){t.classList?t.classList.add(e):t.className+=(t.className.length?" ":"")+e},removeClass:function(t,e){t.classList?t.classList.remove(e):t.className=t.className.toString().replace(new RegExp("(^|\\s)"+e.split(" ").join("|")+"(\\s|$)","gi")," ")}},getPropertyValue:function(t,n,r,o){function s(t,n){function r(){l&&x.setPropertyValue(t,"display","none")}var u=0;if(8>=d)u=h.css(t,n);else{var l=!1;if(/^(width|height)$/.test(n)&&0===x.getPropertyValue(t,"display")&&(l=!0,x.setPropertyValue(t,"display",x.Values.getDisplayType(t))),!o){if("height"===n&&"border-box"!==x.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var c=t.offsetHeight-(parseFloat(x.getPropertyValue(t,"borderTopWidth"))||0)-(parseFloat(x.getPropertyValue(t,"borderBottomWidth"))||0)-(parseFloat(x.getPropertyValue(t,"paddingTop"))||0)-(parseFloat(x.getPropertyValue(t,"paddingBottom"))||0);return r(),c}if("width"===n&&"border-box"!==x.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var f=t.offsetWidth-(parseFloat(x.getPropertyValue(t,"borderLeftWidth"))||0)-(parseFloat(x.getPropertyValue(t,"borderRightWidth"))||0)-(parseFloat(x.getPropertyValue(t,"paddingLeft"))||0)-(parseFloat(x.getPropertyValue(t,"paddingRight"))||0);return r(),f}}var p;p=a(t)===i?e.getComputedStyle(t,null):a(t).computedStyle?a(t).computedStyle:a(t).computedStyle=e.getComputedStyle(t,null),"borderColor"===n&&(n="borderTopColor"),u=9===d&&"filter"===n?p.getPropertyValue(n):p[n],(""===u||null===u)&&(u=t.style[n]),r()}if("auto"===u&&/^(top|right|bottom|left)$/i.test(n)){var g=s(t,"position");("fixed"===g||"absolute"===g&&/top|left/i.test(n))&&(u=h(t).position()[n]+"px")}return u}var u;if(x.Hooks.registered[n]){var l=n,c=x.Hooks.getRoot(l);r===i&&(r=x.getPropertyValue(t,x.Names.prefixCheck(c)[0])),x.Normalizations.registered[c]&&(r=x.Normalizations.registered[c]("extract",t,r)),u=x.Hooks.extractValue(l,r)}else if(x.Normalizations.registered[n]){var f,p;f=x.Normalizations.registered[n]("name",t),"transform"!==f&&(p=s(t,x.Names.prefixCheck(f)[0]),x.Values.isCSSNullValue(p)&&x.Hooks.templates[n]&&(p=x.Hooks.templates[n][1])),u=x.Normalizations.registered[n]("extract",t,p)}if(!/^[\d-]/.test(u))if(a(t)&&a(t).isSVG&&x.Names.SVGAttribute(n))if(/^(height|width)$/i.test(n))try{u=t.getBBox()[n]}catch(g){u=0}else u=t.getAttribute(n);else u=s(t,x.Names.prefixCheck(n)[0]);return x.Values.isCSSNullValue(u)&&(u=0),b.debug>=2&&console.log("Get "+n+": "+u),u},setPropertyValue:function(t,n,i,r,o){var s=n;if("scroll"===n)o.container?o.container["scroll"+o.direction]=i:"Left"===o.direction?e.scrollTo(i,o.alternateValue):e.scrollTo(o.alternateValue,i);else if(x.Normalizations.registered[n]&&"transform"===x.Normalizations.registered[n]("name",t))x.Normalizations.registered[n]("inject",t,i),s="transform",i=a(t).transformCache[n];else{if(x.Hooks.registered[n]){var u=n,l=x.Hooks.getRoot(n);r=r||x.getPropertyValue(t,l),i=x.Hooks.injectValue(u,i,r),n=l}if(x.Normalizations.registered[n]&&(i=x.Normalizations.registered[n]("inject",t,i),n=x.Normalizations.registered[n]("name",t)),s=x.Names.prefixCheck(n)[0],8>=d)try{t.style[s]=i}catch(c){b.debug&&console.log("Browser does not support ["+i+"] for ["+s+"]")}else a(t)&&a(t).isSVG&&x.Names.SVGAttribute(n)?t.setAttribute(n,i):t.style[s]=i;b.debug>=2&&console.log("Set "+n+" ("+s+"): "+i)}return[s,i]},flushTransformCache:function(t){function e(e){return parseFloat(x.getPropertyValue(t,e))}var n="";if((d||b.State.isAndroid&&!b.State.isChrome)&&a(t).isSVG){var i={translate:[e("translateX"),e("translateY")],skewX:[e("skewX")],skewY:[e("skewY")],scale:1!==e("scale")?[e("scale"),e("scale")]:[e("scaleX"),e("scaleY")],rotate:[e("rotateZ"),0,0]};h.each(a(t).transformCache,function(t){/^translate/i.test(t)?t="translate":/^scale/i.test(t)?t="scale":/^rotate/i.test(t)&&(t="rotate"),i[t]&&(n+=t+"("+i[t].join(" ")+") ",delete i[t])})}else{var r,o;h.each(a(t).transformCache,function(e){return r=a(t).transformCache[e],"transformPerspective"===e?(o=r,!0):(9===d&&"rotateZ"===e&&(e="rotate"),void(n+=e+r+" "))}),o&&(n="perspective"+o+" "+n)}x.setPropertyValue(t,"transform",n)}};x.Hooks.register(),x.Normalizations.register(),b.hook=function(t,e,n){var r=i;return t=o(t),h.each(t,function(t,o){if(a(o)===i&&b.init(o),n===i)r===i&&(r=b.CSS.getPropertyValue(o,e));else{var s=b.CSS.setPropertyValue(o,e,n);"transform"===s[0]&&b.CSS.flushTransformCache(o),r=s}}),r};var C=function(){
function t(){return s?A.promise||null:u}function r(){function t(t){function f(t,e){var n=i,r=i,a=i;return g.isArray(t)?(n=t[0],!g.isArray(t[1])&&/^[\d-]/.test(t[1])||g.isFunction(t[1])||x.RegEx.isHex.test(t[1])?a=t[1]:(g.isString(t[1])&&!x.RegEx.isHex.test(t[1])||g.isArray(t[1]))&&(r=e?t[1]:l(t[1],s.duration),t[2]!==i&&(a=t[2]))):n=t,e||(r=r||s.easing),g.isFunction(n)&&(n=n.call(o,k,T)),g.isFunction(a)&&(a=a.call(o,k,T)),[n||0,r,a]}function d(t,e){var n,i;return i=(e||"0").toString().toLowerCase().replace(/[%A-z]+$/,function(t){return n=t,""}),n||(n=x.Values.getUnitType(t)),[i,n]}function v(){var t={myParent:o.parentNode||n.body,position:x.getPropertyValue(o,"position"),fontSize:x.getPropertyValue(o,"fontSize")},i=t.position===D.lastPosition&&t.myParent===D.lastParent,r=t.fontSize===D.lastFontSize;D.lastParent=t.myParent,D.lastPosition=t.position,D.lastFontSize=t.fontSize;var s=100,u={};if(r&&i)u.emToPx=D.lastEmToPx,u.percentToPxWidth=D.lastPercentToPxWidth,u.percentToPxHeight=D.lastPercentToPxHeight;else{var l=a(o).isSVG?n.createElementNS("http://www.w3.org/2000/svg","rect"):n.createElement("div");b.init(l),t.myParent.appendChild(l),h.each(["overflow","overflowX","overflowY"],function(t,e){b.CSS.setPropertyValue(l,e,"hidden")}),b.CSS.setPropertyValue(l,"position",t.position),b.CSS.setPropertyValue(l,"fontSize",t.fontSize),b.CSS.setPropertyValue(l,"boxSizing","content-box"),h.each(["minWidth","maxWidth","width","minHeight","maxHeight","height"],function(t,e){b.CSS.setPropertyValue(l,e,s+"%")}),b.CSS.setPropertyValue(l,"paddingLeft",s+"em"),u.percentToPxWidth=D.lastPercentToPxWidth=(parseFloat(x.getPropertyValue(l,"width",null,!0))||1)/s,u.percentToPxHeight=D.lastPercentToPxHeight=(parseFloat(x.getPropertyValue(l,"height",null,!0))||1)/s,u.emToPx=D.lastEmToPx=(parseFloat(x.getPropertyValue(l,"paddingLeft"))||1)/s,t.myParent.removeChild(l)}return null===D.remToPx&&(D.remToPx=parseFloat(x.getPropertyValue(n.body,"fontSize"))||16),null===D.vwToPx&&(D.vwToPx=parseFloat(e.innerWidth)/100,D.vhToPx=parseFloat(e.innerHeight)/100),u.remToPx=D.remToPx,u.vwToPx=D.vwToPx,u.vhToPx=D.vhToPx,b.debug>=1&&console.log("Unit ratios: "+JSON.stringify(u),o),u}if(s.begin&&0===k)try{s.begin.call(p,p)}catch(w){setTimeout(function(){throw w},1)}if("scroll"===F){var C,S,E,P=/^x$/i.test(s.axis)?"Left":"Top",N=parseFloat(s.offset)||0;s.container?g.isWrapped(s.container)||g.isNode(s.container)?(s.container=s.container[0]||s.container,C=s.container["scroll"+P],E=C+h(o).position()[P.toLowerCase()]+N):s.container=null:(C=b.State.scrollAnchor[b.State["scrollProperty"+P]],S=b.State.scrollAnchor[b.State["scrollProperty"+("Left"===P?"Top":"Left")]],E=h(o).offset()[P.toLowerCase()]+N),u={scroll:{rootPropertyValue:!1,startValue:C,currentValue:C,endValue:E,unitType:"",easing:s.easing,scrollData:{container:s.container,direction:P,alternateValue:S}},element:o},b.debug&&console.log("tweensContainer (scroll): ",u.scroll,o)}else if("reverse"===F){if(!a(o).tweensContainer)return void h.dequeue(o,s.queue);"none"===a(o).opts.display&&(a(o).opts.display="auto"),"hidden"===a(o).opts.visibility&&(a(o).opts.visibility="visible"),a(o).opts.loop=!1,a(o).opts.begin=null,a(o).opts.complete=null,y.easing||delete s.easing,y.duration||delete s.duration,s=h.extend({},a(o).opts,s);var j=h.extend(!0,{},a(o).tweensContainer);for(var O in j)if("element"!==O){var L=j[O].startValue;j[O].startValue=j[O].currentValue=j[O].endValue,j[O].endValue=L,g.isEmptyObject(y)||(j[O].easing=s.easing),b.debug&&console.log("reverse tweensContainer ("+O+"): "+JSON.stringify(j[O]),o)}u=j}else if("start"===F){var j;a(o).tweensContainer&&a(o).isAnimating===!0&&(j=a(o).tweensContainer),h.each(m,function(t,e){if(RegExp("^"+x.Lists.colors.join("$|^")+"$").test(t)){var n=f(e,!0),r=n[0],o=n[1],a=n[2];if(x.RegEx.isHex.test(r)){for(var s=["Red","Green","Blue"],u=x.Values.hexToRgb(r),l=a?x.Values.hexToRgb(a):i,c=0;c<s.length;c++){var h=[u[c]];o&&h.push(o),l!==i&&h.push(l[c]),m[t+s[c]]=h}delete m[t]}}});for(var I in m){var R=f(m[I]),$=R[0],q=R[1],H=R[2];I=x.Names.camelCase(I);var U=x.Hooks.getRoot(I),_=!1;if(a(o).isSVG||"tween"===U||x.Names.prefixCheck(U)[1]!==!1||x.Normalizations.registered[U]!==i){(s.display!==i&&null!==s.display&&"none"!==s.display||s.visibility!==i&&"hidden"!==s.visibility)&&/opacity|filter/.test(I)&&!H&&0!==$&&(H=0),s._cacheValues&&j&&j[I]?(H===i&&(H=j[I].endValue+j[I].unitType),_=a(o).rootPropertyValueCache[U]):x.Hooks.registered[I]?H===i?(_=x.getPropertyValue(o,U),H=x.getPropertyValue(o,I,_)):_=x.Hooks.templates[U][1]:H===i&&(H=x.getPropertyValue(o,I));var W,V,B,Q=!1;if(W=d(I,H),H=W[0],B=W[1],W=d(I,$),$=W[0].replace(/^([+-\/*])=/,function(t,e){return Q=e,""}),V=W[1],H=parseFloat(H)||0,$=parseFloat($)||0,"%"===V&&(/^(fontSize|lineHeight)$/.test(I)?($/=100,V="em"):/^scale/.test(I)?($/=100,V=""):/(Red|Green|Blue)$/i.test(I)&&($=$/100*255,V="")),/[\/*]/.test(Q))V=B;else if(B!==V&&0!==H)if(0===$)V=B;else{r=r||v();var K=/margin|padding|left|right|width|text|word|letter/i.test(I)||/X$/.test(I)||"x"===I?"x":"y";switch(B){case"%":H*="x"===K?r.percentToPxWidth:r.percentToPxHeight;break;case"px":break;default:H*=r[B+"ToPx"]}switch(V){case"%":H*=1/("x"===K?r.percentToPxWidth:r.percentToPxHeight);break;case"px":break;default:H*=1/r[V+"ToPx"]}}switch(Q){case"+":$=H+$;break;case"-":$=H-$;break;case"*":$=H*$;break;case"/":$=H/$}u[I]={rootPropertyValue:_,startValue:H,currentValue:H,endValue:$,unitType:V,easing:q},b.debug&&console.log("tweensContainer ("+I+"): "+JSON.stringify(u[I]),o)}else b.debug&&console.log("Skipping ["+U+"] due to a lack of browser support.")}u.element=o}u.element&&(x.Values.addClass(o,"velocity-animating"),M.push(u),""===s.queue&&(a(o).tweensContainer=u,a(o).opts=s),a(o).isAnimating=!0,k===T-1?(b.State.calls.push([M,p,s,null,A.resolver]),b.State.isTicking===!1&&(b.State.isTicking=!0,c())):k++)}var r,o=this,s=h.extend({},b.defaults,y),u={};switch(a(o)===i&&b.init(o),parseFloat(s.delay)&&s.queue!==!1&&h.queue(o,s.queue,function(t){b.velocityQueueEntryFlag=!0,a(o).delayTimer={setTimeout:setTimeout(t,parseFloat(s.delay)),next:t}}),s.duration.toString().toLowerCase()){case"fast":s.duration=200;break;case"normal":s.duration=v;break;case"slow":s.duration=600;break;default:s.duration=parseFloat(s.duration)||1}b.mock!==!1&&(b.mock===!0?s.duration=s.delay=1:(s.duration*=parseFloat(b.mock)||1,s.delay*=parseFloat(b.mock)||1)),s.easing=l(s.easing,s.duration),s.begin&&!g.isFunction(s.begin)&&(s.begin=null),s.progress&&!g.isFunction(s.progress)&&(s.progress=null),s.complete&&!g.isFunction(s.complete)&&(s.complete=null),s.display!==i&&null!==s.display&&(s.display=s.display.toString().toLowerCase(),"auto"===s.display&&(s.display=b.CSS.Values.getDisplayType(o))),s.visibility!==i&&null!==s.visibility&&(s.visibility=s.visibility.toString().toLowerCase()),s.mobileHA=s.mobileHA&&b.State.isMobile&&!b.State.isGingerbread,s.queue===!1?s.delay?setTimeout(t,s.delay):t():h.queue(o,s.queue,function(e,n){return n===!0?(A.promise&&A.resolver(p),!0):(b.velocityQueueEntryFlag=!0,void t(e))}),""!==s.queue&&"fx"!==s.queue||"inprogress"===h.queue(o)[0]||h.dequeue(o)}var s,u,d,p,m,y,w=arguments[0]&&(arguments[0].p||h.isPlainObject(arguments[0].properties)&&!arguments[0].properties.names||g.isString(arguments[0].properties));if(g.isWrapped(this)?(s=!1,d=0,p=this,u=this):(s=!0,d=1,p=w?arguments[0].elements||arguments[0].e:arguments[0]),p=o(p)){w?(m=arguments[0].properties||arguments[0].p,y=arguments[0].options||arguments[0].o):(m=arguments[d],y=arguments[d+1]);var T=p.length,k=0;if(!/^(stop|finish|finishAll)$/i.test(m)&&!h.isPlainObject(y)){var S=d+1;y={};for(var E=S;E<arguments.length;E++)g.isArray(arguments[E])||!/^(fast|normal|slow)$/i.test(arguments[E])&&!/^\d/.test(arguments[E])?g.isString(arguments[E])||g.isArray(arguments[E])?y.easing=arguments[E]:g.isFunction(arguments[E])&&(y.complete=arguments[E]):y.duration=arguments[E]}var A={promise:null,resolver:null,rejecter:null};s&&b.Promise&&(A.promise=new b.Promise(function(t,e){A.resolver=t,A.rejecter=e}));var F;switch(m){case"scroll":F="scroll";break;case"reverse":F="reverse";break;case"finish":case"finishAll":case"stop":h.each(p,function(t,e){a(e)&&a(e).delayTimer&&(clearTimeout(a(e).delayTimer.setTimeout),a(e).delayTimer.next&&a(e).delayTimer.next(),delete a(e).delayTimer),"finishAll"!==m||y!==!0&&!g.isString(y)||(h.each(h.queue(e,g.isString(y)?y:""),function(t,e){g.isFunction(e)&&e()}),h.queue(e,g.isString(y)?y:"",[]))});var P=[];return h.each(b.State.calls,function(t,e){e&&h.each(e[1],function(n,r){var o=y===i?"":y;return o===!0||e[2].queue===o||y===i&&e[2].queue===!1?void h.each(p,function(n,i){i===r&&((y===!0||g.isString(y))&&(h.each(h.queue(i,g.isString(y)?y:""),function(t,e){g.isFunction(e)&&e(null,!0)}),h.queue(i,g.isString(y)?y:"",[])),"stop"===m?(a(i)&&a(i).tweensContainer&&o!==!1&&h.each(a(i).tweensContainer,function(t,e){e.endValue=e.currentValue}),P.push(t)):("finish"===m||"finishAll"===m)&&(e[2].duration=1))}):!0})}),"stop"===m&&(h.each(P,function(t,e){f(e,!0)}),A.promise&&A.resolver(p)),t();default:if(!h.isPlainObject(m)||g.isEmptyObject(m)){if(g.isString(m)&&b.Redirects[m]){var N=h.extend({},y),j=N.duration,O=N.delay||0;return N.backwards===!0&&(p=h.extend(!0,[],p).reverse()),h.each(p,function(t,e){parseFloat(N.stagger)?N.delay=O+parseFloat(N.stagger)*t:g.isFunction(N.stagger)&&(N.delay=O+N.stagger.call(e,t,T)),N.drag&&(N.duration=parseFloat(j)||(/^(callout|transition)/.test(m)?1e3:v),N.duration=Math.max(N.duration*(N.backwards?1-t/T:(t+1)/T),.75*N.duration,200)),b.Redirects[m].call(e,e,N||{},t,T,p,A.promise?A:i)}),t()}var L="Velocity: First argument ("+m+") was not a property map, a known action, or a registered redirect. Aborting.";return A.promise?A.rejecter(new Error(L)):console.log(L),t()}F="start"}var D={lastParent:null,lastPosition:null,lastFontSize:null,lastPercentToPxWidth:null,lastPercentToPxHeight:null,lastEmToPx:null,remToPx:null,vwToPx:null,vhToPx:null},M=[];h.each(p,function(t,e){g.isNode(e)&&r.call(e)});var I,N=h.extend({},b.defaults,y);if(N.loop=parseInt(N.loop),I=2*N.loop-1,N.loop)for(var R=0;I>R;R++){var $={delay:N.delay,progress:N.progress};R===I-1&&($.display=N.display,$.visibility=N.visibility,$.complete=N.complete),C(p,"reverse",$)}return t()}};b=h.extend(C,b),b.animate=C;var T=e.requestAnimationFrame||p;return b.State.isMobile||n.hidden===i||n.addEventListener("visibilitychange",function(){n.hidden?(T=function(t){return setTimeout(function(){t(!0)},16)},c()):T=e.requestAnimationFrame||p}),t.Velocity=b,t!==e&&(t.fn.velocity=C,t.fn.velocity.defaults=b.defaults),h.each(["Down","Up"],function(t,e){b.Redirects["slide"+e]=function(t,n,r,o,a,s){var u=h.extend({},n),l=u.begin,c=u.complete,f={height:"",marginTop:"",marginBottom:"",paddingTop:"",paddingBottom:""},d={};u.display===i&&(u.display="Down"===e?"inline"===b.CSS.Values.getDisplayType(t)?"inline-block":"block":"none"),u.begin=function(){l&&l.call(a,a);for(var n in f){d[n]=t.style[n];var i=b.CSS.getPropertyValue(t,n);f[n]="Down"===e?[i,0]:[0,i]}d.overflow=t.style.overflow,t.style.overflow="hidden"},u.complete=function(){for(var e in d)t.style[e]=d[e];c&&c.call(a,a),s&&s.resolver(a)},b(t,f,u)}}),h.each(["In","Out"],function(t,e){b.Redirects["fade"+e]=function(t,n,r,o,a,s){var u=h.extend({},n),l={opacity:"In"===e?1:0},c=u.complete;r!==o-1?u.complete=u.begin=null:u.complete=function(){c&&c.call(a,a),s&&s.resolver(a)},u.display===i&&(u.display="In"===e?"auto":"none"),b(this,l,u)}}),b}(window.jQuery||window.Zepto||window,window,document)}),function(){function n(t){return void 0!==t}function ba(){}function ca(t){t.ub=function(){return t.uf?t.uf:t.uf=new t}}function da(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&"undefined"!=typeof t.splice&&"undefined"!=typeof t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||"undefined"!=typeof t.call&&"undefined"!=typeof t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&"undefined"==typeof t.call)return"object";return e}function ea(t){return"array"==da(t)}function fa(t){var e=da(t);return"array"==e||"object"==e&&"number"==typeof t.length}function p(t){return"string"==typeof t}function ga(t){return"number"==typeof t}function ha(t){return"function"==da(t)}function ia(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function ja(t,e,n){return t.call.apply(t.bind,arguments)}function ka(t,e,n){if(!t)throw Error();if(2<arguments.length){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,i),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function q(t,e,n){return q=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ja:ka,q.apply(null,arguments)}function ma(t,e){function n(){}n.prototype=e.prototype,t.bh=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Yg=function(t,n,i){for(var r=Array(arguments.length-2),o=2;o<arguments.length;o++)r[o-2]=arguments[o];return e.prototype[n].apply(t,r)}}function r(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function na(t,e){var n,i={};for(n in t)i[n]=e.call(void 0,t[n],n,t);return i}function oa(t,e){for(var n in t)if(!e.call(void 0,t[n],n,t))return!1;return!0}function pa(t){var e,n=0;for(e in t)n++;return n}function qa(t){for(var e in t)return e}function ra(t){var e,n=[],i=0;for(e in t)n[i++]=t[e];return n}function sa(t){var e,n=[],i=0;for(e in t)n[i++]=e;return n}function ta(t,e){for(var n in t)if(t[n]==e)return!0;return!1}function ua(t,e,n){for(var i in t)if(e.call(n,t[i],i,t))return i}function va(t,e){var n=ua(t,e,void 0);return n&&t[n]}function wa(t){for(var e in t)return!1;return!0}function xa(t){var e,n={};for(e in t)n[e]=t[e];return n}function za(t,e){for(var n,i,r=1;r<arguments.length;r++){i=arguments[r];for(n in i)t[n]=i[n];for(var o=0;o<ya.length;o++)n=ya[o],Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}}function Aa(a){if(a=String(a),/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a)}function Ba(){this.Sd=void 0}function Ca(t,e,n){switch(typeof e){case"string":Da(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?e:"null");break;case"boolean":n.push(e);break;case"undefined":n.push("null");break;case"object":if(null==e){n.push("null");break}if(ea(e)){var i=e.length;n.push("[");for(var r="",o=0;i>o;o++)n.push(r),r=e[o],Ca(t,t.Sd?t.Sd.call(e,String(o),r):r,n),r=",";n.push("]");break}n.push("{"),i="";for(o in e)Object.prototype.hasOwnProperty.call(e,o)&&(r=e[o],"function"!=typeof r&&(n.push(i),Da(o,n),n.push(":"),Ca(t,t.Sd?t.Sd.call(e,o,r):r,n),i=","));n.push("}");break;case"function":break;default:throw Error("Unknown type: "+typeof e)}}function Da(t,e){e.push('"',t.replace(Fa,function(t){if(t in Ea)return Ea[t];var e=t.charCodeAt(0),n="\\u";return 16>e?n+="000":256>e?n+="00":4096>e&&(n+="0"),Ea[t]=n+e.toString(16)}),'"')}function Ga(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^la()).toString(36)}function Ka(){this.Va=-1}function La(){this.Va=-1,this.Va=64,this.N=[],this.me=[],this.Wf=[],this.Ld=[],this.Ld[0]=128;for(var t=1;t<this.Va;++t)this.Ld[t]=0;this.de=this.ac=0,this.reset()}function Ma(t,e,n){n||(n=0);var i=t.Wf;if(p(e))for(var r=0;16>r;r++)i[r]=e.charCodeAt(n)<<24|e.charCodeAt(n+1)<<16|e.charCodeAt(n+2)<<8|e.charCodeAt(n+3),n+=4;else for(r=0;16>r;r++)i[r]=e[n]<<24|e[n+1]<<16|e[n+2]<<8|e[n+3],n+=4;for(r=16;80>r;r++){var o=i[r-3]^i[r-8]^i[r-14]^i[r-16];i[r]=4294967295&(o<<1|o>>>31)}e=t.N[0],n=t.N[1];for(var a,s=t.N[2],u=t.N[3],l=t.N[4],r=0;80>r;r++)40>r?20>r?(o=u^n&(s^u),a=1518500249):(o=n^s^u,a=1859775393):60>r?(o=n&s|u&(n|s),a=2400959708):(o=n^s^u,a=3395469782),o=(e<<5|e>>>27)+o+l+a+i[r]&4294967295,l=u,u=s,s=4294967295&(n<<30|n>>>2),n=e,e=o;t.N[0]=t.N[0]+e&4294967295,t.N[1]=t.N[1]+n&4294967295,t.N[2]=t.N[2]+s&4294967295,t.N[3]=t.N[3]+u&4294967295,t.N[4]=t.N[4]+l&4294967295}function Ta(t,e){var n=Ua(t,e,void 0);return 0>n?null:p(t)?t.charAt(n):t[n]}function Ua(t,e,n){for(var i=t.length,r=p(t)?t.split(""):t,o=0;i>o;o++)if(o in r&&e.call(n,r[o],o,t))return o;return-1}function Va(t,e){var n=Na(t,e);n>=0&&u.splice.call(t,n,1)}function Wa(t,e,n){return 2>=arguments.length?u.slice.call(t,e):u.slice.call(t,e,n)}function Xa(t,e){t.sort(e||Ya)}function Ya(t,e){return t>e?1:e>t?-1:0}function fb(t,e){if(!fa(t))throw Error("encodeByteArray takes an array as a parameter");gb();for(var n=e?db:cb,i=[],r=0;r<t.length;r+=3){var o=t[r],a=r+1<t.length,s=a?t[r+1]:0,u=r+2<t.length,l=u?t[r+2]:0,c=o>>2,o=(3&o)<<4|s>>4,s=(15&s)<<2|l>>6,l=63&l;u||(l=64,a||(s=64)),i.push(n[c],n[o],n[s],n[l])}return i.join("")}function gb(){if(!cb){cb={},db={},eb={};for(var t=0;65>t;t++)cb[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t),db[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(t),eb[db[t]]=t,t>=62&&(eb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t)]=t)}}function v(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function w(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function ib(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function jb(t){var e={};return ib(t,function(t,n){e[t]=n}),e}function kb(t){var e=[];return ib(t,function(t,n){ea(n)?Oa(n,function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}),e.length?"&"+e.join("&"):""}function lb(t){var e={};return t=t.replace(/^\?/,"").split("&"),Oa(t,function(t){t&&(t=t.split("="),e[t[0]]=t[1])}),e}function x(t,e,n,i){var r;if(e>i?r="at least "+e:i>n&&(r=0===n?"none":"no more than "+n),r)throw Error(t+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+r+".")}function y(t,e,n){var i="";switch(e){case 1:i=n?"first":"First";break;case 2:i=n?"second":"Second";break;case 3:i=n?"third":"Third";break;case 4:i=n?"fourth":"Fourth";break;default:throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}return t=t+" failed: "+(i+" argument ")}function A(t,e,i,r){if((!r||n(i))&&!ha(i))throw Error(y(t,e,r)+"must be a valid function.")}function mb(t,e,i){if(n(i)&&(!ia(i)||null===i))throw Error(y(t,e,!0)+"must be a valid context object.")}function nb(t){return"undefined"!=typeof JSON&&n(JSON.parse)?JSON.parse(t):Aa(t)}function B(t){if("undefined"!=typeof JSON&&n(JSON.stringify))t=JSON.stringify(t);else{var e=[];Ca(new Ba,t,e),t=e.join("")}return t}function ob(){this.Wd=C}function pb(){}function rb(t,e,n){this.Tf=t,this.Ka=e,this.Kd=n}function vb(){this.tb=[]}function wb(t,e){for(var n=null,i=0;i<e.length;i++){var r=e[i],o=r.Zb();null===n||o.ca(n.Zb())||(t.tb.push(n),n=null),null===n&&(n=new xb(o)),n.add(r)}n&&t.tb.push(n)}function yb(t,e,n){wb(t,n),zb(t,function(t){return t.ca(e)})}function Ab(t,e,n){wb(t,n),zb(t,function(t){return t.contains(e)||e.contains(t)})}function zb(t,e){for(var n=!0,i=0;i<t.tb.length;i++){var r=t.tb[i];if(r)if(r=r.Zb(),e(r)){for(var r=t.tb[i],o=0;o<r.vd.length;o++){var a=r.vd[o];if(null!==a){r.vd[o]=null;var s=a.Vb();Bb&&Cb("event: "+a.toString()),Db(s)}}t.tb[i]=null}else n=!1}n&&(t.tb=[])}function xb(t){this.ra=t,this.vd=[]}function D(t,e,n,i){this.type=t,this.Ja=e,this.Wa=n,this.Ke=i,this.Qd=void 0}function Eb(t){return new D(Fb,t)}function Gb(t,e,n,i){this.ue=e,this.Zd=n,this.Qd=i,this.ud=t}function Hb(t,e,n){this.ue=t,this.error=e,this.path=n}function tb(t,e,n){this.A=t,this.ea=e,this.Ub=n}function Ib(t){return t.ea}function Jb(t){return t.Ub}function Kb(t,e){return e.e()?t.ea&&!t.Ub:sb(t,E(e))}function sb(t,e){return t.ea&&!t.Ub||t.A.Da(e)}function Lb(t){this.gg=t,this.Dd=null}function Mb(t,e){this.Of={},this.fd=new Lb(t),this.ba=e;var n=1e4+2e4*Math.random();setTimeout(q(this.If,this),Math.floor(n))}function Nb(){this.Ec={}}function Ob(t,e,i){n(i)||(i=1),v(t.Ec,e)||(t.Ec[e]=0),t.Ec[e]+=i}function Rb(t){return t=t.toString(),Pb[t]||(Pb[t]=new Nb),Pb[t]}function Sb(t,e){var n=t.toString();return Qb[n]||(Qb[n]=e()),Qb[n]}function F(t,e){this.name=t,this.S=e}function Tb(t,e){return new F(t,e)}function Ub(t,e){return Vb(t.name,e.name)}function Wb(t,e){return Vb(t,e)}function Xb(t,e,n){this.type=Yb,this.source=t,this.path=e,this.Ga=n}function Zb(t,e){this.type=$b,this.source=t,this.path=e}function ac(t,e){this.La=t,this.wa=e?e:bc}function cc(t,e){for(var n,i=t.wa,r=null;!i.e();){if(n=t.La(e,i.key),0===n){if(i.left.e())return r?r.key:null;for(i=i.left;!i.right.e();)i=i.right;return i.key}0>n?i=i.left:n>0&&(r=i,i=i.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?")}function dc(t,e,n,i,r){for(this.Ud=r||null,this.Fe=i,this.Pa=[],r=1;!t.e();)if(r=e?n(t.key,e):1,i&&(r*=-1),0>r)t=this.Fe?t.left:t.right;else{if(0===r){this.Pa.push(t);break}this.Pa.push(t),t=this.Fe?t.right:t.left}}function J(t){if(0===t.Pa.length)return null;var e,n=t.Pa.pop();if(e=t.Ud?t.Ud(n.key,n.value):{key:n.key,value:n.value},t.Fe)for(n=n.left;!n.e();)t.Pa.push(n),n=n.right;else for(n=n.right;!n.e();)t.Pa.push(n),n=n.left;return e}function ec(t){if(0===t.Pa.length)return null;var e;return e=t.Pa,e=e[e.length-1],t.Ud?t.Ud(e.key,e.value):{key:e.key,value:e.value}}function fc(t,e,n,i,r){this.key=t,this.value=e,this.color=null!=n?n:!0,this.left=null!=i?i:bc,this.right=null!=r?r:bc}function gc(t){return t.left.e()?t:gc(t.left)}function ic(t){return t.left.e()?bc:(t.left.fa()||t.left.left.fa()||(t=jc(t)),t=t.Y(null,null,null,ic(t.left),null),hc(t))}function hc(t){return t.right.fa()&&!t.left.fa()&&(t=mc(t)),t.left.fa()&&t.left.left.fa()&&(t=kc(t)),t.left.fa()&&t.right.fa()&&(t=lc(t)),t}function jc(t){return t=lc(t),t.right.left.fa()&&(t=t.Y(null,null,null,null,kc(t.right)),t=mc(t),t=lc(t)),t}function mc(t){return t.right.Y(null,null,t.color,t.Y(null,null,!0,null,t.right.left),null)}function kc(t){return t.left.Y(null,null,t.color,null,t.Y(null,null,!0,t.left.right,null))}function lc(t){return t.Y(null,null,!t.color,t.left.Y(null,null,!t.left.color,null,null),t.right.Y(null,null,!t.right.color,null,null))}function nc(){}function oc(t,e){return t&&"object"==typeof t?(K(".sv"in t,"Unexpected leaf node or priority contents"),e[t[".sv"]]):t}function pc(t,e){var n=new qc;return rc(t,new L(""),function(t,i){n.nc(t,sc(i,e))}),n}function sc(t,e){var n,i=t.C().I(),i=oc(i,e);if(t.K()){var r=oc(t.Ca(),e);return r!==t.Ca()||i!==t.C().I()?new tc(r,M(i)):t}return n=t,i!==t.C().I()&&(n=n.ga(new tc(i))),t.P(N,function(t,i){var r=sc(i,e);r!==i&&(n=n.U(t,r))}),n}function uc(){this.wc={}}function vc(t){this.Fc=t,this.Pd="firebase:"}function wc(t){try{if("undefined"!=typeof window&&"undefined"!=typeof window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new vc(e)}}catch(n){}return new uc}function zc(t,e,n,i,r){this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.kb=e,this.hc=n,this.Wg=i,this.Od=r||"",this.Ya=xc.get("host:"+t)||this.host}function Ac(t,e){e!==t.Ya&&(t.Ya=e,"s-"===t.Ya.substr(0,2)&&xc.set("host:"+t.host,t.Ya))}function Bc(t,e,n){if(K("string"==typeof e,"typeof type must == string"),K("object"==typeof n,"typeof params must == object"),e===Cc)e=(t.kb?"wss://":"ws://")+t.Ya+"/.ws?";else{if(e!==Dc)throw Error("Unknown connection type: "+e);e=(t.kb?"https://":"http://")+t.Ya+"/.lp?"}t.host!==t.Ya&&(n.ns=t.hc);var i=[];return r(n,function(t,e){i.push(e+"="+t)}),e+i.join("&")}function K(t,e){if(!t)throw Fc(e)}function Fc(t){return Error("Firebase ("+hb+") INTERNAL ASSERT FAILED: "+t)}function Gc(t){try{var e;if("undefined"!=typeof atob)e=atob(t);else{gb();for(var n=eb,i=[],r=0;r<t.length;){var o=n[t.charAt(r++)],a=r<t.length?n[t.charAt(r)]:0;++r;var s=r<t.length?n[t.charAt(r)]:64;++r;var u=r<t.length?n[t.charAt(r)]:64;if(++r,null==o||null==a||null==s||null==u)throw Error();i.push(o<<2|a>>4),64!=s&&(i.push(a<<4&240|s>>2),64!=u&&i.push(s<<6&192|u))}if(8192>i.length)e=String.fromCharCode.apply(null,i);else{for(t="",n=0;n<i.length;n+=8192)t+=String.fromCharCode.apply(null,Wa(i,n,n+8192));e=t}}return e}catch(l){Cb("base64Decode failed: ",l)}return null}function Hc(t){var e=Ic(t);t=new La,t.update(e);var e=[],n=8*t.de;56>t.ac?t.update(t.Ld,56-t.ac):t.update(t.Ld,t.Va-(t.ac-56));for(var i=t.Va-1;i>=56;i--)t.me[i]=255&n,n/=256;for(Ma(t,t.me),i=n=0;5>i;i++)for(var r=24;r>=0;r-=8)e[n]=t.N[i]>>r&255,++n;return fb(e)}function Jc(t){for(var e="",n=0;n<arguments.length;n++)e=fa(arguments[n])?e+Jc.apply(null,arguments[n]):"object"==typeof arguments[n]?e+B(arguments[n]):e+arguments[n],e+=" ";return e}function Cb(t){if(!0===Kc&&(Kc=!1,null===Bb&&!0===yc.get("logging_enabled")&&Lc(!0)),Bb){var e=Jc.apply(null,arguments);Bb(e)}}function Mc(t){return function(){Cb(t,arguments)}}function Nc(t){if("undefined"!=typeof console){var e="FIREBASE INTERNAL ERROR: "+Jc.apply(null,arguments);"undefined"!=typeof console.error?console.error(e):console.log(e)}}function Oc(t){var e=Jc.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+e)}function O(t){if("undefined"!=typeof console){var e="FIREBASE WARNING: "+Jc.apply(null,arguments);"undefined"!=typeof console.warn?console.warn(e):console.log(e)}}function Pc(t){var e="",n="",i="",r="",o=!0,a="https",s=443;if(p(t)){var u=t.indexOf("//");for(u>=0&&(a=t.substring(0,u-1),t=t.substring(u+2)),u=t.indexOf("/"),-1===u&&(u=t.length),e=t.substring(0,u),r="",t=t.substring(u).split("/"),u=0;u<t.length;u++)if(0<t[u].length){var l=t[u];try{l=decodeURIComponent(l.replace(/\+/g," "))}catch(c){}r+="/"+l}t=e.split("."),3===t.length?(n=t[1],i=t[0].toLowerCase()):2===t.length&&(n=t[0]),u=e.indexOf(":"),u>=0&&(o="https"===a||"wss"===a,s=e.substring(u+1),isFinite(s)&&(s=String(s)),s=p(s)?/^\s*-?0x/i.test(s)?parseInt(s,16):parseInt(s,10):NaN)}return{host:e,port:s,domain:n,Tg:i,kb:o,scheme:a,$c:r}}function Qc(t){return ga(t)&&(t!=t||t==Number.POSITIVE_INFINITY||t==Number.NEGATIVE_INFINITY)}function Rc(t){if("complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}function Vb(t,e){if(t===e)return 0;if("[MIN_NAME]"===t||"[MAX_NAME]"===e)return-1;if("[MIN_NAME]"===e||"[MAX_NAME]"===t)return 1;var n=Sc(t),i=Sc(e);return null!==n?null!==i?0==n-i?t.length-e.length:n-i:-1:null!==i?1:e>t?-1:1}function Tc(t,e){if(e&&t in e)return e[t];throw Error("Missing required key ("+t+") in object: "+B(e))}function Uc(t){if("object"!=typeof t||null===t)return B(t);var e,n=[];for(e in t)n.push(e);n.sort(),e="{";for(var i=0;i<n.length;i++)0!==i&&(e+=","),e+=B(n[i]),e+=":",e+=Uc(t[n[i]]);return e+"}"}function Vc(t,e){if(t.length<=e)return[t];for(var n=[],i=0;i<t.length;i+=e)i+e>t?n.push(t.substring(i,t.length)):n.push(t.substring(i,i+e));return n}function Wc(t,e){if(ea(t))for(var n=0;n<t.length;++n)e(n,t[n]);else r(t,e)}function Xc(t){K(!Qc(t),"Invalid JSON number");var e,n,i,r;for(0===t?(i=n=0,e=-(1/0)===1/t?1:0):(e=0>t,t=Math.abs(t),t>=Math.pow(2,-1022)?(i=Math.min(Math.floor(Math.log(t)/Math.LN2),1023),n=i+1023,i=Math.round(t*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,i=Math.round(t/Math.pow(2,-1074)))),r=[],t=52;t;--t)r.push(i%2?1:0),i=Math.floor(i/2);for(t=11;t;--t)r.push(n%2?1:0),n=Math.floor(n/2);for(r.push(e?1:0),r.reverse(),e=r.join(""),n="",t=0;64>t;t+=8)i=parseInt(e.substr(t,8),2).toString(16),1===i.length&&(i="0"+i),n+=i;return n.toLowerCase()}function Sc(t){return Yc.test(t)&&(t=Number(t),t>=-2147483648&&2147483647>=t)?t:null}function Db(t){try{t()}catch(e){setTimeout(function(){throw O("Exception was thrown by user callback.",e.stack||""),e},Math.floor(0))}}function P(t,e){if(ha(t)){var n=Array.prototype.slice.call(arguments,1).slice();Db(function(){t.apply(null,n)})}}function Ic(t){for(var e=[],n=0,i=0;i<t.length;i++){var r=t.charCodeAt(i);r>=55296&&56319>=r&&(r-=55296,i++,K(i<t.length,"Surrogate pair missing trail surrogate."),r=65536+(r<<10)+(t.charCodeAt(i)-56320)),128>r?e[n++]=r:(2048>r?e[n++]=r>>6|192:(65536>r?e[n++]=r>>12|224:(e[n++]=r>>18|240,e[n++]=r>>12&63|128),e[n++]=r>>6&63|128),e[n++]=63&r|128)}return e}function Zc(t){for(var e=0,n=0;n<t.length;n++){var i=t.charCodeAt(n);128>i?e++:2048>i?e+=2:i>=55296&&56319>=i?(e+=4,n++):e+=3}return e}function $c(t){var e={},n={},i={},r="";try{var o=t.split("."),e=nb(Gc(o[0])||""),n=nb(Gc(o[1])||""),r=o[2],i=n.d||{};delete n.d}catch(a){}return{Zg:e,Bc:n,data:i,Qg:r}}function ad(t){return t=$c(t).Bc,"object"==typeof t&&t.hasOwnProperty("iat")?w(t,"iat"):null}function bd(t){t=$c(t);var e=t.Bc;return!!t.Qg&&!!e&&"object"==typeof e&&e.hasOwnProperty("iat")}function cd(t){this.W=t,this.g=t.n.g}function dd(t,e,n,i){var r=[],o=[];return Oa(e,function(e){"child_changed"===e.type&&t.g.Ad(e.Ke,e.Ja)&&o.push(new D("child_moved",e.Ja,e.Wa))}),ed(t,r,"child_removed",e,i,n),ed(t,r,"child_added",e,i,n),ed(t,r,"child_moved",o,i,n),ed(t,r,"child_changed",e,i,n),ed(t,r,Fb,e,i,n),r}function ed(t,e,n,i,r,o){i=Pa(i,function(t){return t.type===n}),Xa(i,q(t.hg,t)),Oa(i,function(n){var i=fd(t,n,o);Oa(r,function(r){r.Kf(n.type)&&e.push(r.createEvent(i,t.W))})})}function fd(t,e,n){return"value"!==e.type&&"child_removed"!==e.type&&(e.Qd=n.rf(e.Wa,e.Ja,t.g)),e}function gd(){this.bb={}}function hd(t,e){var n=e.type,i=e.Wa;K("child_added"==n||"child_changed"==n||"child_removed"==n,"Only child changes supported for tracking"),K(".priority"!==i,"Only non-priority child changes can be tracked.");var r=w(t.bb,i);if(r){var o=r.type;if("child_added"==n&&"child_removed"==o)t.bb[i]=new D("child_changed",e.Ja,i,r.Ja);else if("child_removed"==n&&"child_added"==o)delete t.bb[i];else if("child_removed"==n&&"child_changed"==o)t.bb[i]=new D("child_removed",r.Ke,i);else if("child_changed"==n&&"child_added"==o)t.bb[i]=new D("child_added",e.Ja,i);else{if("child_changed"!=n||"child_changed"!=o)throw Fc("Illegal combination of changes: "+e+" occurred after "+r);t.bb[i]=new D("child_changed",e.Ja,i,r.Ke)}}else t.bb[i]=e}function id(t,e,n){this.Rb=t,this.pb=e,this.rb=n||null}function jd(t,e,n){this.ha=t,this.pb=e,this.rb=n}function kd(t){this.g=t}function ld(t){this.Be=new kd(t.g),this.g=t.g;var e;t.ma?(e=md(t),e=t.g.Pc(nd(t),e)):e=t.g.Tc(),this.ed=e,t.pa?(e=od(t),t=t.g.Pc(pd(t),e)):t=t.g.Qc(),this.Gc=t}function qd(t){this.sa=new ld(t),this.g=t.g,K(t.ja,"Only valid if limit has been set"),this.ka=t.ka,this.Jb=!rd(t)}function sd(t,e,n,i,r,o){var a;if(t.Jb){var s=td(t.g);a=function(t,e){return s(e,t)}}else a=td(t.g);K(e.Db()==t.ka,"");var u=new F(n,i),l=t.Jb?ud(e,t.g):vd(e,t.g),c=t.sa.matches(u);if(e.Da(n)){for(var f=e.R(n),l=r.ye(t.g,l,t.Jb);null!=l&&(l.name==n||e.Da(l.name));)l=r.ye(t.g,l,t.Jb);return r=null==l?1:a(l,u),c&&!i.e()&&r>=0?(null!=o&&hd(o,new D("child_changed",i,n,f)),e.U(n,i)):(null!=o&&hd(o,new D("child_removed",f,n)),e=e.U(n,C),null!=l&&t.sa.matches(l)?(null!=o&&hd(o,new D("child_added",l.S,l.name)),e.U(l.name,l.S)):e)}return i.e()?e:c&&0<=a(l,u)?(null!=o&&(hd(o,new D("child_removed",l.S,l.name)),hd(o,new D("child_added",i,n))),e.U(n,i).U(l.name,C)):e}function wd(t,e){this.je=t,this.fg=e}function xd(t){this.V=t}function Hd(t,e,n,i,r,o){var a=e.O;if(null!=i.tc(n))return e;var s;if(n.e())K(Ib(e.w()),"If change path is empty, we must have complete server data"),Jb(e.w())?(r=ub(e),i=i.yc(r instanceof R?r:C)):i=i.za(ub(e)),o=t.V.xa(e.O.j(),i,o);else{var u=E(n);if(".priority"==u)K(1==Kd(n),"Can't have a priority with additional path components"),
o=a.j(),s=e.w().j(),i=i.ld(n,o,s),o=null!=i?t.V.ga(o,i):a.j();else{var l=H(n);sb(a,u)?(s=e.w().j(),i=i.ld(n,a.j(),s),i=null!=i?a.j().R(u).G(l,i):a.j().R(u)):i=i.xc(u,e.w()),o=null!=i?t.V.G(a.j(),u,i,l,r,o):a.j()}}return Fd(e,o,a.ea||n.e(),t.V.Na())}function Ad(t,e,n,i,r,o,a,s){var u=e.w();if(a=a?t.V:t.V.Wb(),n.e())i=a.xa(u.j(),i,null);else if(a.Na()&&!u.Ub)i=u.j().G(n,i),i=a.xa(u.j(),i,null);else{var l=E(n);if(!Kb(u,n)&&1<Kd(n))return e;var c=H(n);i=u.j().R(l).G(c,i),i=".priority"==l?a.ga(u.j(),i):a.G(u.j(),l,i,c,qb,null)}return u=u.ea||n.e(),e=new Id(e.O,new tb(i,u,a.Na())),Hd(t,e,n,r,new rb(r,e,o),s)}function yd(t,e,n,i,r,o,a){var s=e.O;if(r=new rb(r,e,o),n.e())a=t.V.xa(e.O.j(),i,a),t=Fd(e,a,!0,t.V.Na());else if(o=E(n),".priority"===o)a=t.V.ga(e.O.j(),i),t=Fd(e,a,s.ea,s.Ub);else{n=H(n);var u=s.j().R(o);if(!n.e()){var l=r.qf(o);i=null!=l?".priority"===Ld(n)&&l.Q(n.parent()).e()?l:l.G(n,i):C}u.ca(i)?t=e:(a=t.V.G(s.j(),o,i,n,r,a),t=Fd(e,a,s.ea,t.V.Na()))}return t}function Cd(t,e,n,i,r,o,a){var s=e;return Md(i,function(i,u){var l=n.u(i);sb(e.O,E(l))&&(s=yd(t,s,l,u,r,o,a))}),Md(i,function(i,u){var l=n.u(i);sb(e.O,E(l))||(s=yd(t,s,l,u,r,o,a))}),s}function Nd(t,e){return Md(e,function(e,n){t=t.G(e,n)}),t}function Dd(t,e,n,i,r,o,a,s){if(e.w().j().e()&&!Ib(e.w()))return e;var u=e;n=n.e()?i:Od(Pd,n,i);var l=e.w().j();return n.children.ia(function(n,i){if(l.Da(n)){var c=e.w().j().R(n),c=Nd(c,i);u=Ad(t,u,new L(n),c,r,o,a,s)}}),n.children.ia(function(n,i){var c=!sb(e.w(),n)&&null==i.value;l.Da(n)||c||(c=e.w().j().R(n),c=Nd(c,i),u=Ad(t,u,new L(n),c,r,o,a,s))}),u}function Gd(t,e,n,i,r,o,a){if(null!=r.tc(n))return e;var s=Jb(e.w()),u=e.w();if(null!=i.value){if(n.e()&&u.ea||Kb(u,n))return Ad(t,e,n,u.j().Q(n),r,o,s,a);if(n.e()){var l=Pd;return u.j().P(Qd,function(t,e){l=l.set(new L(t),e)}),Dd(t,e,n,l,r,o,s,a)}return e}return l=Pd,Md(i,function(t){var e=n.u(t);Kb(u,e)&&(l=l.set(t,u.j().Q(e)))}),Dd(t,e,n,l,r,o,s,a)}function Rd(){}function td(t){return q(t.compare,t)}function Ud(t){K(!t.e()&&".priority"!==E(t),"Can't create PathIndex with empty path or .priority key"),this.cc=t}function Wd(){}function Xd(){}function Yd(){}function ae(){this.Tb=this.pa=this.Lb=this.ma=this.ja=!1,this.ka=0,this.Nb="",this.ec=null,this.xb="",this.bc=null,this.vb="",this.g=N}function rd(t){return""===t.Nb?t.ma:"l"===t.Nb}function nd(t){return K(t.ma,"Only valid if start has been set"),t.ec}function md(t){return K(t.ma,"Only valid if start has been set"),t.Lb?t.xb:"[MIN_NAME]"}function pd(t){return K(t.pa,"Only valid if end has been set"),t.bc}function od(t){return K(t.pa,"Only valid if end has been set"),t.Tb?t.vb:"[MAX_NAME]"}function ce(t){var e=new ae;return e.ja=t.ja,e.ka=t.ka,e.ma=t.ma,e.ec=t.ec,e.Lb=t.Lb,e.xb=t.xb,e.pa=t.pa,e.bc=t.bc,e.Tb=t.Tb,e.vb=t.vb,e.g=t.g,e}function de(t,e){var n=ce(t);return n.g=e,n}function ee(t){var e={};if(t.ma&&(e.sp=t.ec,t.Lb&&(e.sn=t.xb)),t.pa&&(e.ep=t.bc,t.Tb&&(e.en=t.vb)),t.ja){e.l=t.ka;var n=t.Nb;""===n&&(n=rd(t)?"l":"r"),e.vf=n}return t.g!==N&&(e.i=t.g.toString()),e}function S(t){return!(t.ma||t.pa||t.ja)}function fe(t){return S(t)&&t.g==N}function ge(t){var e={};if(fe(t))return e;var n;return t.g===N?n="$priority":t.g===$d?n="$value":t.g===Qd?n="$key":(K(t.g instanceof Ud,"Unrecognized index type!"),n=t.g.toString()),e.orderBy=B(n),t.ma&&(e.startAt=B(t.ec),t.Lb&&(e.startAt+=","+B(t.xb))),t.pa&&(e.endAt=B(t.bc),t.Tb&&(e.endAt+=","+B(t.vb))),t.ja&&(rd(t)?e.limitToFirst=t.ka:e.limitToLast=t.ka),e}function he(t,e){this.Bd=t,this.dc=e}function ie(t,e,n){var i=na(t.Bd,function(i,r){var o=w(t.dc,r);if(K(o,"Missing index implementation for "+r),i===Sd){if(o.Ic(e.S)){for(var a=[],s=n.Xb(Tb),u=J(s);u;)u.name!=e.name&&a.push(u),u=J(s);return a.push(e),je(a,td(o))}return Sd}return o=n.get(e.name),a=i,o&&(a=a.remove(new F(e.name,o))),a.Oa(e,e.S)});return new he(i,t.dc)}function ke(t,e,n){var i=na(t.Bd,function(t){if(t===Sd)return t;var i=n.get(e.name);return i?t.remove(new F(e.name,i)):t});return new he(i,t.dc)}function tc(t,e){this.B=t,K(n(this.B)&&null!==this.B,"LeafNode shouldn't be created with null/undefined value."),this.aa=e||C,me(this.aa),this.Cb=null}function R(t,e,n){this.m=t,(this.aa=e)&&me(this.aa),t.e()&&K(!this.aa||this.aa.e(),"An empty node cannot have a priority"),this.wb=n,this.Cb=null}function ud(t,e){var n;return n=(n=qe(t,e))?(n=n.Sc())&&n.name:t.m.Sc(),n?new F(n,t.m.get(n)):null}function vd(t,e){var n;return n=(n=qe(t,e))?(n=n.fc())&&n.name:t.m.fc(),n?new F(n,t.m.get(n)):null}function qe(t,e){return e===Qd?null:t.wb.get(e.toString())}function M(t,e){if(null===t)return C;var n=null;if("object"==typeof t&&".priority"in t?n=t[".priority"]:"undefined"!=typeof e&&(n=e),K(null===n||"string"==typeof n||"number"==typeof n||"object"==typeof n&&".sv"in n,"Invalid priority type found: "+typeof n),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new tc(t,M(n));if(t instanceof Array){var i=C,o=t;return r(o,function(t,e){if(v(o,e)&&"."!==e.substring(0,1)){var n=M(t);(n.K()||!n.e())&&(i=i.U(e,n))}}),i.ga(M(n))}var a=[],s=!1,u=t;if(ib(u,function(t){if("string"!=typeof t||"."!==t.substring(0,1)){var e=M(u[t]);e.e()||(s=s||!e.C().e(),a.push(new F(t,e)))}}),0==a.length)return C;var l=je(a,Ub,function(t){return t.name},Wb);if(s){var c=je(a,td(N));return new R(l,M(n),new he({".priority":c},{".priority":N}))}return new R(l,M(n),le)}function se(t){this.count=parseInt(Math.log(t+1)/re,10),this.jf=this.count-1,this.eg=t+1&parseInt(Array(this.count+1).join("1"),2)}function te(t){var e=!(t.eg&1<<t.jf);return t.jf--,e}function je(t,e,n,i){function r(e,i){var o=i-e;if(0==o)return null;if(1==o){var a=t[e],s=n?n(a):a;return new fc(s,a.S,!1,null,null)}var a=parseInt(o/2,10)+e,o=r(e,a),u=r(a+1,i),a=t[a],s=n?n(a):a;return new fc(s,a.S,!1,o,u)}t.sort(e);var o=function(e){function i(e,i){var u=s-e,l=s;s-=e;var l=r(u+1,l),u=t[u],c=n?n(u):u,l=new fc(c,u.S,i,null,l);o?o.left=l:a=l,o=l}for(var o=null,a=null,s=t.length,u=0;u<e.count;++u){var l=te(e),c=Math.pow(2,e.count-(u+1));l?i(c,!1):(i(c,!1),i(c,!0))}return a}(new se(t.length));return null!==o?new ac(i||e,o):new ac(i||e)}function oe(t){return"number"==typeof t?"number:"+Xc(t):"string:"+t}function me(t){if(t.K()){var e=t.I();K("string"==typeof e||"number"==typeof e||"object"==typeof e&&v(e,".sv"),"Priority must be a string or number.")}else K(t===Vd||t.e(),"priority of unexpected type.");K(t===Vd||t.C().e(),"Priority nodes can't have a priority of their own.")}function ue(){R.call(this,new ac(Wb),C,le)}function Id(t,e){this.O=t,this.Yd=e}function Fd(t,e,n,i){return new Id(new tb(e,n,i),t.Yd)}function Jd(t){return t.O.ea?t.O.j():null}function ub(t){return t.Yd.ea?t.Yd.j():null}function ve(t,e){this.W=t;var n=t.n,i=new kd(n.g),n=S(n)?new kd(n.g):n.ja?new qd(n):new ld(n);this.Hf=new xd(n);var r=e.w(),o=e.O,a=i.xa(C,r.j(),null),s=n.xa(C,o.j(),null);this.Ka=new Id(new tb(s,o.ea,n.Na()),new tb(a,r.ea,i.Na())),this.Xa=[],this.lg=new cd(t)}function we(t){return t.W}function ye(t,e){var n=t.Ka.O,i=[];return n.j().K()||n.j().P(N,function(t,e){i.push(new D("child_added",e,t))}),n.ea&&i.push(Eb(n.j())),xe(t,i,n.j(),e)}function xe(t,e,n,i){return dd(t.lg,e,n,i?[i]:t.Xa)}function ze(t,e,n){this.type=Bd,this.source=t,this.path=e,this.children=n}function Ae(t,e){this.f=Mc("p:rest:"),this.F=t,this.Gb=e,this.Aa=null,this.$={}}function Be(t,e){return n(e)?"tag$"+e:(K(fe(t.n),"should have a tag if it's not a default query."),t.path.toString())}function Ce(t,e,n,i){n=n||{},n.format="export",t.Aa&&(n.auth=t.Aa);var r=(t.F.kb?"https://":"http://")+t.F.host+e+"?"+kb(n);t.f("Sending REST request for "+r);var o=new XMLHttpRequest;o.onreadystatechange=function(){if(i&&4===o.readyState){t.f("REST Response for "+r+" received. status:",o.status,"response:",o.responseText);var e=null;if(200<=o.status&&300>o.status){try{e=nb(o.responseText)}catch(n){O("Failed to parse JSON response for "+r+": "+o.responseText)}i(null,e)}else 401!==o.status&&404!==o.status&&O("Got unsuccessful REST response for "+r+" Status: "+o.status),i(o.status);i=null}},o.open("GET",r,!0),o.send()}function De(t){K(ea(t)&&0<t.length,"Requires a non-empty array"),this.Xf=t,this.Oc={}}function Ee(t,e){K(Ta(t.Xf,function(t){return t===e}),"Unknown event: "+e)}function Ge(){if(De.call(this,["online"]),this.kc=!0,"undefined"!=typeof window&&"undefined"!=typeof window.addEventListener){var t=this;window.addEventListener("online",function(){t.kc||(t.kc=!0,t.fe("online",!0))},!1),window.addEventListener("offline",function(){t.kc&&(t.kc=!1,t.fe("online",!1))},!1)}}function He(){De.call(this,["visible"]);var t,e;if("undefined"!=typeof document&&"undefined"!=typeof document.addEventListener&&("undefined"!=typeof document.hidden?(e="visibilitychange",t="hidden"):"undefined"!=typeof document.mozHidden?(e="mozvisibilitychange",t="mozHidden"):"undefined"!=typeof document.msHidden?(e="msvisibilitychange",t="msHidden"):"undefined"!=typeof document.webkitHidden&&(e="webkitvisibilitychange",t="webkitHidden")),this.Ob=!0,e){var n=this;document.addEventListener(e,function(){var e=!document[t];e!==n.Ob&&(n.Ob=e,n.fe("visible",e))},!1)}}function L(t,e){if(1==arguments.length){this.o=t.split("/");for(var n=0,i=0;i<this.o.length;i++)0<this.o[i].length&&(this.o[n]=this.o[i],n++);this.o.length=n,this.Z=0}else this.o=t,this.Z=e}function T(t,e){var n=E(t);if(null===n)return e;if(n===E(e))return T(H(t),H(e));throw Error("INTERNAL ERROR: innerPath ("+e+") is not within outerPath ("+t+")")}function Ie(t,e){for(var n=t.slice(),i=e.slice(),r=0;r<n.length&&r<i.length;r++){var o=Vb(n[r],i[r]);if(0!==o)return o}return n.length===i.length?0:n.length<i.length?-1:1}function E(t){return t.Z>=t.o.length?null:t.o[t.Z]}function Kd(t){return t.o.length-t.Z}function H(t){var e=t.Z;return e<t.o.length&&e++,new L(t.o,e)}function Ld(t){return t.Z<t.o.length?t.o[t.o.length-1]:null}function Je(t,e){this.Qa=t.slice(),this.Ha=Math.max(1,this.Qa.length),this.lf=e;for(var n=0;n<this.Qa.length;n++)this.Ha+=Zc(this.Qa[n]);Ke(this)}function Ke(t){if(768<t.Ha)throw Error(t.lf+"has a key path longer than 768 bytes ("+t.Ha+").");if(32<t.Qa.length)throw Error(t.lf+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Le(t))}function Le(t){return 0==t.Qa.length?"":"in property '"+t.Qa.join(".")+"'"}function Me(t,e){this.value=t,this.children=e||Ne}function Oe(t){var e=Pd;return r(t,function(t,n){e=e.set(new L(n),t)}),e}function Pe(t,e,n){if(null!=t.value&&n(t.value))return{path:G,value:t.value};if(e.e())return null;var i=E(e);return t=t.children.get(i),null!==t?(e=Pe(t,H(e),n),null!=e?{path:new L(i).u(e.path),value:e.value}:null):null}function Qe(t,e){return Pe(t,e,function(){return!0})}function Od(t,e,n){if(e.e())return n;var i=E(e);return e=Od(t.children.get(i)||Pd,H(e),n),i=e.e()?t.children.remove(i):t.children.Oa(i,e),new Me(t.value,i)}function Re(t,e){return Se(t,G,e)}function Se(t,e,n){var i={};return t.children.ia(function(t,r){i[t]=Se(r,e.u(t),n)}),n(e,t.value,i)}function Te(t,e,n){return Ue(t,e,G,n)}function Ue(t,e,n,i){var r=t.value?i(n,t.value):!1;return r?r:e.e()?null:(r=E(e),(t=t.children.get(r))?Ue(t,H(e),n.u(r),i):null)}function Ve(t,e,n){var i=G;if(!e.e()){var r=!0;t.value&&(r=n(i,t.value)),!0===r&&(r=E(e),(t=t.children.get(r))&&We(t,H(e),i.u(r),n))}}function We(t,e,n,i){if(e.e())return t;t.value&&i(n,t.value);var r=E(e);return(t=t.children.get(r))?We(t,H(e),n.u(r),i):Pd}function Md(t,e){Xe(t,G,e)}function Xe(t,e,n){t.children.ia(function(t,i){Xe(i,e.u(t),n)}),t.value&&n(e,t.value)}function Ye(t,e){t.children.ia(function(t,n){n.value&&e(t,n.value)})}function Ze(t,e,n){this.type=Ed,this.source=$e,this.path=t,this.Qb=e,this.Vd=n}function af(t,e,n,i){this.we=t,this.pf=e,this.Hb=n,this.af=i,K(!i||e,"Tagged queries must be from server.")}function cf(t){this.X=t}function ef(t,e,n){if(e.e())return new cf(new Me(n));var i=Qe(t.X,e);if(null!=i){var r=i.path,i=i.value;return e=T(r,e),i=i.G(e,n),new cf(t.X.set(r,i))}return t=Od(t.X,e,new Me(n)),new cf(t)}function ff(t,e,n){var i=t;return ib(n,function(t,n){i=ef(i,e.u(t),n)}),i}function gf(t,e){var n=Qe(t.X,e);return null!=n?t.X.get(n.path).Q(T(n.path,e)):null}function hf(t){var e=[],n=t.X.value;return null!=n?n.K()||n.P(N,function(t,n){e.push(new F(t,n))}):t.X.children.ia(function(t,n){null!=n.value&&e.push(new F(t,n.value))}),e}function jf(t,e){if(e.e())return t;var n=gf(t,e);return new cf(null!=n?new Me(n):t.X.subtree(e))}function kf(t,e,n){if(null!=e.value)return n.G(t,e.value);var i=null;return e.children.ia(function(e,r){".priority"===e?(K(null!==r.value,"Priority writes must always be leaf nodes"),i=r.value):n=kf(t.u(e),r,n)}),n.Q(t).e()||null===i||(n=n.G(t.u(".priority"),i)),n}function lf(){this.T=df,this.na=[],this.Mc=-1}function mf(t,e){for(var n=0;n<t.na.length;n++){var i=t.na[n];if(i.kd===e)return i}return null}function nf(t,e){return t.Ga?t.path.contains(e):!!ua(t.children,function(n,i){return t.path.u(i).contains(e)})}function pf(t){return t.visible}function of(t,e,n){for(var i=df,r=0;r<t.length;++r){var o=t[r];if(e(o)){var a=o.path;if(o.Ga)n.contains(a)?(a=T(n,a),i=ef(i,a,o.Ga)):a.contains(n)&&(a=T(a,n),i=ef(i,G,o.Ga.Q(a)));else{if(!o.children)throw Fc("WriteRecord should have .snap or .children");n.contains(a)?(a=T(n,a),i=ff(i,a,o.children)):a.contains(n)&&(a=T(a,n),a.e()?i=ff(i,G,o.children):(o=w(o.children,E(a)))&&(o=o.Q(H(a)),i=ef(i,G,o)))}}}return i}function qf(t,e){this.Mb=t,this.X=e}function rf(){this.ya={}}function tf(t){return Pa(ra(t.ya),function(t){return!S(t.W.n)})}function uf(t,e){if(S(e.n))return sf(t);var n=e.va();return w(t.ya,n)}function sf(t){return va(t.ya,function(t){return S(t.W.n)})||null}function vf(t){this.ta=Pd,this.ib=new lf,this.$e={},this.mc={},this.Nc=t}function wf(t,e,i,r,o){var a=t.ib,s=o;return K(r>a.Mc,"Stacking an older write on top of newer ones"),n(s)||(s=!0),a.na.push({path:e,Ga:i,kd:r,visible:s}),s&&(a.T=ef(a.T,e,i)),a.Mc=r,o?xf(t,new Xb($e,e,i)):[]}function yf(t,e,n,i){var r=t.ib;return K(i>r.Mc,"Stacking an older merge on top of newer ones"),r.na.push({path:e,children:n,kd:i,visible:!0}),r.T=ff(r.T,e,n),r.Mc=i,n=Oe(n),xf(t,new ze($e,e,n))}function zf(t,e,n){n=n||!1;var i=mf(t.ib,e);if(t.ib.Rd(e)){var r=Pd;return null!=i.Ga?r=r.set(G,!0):ib(i.children,function(t,e){r=r.set(new L(t),e)}),xf(t,new Ze(i.path,r,n))}return[]}function Af(t,e,n){return n=Oe(n),xf(t,new ze(bf,e,n))}function Bf(t,e,n,i){if(i=Cf(t,i),null!=i){var r=Df(i);return i=r.path,r=r.Hb,e=T(i,e),n=new Xb(new af(!1,!0,r,!0),e,n),Ef(t,i,n)}return[]}function Ff(t,e,n,i){if(i=Cf(t,i)){var r=Df(i);return i=r.path,r=r.Hb,e=T(i,e),n=Oe(n),n=new ze(new af(!1,!0,r,!0),e,n),Ef(t,i,n)}return[]}function Jf(t){return Re(t,function(t,e,n){if(e&&null!=sf(e))return[sf(e)];var i=[];return e&&(i=tf(e)),r(n,function(t){i=i.concat(t)}),i})}function Nf(t,e){for(var n=0;n<e.length;++n){var i=e[n];if(!S(i.n)){var i=Gf(i),r=t.mc[i];delete t.mc[i],delete t.$e["_"+r]}}}function Lf(t){return S(t.n)&&!fe(t.n)?t.Ib():t}function If(t,e,n){var i=e.path,o=Mf(t,e);if(n=Kf(t,n),e=t.Nc.Xe(Lf(e),o,n.xd,n.H),i=t.ta.subtree(i),o)K(null==sf(i.value),"If we're adding a query, it shouldn't be shadowed");else for(o=Re(i,function(t,e,n){if(!t.e()&&e&&null!=sf(e))return[we(sf(e))];var i=[];return e&&(i=i.concat(Qa(tf(e),function(t){return t.W}))),r(n,function(t){i=i.concat(t)}),i}),i=0;i<o.length;++i)n=o[i],t.Nc.ae(Lf(n),Mf(t,n));return e}function Kf(t,e){var n=e.W,i=Mf(t,n);return{xd:function(){return(e.w()||C).hash()},H:function(e){if("ok"===e){if(i){var r=n.path;if(e=Cf(t,i)){var o=Df(e);e=o.path,o=o.Hb,r=T(e,r),r=new Zb(new af(!1,!0,o,!0),r),e=Ef(t,e,r)}else e=[]}else e=xf(t,new Zb(bf,n.path));return e}return r="Unknown Error","too_big"===e?r="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==e?r="Client doesn't have permission to access the desired data.":"unavailable"==e&&(r="The service is unavailable"),r=Error(e+": "+r),r.code=e.toUpperCase(),t.jb(n,null,r)}}}function Gf(t){return t.path.toString()+"$"+t.va()}function Df(t){var e=t.indexOf("$");return K(-1!==e&&e<t.length-1,"Bad queryKey."),{Hb:t.substr(e+1),path:new L(t.substr(0,e))}}function Cf(t,e){var n=t.$e,i="_"+e;return i in n?n[i]:void 0}function Mf(t,e){var n=Gf(e);return w(t.mc,n)}function Ef(t,e,n){var i=t.ta.get(e);return K(i,"Missing sync point for query tag that we're tracking"),i.ab(n,new qf(e,t.ib),null)}function xf(t,e){return Of(t,e,t.ta,null,new qf(G,t.ib))}function Of(t,e,n,i,r){if(e.path.e())return Pf(t,e,n,i,r);var o=n.get(G);null==i&&null!=o&&(i=o.fb(G));var a=[],s=E(e.path),u=e.Xc(s);if((n=n.children.get(s))&&u)var l=i?i.R(s):null,s=r.u(s),a=a.concat(Of(t,u,n,l,s));return o&&(a=a.concat(o.ab(e,r,i))),a}function Pf(t,e,n,i,r){var o=n.get(G);null==i&&null!=o&&(i=o.fb(G));var a=[];return n.children.ia(function(n,o){var s=i?i.R(n):null,u=r.u(n),l=e.Xc(n);l&&(a=a.concat(Pf(t,l,o,s,u)))}),o&&(a=a.concat(o.ab(e,r,i))),a}function Qf(){this.children={},this.nd=0,this.value=null}function Rf(t,e,n){this.Gd=t?t:"",this.Zc=e?e:null,this.A=n?n:new Qf}function Sf(t,e){for(var n,i=e instanceof L?e:new L(e),r=t;null!==(n=E(i));)r=new Rf(n,r,w(r.A.children,n)||new Qf),i=H(i);return r}function Tf(t,e){K("undefined"!=typeof e,"Cannot set value to undefined"),t.A.value=e,Uf(t)}function Vf(t,e,n,i){n&&!i&&e(t),t.P(function(t){Vf(t,e,!0,i)}),n&&i&&e(t)}function Wf(t,e){for(var n=t.parent();null!==n&&!e(n);)n=n.parent()}function Uf(t){if(null!==t.Zc){var e=t.Zc,n=t.Gd,i=t.e(),r=v(e.A.children,n);i&&r?(delete e.A.children[n],e.A.nd--,Uf(e)):i||r||(e.A.children[n]=t.A,e.A.nd++,Uf(e))}}function $f(t){return p(t)&&0!==t.length&&!Xf.test(t)}function ag(t){return null===t||p(t)||ga(t)&&!Qc(t)||ia(t)&&v(t,".sv")}function bg(t,e,i,r){r&&!n(e)||cg(y(t,1,r),e,i)}function cg(t,e,i){if(i instanceof L&&(i=new Je(i,t)),!n(e))throw Error(t+"contains undefined "+Le(i));if(ha(e))throw Error(t+"contains a function "+Le(i)+" with contents: "+e.toString());if(Qc(e))throw Error(t+"contains "+e.toString()+" "+Le(i));if(p(e)&&e.length>10485760/3&&10485760<Zc(e))throw Error(t+"contains a string greater than 10485760 utf8 bytes "+Le(i)+" ('"+e.substring(0,50)+"...')");if(ia(e)){var r=!1,o=!1;if(ib(e,function(e,n){if(".value"===e)r=!0;else if(".priority"!==e&&".sv"!==e&&(o=!0,!$f(e)))throw Error(t+" contains an invalid key ("+e+") "+Le(i)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');i.push(e),cg(t,n,i),i.pop()}),r&&o)throw Error(t+' contains ".value" child '+Le(i)+" in addition to actual children.")}}function dg(t,e){var n,i;for(n=0;n<e.length;n++){i=e[n];for(var r=i.slice(),o=0;o<r.length;o++)if((".priority"!==r[o]||o!==r.length-1)&&!$f(r[o]))throw Error(t+"contains an invalid key ("+r[o]+") in path "+i.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"')}for(e.sort(Ie),r=null,n=0;n<e.length;n++){if(i=e[n],null!==r&&r.contains(i))throw Error(t+"contains a path "+r.toString()+" that is ancestor of another path "+i.toString());r=i}}function eg(t,e,n){var i=y(t,1,!1);if(!ia(e)||ea(e))throw Error(i+" must be an object containing the children to replace.");var r=[];ib(e,function(t,e){var o=new L(t);if(cg(i,e,n.u(o)),".priority"===Ld(o)&&!ag(e))throw Error(i+"contains an invalid value for '"+o.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");r.push(o)}),dg(i,r)}function fg(t,e,n){if(Qc(n))throw Error(y(t,e,!1)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ag(n))throw Error(y(t,e,!1)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}function gg(t,e,i){if(!i||n(e))switch(e){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw Error(y(t,1,i)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".')}}function hg(t,e){if(n(e)&&!$f(e))throw Error(y(t,2,!0)+'was an invalid key: "'+e+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')}function ig(t,e){if(!p(e)||0===e.length||Yf.test(e))throw Error(y(t,1,!1)+'was an invalid path: "'+e+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')}function jg(t,e){if(".info"===E(e))throw Error(t+" failed: Can't modify data under /.info/")}function kg(t,e){if(!p(e))throw Error(y(t,1,!1)+"must be a valid credential (a string).")}function lg(t,e,n){if(!p(n))throw Error(y(t,e,!1)+"must be a valid string.")}function mg(t,e){if(lg(t,1,e),!Zf.test(e))throw Error(y(t,1,!1)+"'"+e+"' is not a valid authentication provider.")}function ng(t,e,i,r){if((!r||n(i))&&(!ia(i)||null===i))throw Error(y(t,e,r)+"must be a valid object.")}function og(t,e,n){if(!ia(e)||!v(e,n))throw Error(y(t,1,!1)+'must contain the key "'+n+'"');if(!p(w(e,n)))throw Error(y(t,1,!1)+'must contain the key "'+n+'" with type "string"')}function pg(){this.set={}}function qg(t,e){r(t.set,function(t,n){e(n,t)})}function qc(){this.m=this.B=null}function rg(t,e){if(e.e())return t.B=null,t.m=null,!0;if(null!==t.B){if(t.B.K())return!1;var n=t.B;return t.B=null,n.P(N,function(e,n){t.nc(new L(e),n)}),rg(t,e)}return null!==t.m?(n=E(e),e=H(e),t.m.contains(n)&&rg(t.m.get(n),e)&&t.m.remove(n),t.m.e()?(t.m=null,!0):!1):!0}function rc(t,e,n){null!==t.B?n(e,t.B):t.P(function(t,i){var r=new L(e.toString()+"/"+t);rc(i,r,n)})}function tg(t,e,n){this.od=t||{},this.ee=e||{},this.$a=n||{},this.od.remember||(this.od.remember="default")}function vg(t){var e={},n={};return ib(t||{},function(t,i){0<=Na(ug,t)?e[t]=i:n[t]=i}),new tg(e,{},n)}function wg(t,e){this.Qe=["session",t.Od,t.hc].join(":"),this.be=e}function xg(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function yg(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(xg())}function zg(){return"undefined"!=typeof location&&/^file:\//.test(location.href)}function Ag(t){var e=xg();if(""===e)return!1;if("Microsoft Internet Explorer"===navigator.appName){if((e=e.match(/MSIE ([0-9]{1,}[\.0-9]{0,})/))&&1<e.length)return parseFloat(e[1])>=t}else if(-1<e.indexOf("Trident")&&(e=e.match(/rv:([0-9]{2,2}[\.0-9]{0,})/))&&1<e.length)return parseFloat(e[1])>=t;return!1}function Bg(){var t,e=window.opener.frames;for(t=e.length-1;t>=0;t--)try{if(e[t].location.protocol===window.location.protocol&&e[t].location.host===window.location.host&&"__winchan_relay_frame"===e[t].name)return e[t]}catch(n){}return null}function Cg(t,e,n){t.attachEvent?t.attachEvent("on"+e,n):t.addEventListener&&t.addEventListener(e,n,!1)}function Dg(t,e,n){t.detachEvent?t.detachEvent("on"+e,n):t.removeEventListener&&t.removeEventListener(e,n,!1)}function Eg(t){/^https?:\/\//.test(t)||(t=window.location.href);var e=/^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(t);return e?e[1]:t}function Fg(t){var e="";try{t=t.replace("#","");var n=lb(t);n&&v(n,"__firebase_request_key")&&(e=w(n,"__firebase_request_key"))}catch(i){}return e}function Gg(){var t=Pc(sg);return t.scheme+"://"+t.host+"/v2"}function Hg(t){return Gg()+"/"+t+"/auth/channel"}function Ig(t){var e=this;if(this.Ac=t,this.ce="*",Ag(8)?this.Rc=this.zd=Bg():(this.Rc=window.opener,this.zd=window),!e.Rc)throw"Unable to find relay frame";Cg(this.zd,"message",q(this.jc,this)),Cg(this.zd,"message",q(this.Bf,this));try{Jg(this,{a:"ready"})}catch(n){Cg(this.Rc,"load",function(){Jg(e,{a:"ready"})})}Cg(window,"unload",q(this.Bg,this))}function Jg(t,e){e=B(e),Ag(8)?t.Rc.doPost(e,t.ce):t.Rc.postMessage(e,t.ce)}function Kg(t){this.pc=Ga()+Ga()+Ga(),this.Ef=t}function Mg(t){var e=Error(w(Lg,t),t);return e.code=t,e}function Ng(t){var e;(e=!t.window_features)||(e=xg(),e=-1!==e.indexOf("Fennec/")||-1!==e.indexOf("Firefox/")&&-1!==e.indexOf("Android")),e&&(t.window_features=void 0),t.window_name||(t.window_name="_blank"),this.options=t}function Og(t){t.method||(t.method="GET"),t.headers||(t.headers={}),t.headers.content_type||(t.headers.content_type="application/json"),t.headers.content_type=t.headers.content_type.toLowerCase(),this.options=t}function Pg(t){this.pc=Ga()+Ga()+Ga(),this.Ef=t}function Qg(t){t.callback_parameter||(t.callback_parameter="callback"),this.options=t,window.__firebase_auth_jsonp=window.__firebase_auth_jsonp||{}}function Rg(t,e,n){setTimeout(function(){try{var i=document.createElement("script");i.type="text/javascript",i.id=t,i.async=!0,i.src=e,i.onerror=function(){var e=document.getElementById(t);null!==e&&e.parentNode.removeChild(e),n&&n(Mg("NETWORK_ERROR"))};var r=document.getElementsByTagName("head");(r&&0!=r.length?r[0]:document.documentElement).appendChild(i)}catch(o){n&&n(Mg("NETWORK_ERROR"))}},0)}function Sg(t,e,n,i){De.call(this,["auth_status"]),this.F=t,this.df=e,this.Vg=n,this.Le=i,this.sc=new wg(t,[xc,yc]),this.mb=null,this.Se=!1,Tg(this)}function Tg(t){yc.get("redirect_request_id")&&Ug(t);var e=t.sc.get();e&&e.token?(Vg(t,e),t.df(e.token,function(n,i){Wg(t,n,i,!1,e.token,e)},function(e,n){Xg(t,"resumeSession()",e,n)})):Vg(t,null)}function Yg(t,e,n,i,r,o){"firebaseio-demo.com"===t.F.domain&&O("Firebase authentication is not supported on demo Firebases (*.firebaseio-demo.com). To secure your Firebase, create a production Firebase at https://www.firebase.com."),t.df(e,function(o,a){Wg(t,o,a,!0,e,n,i||{},r)},function(e,n){Xg(t,"auth()",e,n,o)})}function Zg(t,e){t.sc.clear(),Vg(t,null),t.Vg(function(t,n){if("ok"===t)P(e,null);else{var i=(t||"error").toUpperCase(),r=i;n&&(r+=": "+n),r=Error(r),r.code=i,P(e,r)}})}function Wg(t,e,n,i,r,o,a,s){"ok"===e?(i&&(e=n.auth,o.auth=e,o.expires=n.expires,o.token=bd(r)?r:"",n=null,e&&v(e,"uid")?n=w(e,"uid"):v(o,"uid")&&(n=w(o,"uid")),o.uid=n,n="custom",e&&v(e,"provider")?n=w(e,"provider"):v(o,"provider")&&(n=w(o,"provider")),o.provider=n,t.sc.clear(),bd(r)&&(a=a||{},n=xc,"sessionOnly"===a.remember&&(n=yc),"none"!==a.remember&&t.sc.set(o,n)),Vg(t,o)),P(s,null,o)):(t.sc.clear(),Vg(t,null),o=t=(e||"error").toUpperCase(),n&&(o+=": "+n),o=Error(o),o.code=t,P(s,o))}function Xg(t,e,n,i,r){O(e+" was canceled: "+i),t.sc.clear(),Vg(t,null),t=Error(i),t.code=n.toUpperCase(),P(r,t)}function $g(t,e,n,i,r){ah(t),n=new tg(i||{},{},n||{}),bh(t,[Og,Qg],"/auth/"+e,n,r)}function ch(t,e,n,i){ah(t);var r=[Ng,Pg];n=vg(n),"anonymous"===e||"password"===e?setTimeout(function(){P(i,Mg("TRANSPORT_UNAVAILABLE"))},0):(n.ee.window_features="menubar=yes,modal=yes,alwaysRaised=yeslocation=yes,resizable=yes,scrollbars=yes,status=yes,height=625,width=625,top="+("object"==typeof screen?.5*(screen.height-625):0)+",left="+("object"==typeof screen?.5*(screen.width-625):0),n.ee.relay_url=Hg(t.F.hc),n.ee.requestWithCredential=q(t.qc,t),bh(t,r,"/auth/"+e,n,i))}function Ug(t){var e=yc.get("redirect_request_id");if(e){var n=yc.get("redirect_client_options");yc.remove("redirect_request_id"),yc.remove("redirect_client_options");var i=[Og,Qg],e={requestId:e,requestKey:Fg(document.location.hash)},n=new tg(n,{},e);t.Se=!0;try{document.location.hash=document.location.hash.replace(/&__firebase_request_key=([a-zA-z0-9]*)/,"")}catch(r){}bh(t,i,"/auth/session",n,function(){this.Se=!1}.bind(t))}}function bh(t,e,n,i,r){dh(t,e,n,i,function(e,n){!e&&n&&n.token&&n.uid?Yg(t,n.token,n,i.od,function(t,e){t?P(r,t):P(r,null,e)}):P(r,e||Mg("UNKNOWN_ERROR"))})}function dh(t,e,n,i,r){e=Pa(e,function(t){return"function"==typeof t.isAvailable&&t.isAvailable()}),0===e.length?setTimeout(function(){P(r,Mg("TRANSPORT_UNAVAILABLE"))},0):(e=new(e.shift())(i.ee),i=jb(i.$a),i.v="js-"+hb,i.transport=e.Cc(),i.suppress_status_codes=!0,t=Gg()+"/"+t.F.hc+n,e.open(t,i,function(t,e){if(t)P(r,t);else if(e&&e.error){var n=Error(e.error.message);n.code=e.error.code,n.details=e.error.details,P(r,n)}else P(r,null,e)}))}function Vg(t,e){var n=null!==t.mb||null!==e;t.mb=e,n&&t.fe("auth_status",e),t.Le(null!==e)}function ah(t){var e=t.F;if("firebaseio.com"!==e.domain&&"firebaseio-demo.com"!==e.domain&&"auth.firebase.com"===sg)throw Error("This custom Firebase server ('"+t.F.domain+"') does not support delegated login.")}function eh(t){this.jc=t,this.Nd=[],this.Sb=0,this.qe=-1,this.Fb=null}function fh(t,e,n){t.qe=e,t.Fb=n,t.qe<t.Sb&&(t.Fb(),t.Fb=null)}function gh(t,e,n){for(t.Nd[e]=n;t.Nd[t.Sb];){var i=t.Nd[t.Sb];delete t.Nd[t.Sb];for(var r=0;r<i.length;++r)if(i[r]){var o=t;Db(function(){o.jc(i[r])})}if(t.Sb===t.qe){t.Fb&&(clearTimeout(t.Fb),t.Fb(),t.Fb=null);break}t.Sb++}}function hh(t,e,n,i){this.re=t,this.f=Mc(t),this.nb=this.ob=0,this.Ua=Rb(e),this.Qf=n,this.Hc=!1,this.Bb=i,this.jd=function(t){return Bc(e,Dc,t)}}function lh(t,e){var n=B(e).length;t.nb+=n,Ob(t.Ua,"bytes_received",n)}function kh(t,e,n,i){if(this.jd=i,this.hb=n,this.Pe=new pg,this.ad=[],this.te=Math.floor(1e8*Math.random()),this.Xd=!0,this.he=Ec(),window["pLPCommand"+this.he]=t,window["pRTLPCB"+this.he]=e,t=document.createElement("iframe"),t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||Cb("No IE domain setting required")}catch(r){t.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}t.contentDocument?t.eb=t.contentDocument:t.contentWindow?t.eb=t.contentWindow.document:t.document&&(t.eb=t.document),this.Ea=t,t="",this.Ea.src&&"javascript:"===this.Ea.src.substr(0,11)&&(t='<script>document.domain="'+document.domain+'";</script>'),t="<html><body>"+t+"</body></html>";try{this.Ea.eb.open(),this.Ea.eb.write(t),this.Ea.eb.close()}catch(o){Cb("frame writing exception"),o.stack&&Cb(o.stack),Cb(o)}}function nh(t){if(t.le&&t.Xd&&t.Pe.count()<(0<t.ad.length?2:1)){t.te++;var e={};e.id=t.ug,e.pw=t.vg,e.ser=t.te;for(var e=t.jd(e),n="",i=0;0<t.ad.length&&1870>=t.ad[0].kf.length+30+n.length;){var r=t.ad.shift(),n=n+"&seg"+i+"="+r.Mg+"&ts"+i+"="+r.Ug+"&d"+i+"="+r.kf;i++}return oh(t,e+n,t.te),!0}return!1}function oh(t,e,n){function i(){t.Pe.remove(n),nh(t)}t.Pe.add(n,1);var r=setTimeout(i,Math.floor(25e3));mh(t,e,function(){clearTimeout(r),i()})}function mh(t,e,n){setTimeout(function(){try{if(t.Xd){var i=t.Ea.eb.createElement("script");i.type="text/javascript",i.async=!0,i.src=e,i.onload=i.onreadystatechange=function(){var t=i.readyState;t&&"loaded"!==t&&"complete"!==t||(i.onload=i.onreadystatechange=null,i.parentNode&&i.parentNode.removeChild(i),n())},i.onerror=function(){Cb("Long-poll script failed to load: "+e),t.Xd=!1,t.close()},t.Ea.eb.body.appendChild(i)}}catch(r){}},Math.floor(1))}function qh(t,e,n,i){this.re=t,this.f=Mc(this.re),this.frames=this.Kc=null,this.nb=this.ob=this.bf=0,this.Ua=Rb(e),t={v:"5"},"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f"),n&&(t.s=n),i&&(t.ls=i),this.ef=Bc(e,Cc,t)}function th(t,e){if(t.frames.push(e),t.frames.length==t.bf){var n=t.frames.join("");t.frames=null,n=nb(n),t.zg(n)}}function sh(t){clearInterval(t.Kc),t.Kc=setInterval(function(){t.ua&&t.ua.send("0"),sh(t)},Math.floor(45e3))}function uh(t){vh(this,t)}function vh(t,e){var n=qh&&qh.isAvailable(),i=n&&!(xc.wf||!0===xc.get("previous_websocket_failure"));if(e.Wg&&(n||O("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),i=!0),i)t.gd=[qh];else{var r=t.gd=[];Wc(wh,function(t,e){e&&e.isAvailable()&&r.push(e)})}}function xh(t){if(0<t.gd.length)return t.gd[0];throw Error("No transports available")}function yh(t,e,n,i,r,o,a){this.id=t,this.f=Mc("c:"+this.id+":"),this.jc=n,this.Wc=i,this.la=r,this.Ne=o,this.F=e,this.Md=[],this.ff=0,this.Pf=new uh(e),this.Ta=0,this.Bb=a,this.f("Connection created"),zh(this)}function zh(t){var e=xh(t.Pf);t.J=new e("c:"+t.id+":"+t.ff++,t.F,void 0,t.Bb),t.Re=e.responsesRequiredToBeHealthy||0;var n=Ah(t,t.J),i=Bh(t,t.J);t.hd=t.J,t.cd=t.J,t.D=null,t.Ab=!1,setTimeout(function(){t.J&&t.J.open(n,i)},Math.floor(0)),e=e.healthyTimeout||0,e>0&&(t.yd=setTimeout(function(){t.yd=null,
t.Ab||(t.J&&102400<t.J.nb?(t.f("Connection exceeded healthy timeout but has received "+t.J.nb+" bytes.  Marking connection healthy."),t.Ab=!0,t.J.Ed()):t.J&&10240<t.J.ob?t.f("Connection exceeded healthy timeout but has sent "+t.J.ob+" bytes.  Leaving connection alive."):(t.f("Closing unhealthy connection after timeout."),t.close()))},Math.floor(e)))}function Bh(t,e){return function(n){e===t.J?(t.J=null,n||0!==t.Ta?1===t.Ta&&t.f("Realtime connection lost."):(t.f("Realtime connection failed."),"s-"===t.F.Ya.substr(0,2)&&(xc.remove("host:"+t.F.host),t.F.Ya=t.F.host)),t.close()):e===t.D?(t.f("Secondary connection lost."),n=t.D,t.D=null,t.hd!==n&&t.cd!==n||t.close()):t.f("closing an old connection")}}function Ah(t,e){return function(n){if(2!=t.Ta)if(e===t.cd){var i=Tc("t",n);if(n=Tc("d",n),"c"==i){if(i=Tc("t",n),"d"in n)if(n=n.d,"h"===i){var i=n.ts,r=n.v,o=n.h;t.Nf=n.s,Ac(t.F,o),0==t.Ta&&(t.J.start(),Ch(t,t.J,i),"5"!==r&&O("Protocol version mismatch detected"),n=t.Pf,(n=1<n.gd.length?n.gd[1]:null)&&Dh(t,n))}else if("n"===i){for(t.f("recvd end transmission on primary"),t.cd=t.D,n=0;n<t.Md.length;++n)t.Id(t.Md[n]);t.Md=[],Eh(t)}else"s"===i?(t.f("Connection shutdown command received. Shutting down..."),t.Ne&&(t.Ne(n),t.Ne=null),t.la=null,t.close()):"r"===i?(t.f("Reset packet received.  New host: "+n),Ac(t.F,n),1===t.Ta?t.close():(Fh(t),zh(t))):"e"===i?Nc("Server Error: "+n):"o"===i?(t.f("got pong on primary."),Gh(t),Hh(t)):Nc("Unknown control packet command: "+i)}else"d"==i&&t.Id(n)}else if(e===t.D)if(i=Tc("t",n),n=Tc("d",n),"c"==i)"t"in n&&(n=n.t,"a"===n?Ih(t):"r"===n?(t.f("Got a reset on secondary, closing it"),t.D.close(),t.hd!==t.D&&t.cd!==t.D||t.close()):"o"===n&&(t.f("got pong on secondary."),t.Mf--,Ih(t)));else{if("d"!=i)throw Error("Unknown protocol layer: "+i);t.Md.push(n)}else t.f("message on old connection")}}function Eh(t){t.hd===t.D&&t.cd===t.D&&(t.f("cleaning up and promoting a connection: "+t.D.re),t.J=t.D,t.D=null)}function Ih(t){0>=t.Mf?(t.f("Secondary connection is healthy."),t.Ab=!0,t.D.Ed(),t.D.start(),t.f("sending client ack on secondary"),t.D.send({t:"c",d:{t:"a",d:{}}}),t.f("Ending transmission on primary"),t.J.send({t:"c",d:{t:"n",d:{}}}),t.hd=t.D,Eh(t)):(t.f("sending ping on secondary."),t.D.send({t:"c",d:{t:"p",d:{}}}))}function Gh(t){t.Ab||(t.Re--,0>=t.Re&&(t.f("Primary connection is healthy."),t.Ab=!0,t.J.Ed()))}function Dh(t,e){t.D=new e("c:"+t.id+":"+t.ff++,t.F,t.Nf),t.Mf=e.responsesRequiredToBeHealthy||0,t.D.open(Ah(t,t.D),Bh(t,t.D)),setTimeout(function(){t.D&&(t.f("Timed out trying to upgrade."),t.D.close())},Math.floor(6e4))}function Ch(t,e,n){t.f("Realtime connection established."),t.J=e,t.Ta=1,t.Wc&&(t.Wc(n,t.Nf),t.Wc=null),0===t.Re?(t.f("Primary connection is healthy."),t.Ab=!0):setTimeout(function(){Hh(t)},Math.floor(5e3))}function Hh(t){t.Ab||1!==t.Ta||(t.f("sending ping on primary."),Jh(t,{t:"c",d:{t:"p",d:{}}}))}function Jh(t,e){if(1!==t.Ta)throw"Connection is not connected";t.hd.send(e)}function Fh(t){t.f("Shutting down all connections"),t.J&&(t.J.close(),t.J=null),t.D&&(t.D.close(),t.D=null),t.yd&&(clearTimeout(t.yd),t.yd=null)}function Kh(t,e,n,i){this.id=Lh++,this.f=Mc("p:"+this.id+":"),this.xf=this.Ee=!1,this.$={},this.qa=[],this.Yc=0,this.Vc=[],this.oa=!1,this.Za=1e3,this.Fd=3e5,this.Gb=e,this.Uc=n,this.Oe=i,this.F=t,this.sb=this.Aa=this.Ia=this.Bb=this.We=null,this.Ob=!1,this.Td={},this.Lg=0,this.nf=!0,this.Lc=this.Ge=null,Mh(this,0),He.ub().Eb("visible",this.Cg,this),-1===t.host.indexOf("fblocal")&&Ge.ub().Eb("online",this.Ag,this)}function Oh(t,e){var n=e.Ig,i=n.path.toString(),r=n.va();t.f("Listen on "+i+" for "+r);var o={p:i};e.tag&&(o.q=ee(n.n),o.t=e.tag),o.h=e.xd(),t.Fa("q",o,function(o){var a=o.d,s=o.s;if(a&&"object"==typeof a&&v(a,"w")){var u=w(a,"w");ea(u)&&0<=Na(u,"no_index")&&O("Using an unspecified index. Consider adding "+('".indexOn": "'+n.n.g.toString()+'"')+" at "+n.path.toString()+" to your security rules for better performance")}(t.$[i]&&t.$[i][r])===e&&(t.f("listen response",o),"ok"!==s&&Ph(t,i,r),e.H&&e.H(s,a))})}function Qh(t){var e=t.Aa;t.oa&&e&&t.Fa("auth",{cred:e.ig},function(n){var i=n.s;n=n.d||"error","ok"!==i&&t.Aa===e&&delete t.Aa,e.of?"ok"!==i&&e.md&&e.md(i,n):(e.of=!0,e.zc&&e.zc(i,n))})}function Rh(t,e,n,i,r){n={p:n,d:i},t.f("onDisconnect "+e,n),t.Fa(e,n,function(t){r&&setTimeout(function(){r(t.s,t.d)},Math.floor(0))})}function Sh(t,e,i,r,o,a){r={p:i,d:r},n(a)&&(r.h=a),t.qa.push({action:e,Jf:r,H:o}),t.Yc++,e=t.qa.length-1,t.oa?Th(t,e):t.f("Buffering put: "+i)}function Th(t,e){var n=t.qa[e].action,i=t.qa[e].Jf,r=t.qa[e].H;t.qa[e].Jg=t.oa,t.Fa(n,i,function(i){t.f(n+" response",i),delete t.qa[e],t.Yc--,0===t.Yc&&(t.qa=[]),r&&r(i.s,i.d)})}function Mh(t,e){K(!t.Ia,"Scheduling a connect when we're already connected/ing?"),t.sb&&clearTimeout(t.sb),t.sb=setTimeout(function(){t.sb=null,Wh(t)},Math.floor(e))}function Wh(t){if(Xh(t)){t.f("Making a connection attempt"),t.Ge=(new Date).getTime(),t.Lc=null;var e=q(t.Id,t),n=q(t.Wc,t),i=q(t.Df,t),r=t.id+":"+Nh++;t.Ia=new yh(r,t.F,e,n,i,function(e){O(e+" ("+t.F.toString()+")"),t.xf=!0},t.Bb)}}function Uh(t,e,n){n=n?Qa(n,function(t){return Uc(t)}).join("$"):"default",(t=Ph(t,e,n))&&t.H&&t.H("permission_denied")}function Ph(t,e,i){e=new L(e).toString();var r;return n(t.$[e])?(r=t.$[e][i],delete t.$[e][i],0===pa(t.$[e])&&delete t.$[e]):r=void 0,r}function Vh(t){Qh(t),r(t.$,function(e){r(e,function(e){Oh(t,e)})});for(var e=0;e<t.qa.length;e++)t.qa[e]&&Th(t,e);for(;t.Vc.length;)e=t.Vc.shift(),Rh(t,e.action,e.$c,e.data,e.H)}function Xh(t){var e;return e=Ge.ub().kc,!t.xf&&!t.Ee&&e}function Q(t,e,n){this.A=t,this.W=e,this.g=n}function Yh(t,e){this.F=t,this.Ua=Rb(t),this.fd=null,this.da=new vb,this.Hd=1,this.Ra=null,e||0<=("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)?(this.ba=new Ae(this.F,q(this.Gb,this)),setTimeout(q(this.Uc,this,!0),0)):this.ba=this.Ra=new Kh(this.F,q(this.Gb,this),q(this.Uc,this),q(this.Oe,this)),this.Sg=Sb(t,q(function(){return new Mb(this.Ua,this.ba)},this)),this.uc=new Rf,this.Ce=new ob;var n=this;this.Cd=new vf({Xe:function(t,e,i,r){return e=[],i=n.Ce.j(t.path),i.e()||(e=xf(n.Cd,new Xb(bf,t.path,i)),setTimeout(function(){r("ok")},0)),e},ae:ba}),Zh(this,"connected",!1),this.la=new qc,this.M=new Sg(t,q(this.ba.M,this.ba),q(this.ba.ge,this.ba),q(this.Le,this)),this.sd=0,this.De=null,this.L=new vf({Xe:function(t,e,i,r){return n.ba.yf(t,i,e,function(e,i){var o=r(e,i);Ab(n.da,t.path,o)}),[]},ae:function(t,e){n.ba.Rf(t,e)}})}function $h(t){return t=t.Ce.j(new L(".info/serverTimeOffset")).I()||0,(new Date).getTime()+t}function ai(t){return t=t={timestamp:$h(t)},t.timestamp=t.timestamp||(new Date).getTime(),t}function Zh(t,e,n){e=new L("/.info/"+e),n=M(n);var i=t.Ce;i.Wd=i.Wd.G(e,n),n=xf(t.Cd,new Xb(bf,e,n)),Ab(t.da,e,n)}function ci(t){t.f("onDisconnectEvents");var e=ai(t),n=[];rc(pc(t.la,e),G,function(e,i){n=n.concat(xf(t.L,new Xb(bf,e,i)));var r=ei(t,e);bi(t,r)}),t.la=new qc,Ab(t.da,G,n)}function fi(t,e,n,i){var r=M(n);t.ba.Me(e.toString(),r.I(!0),function(n,o){"ok"===n&&t.la.nc(e,r),di(i,n,o)})}function gi(t,e,n,i,r){var o=M(n,i);t.ba.Me(e.toString(),o.I(!0),function(n,i){"ok"===n&&t.la.nc(e,o),di(r,n,i)})}function hi(t,e,n,i){var r,o=!0;for(r in n)o=!1;o?(Cb("onDisconnect().update() called with empty data.  Don't do anything."),di(i,"ok")):t.ba.Cf(e.toString(),n,function(r,o){if("ok"===r)for(var a in n){var s=M(n[a]);t.la.nc(e.u(a),s)}di(i,r,o)})}function ii(t,e,n){n=".info"===E(e.path)?t.Cd.Pb(e,n):t.L.Pb(e,n),yb(t.da,e.path,n)}function di(t,e,n){t&&Db(function(){if("ok"==e)t(null);else{var i=(e||"error").toUpperCase(),r=i;n&&(r+=": "+n),r=Error(r),r.code=i,t(r)}})}function ji(t,e,i,r,o){function a(){}t.f("transaction on "+e);var s=new U(t,e);if(s.Eb("value",a),i={path:e,update:i,H:r,status:null,Ff:Ec(),cf:o,Lf:0,ie:function(){s.ic("value",a)},ke:null,Ba:null,pd:null,qd:null,rd:null},r=t.L.za(e,void 0)||C,i.pd=r,r=i.update(r.I()),n(r)){cg("transaction failed: Data returned ",r,i.path),i.status=1,o=Sf(t.uc,e);var u=o.Ca()||[];u.push(i),Tf(o,u),"object"==typeof r&&null!==r&&v(r,".priority")?(u=w(r,".priority"),K(ag(u),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):u=(t.L.za(e)||C).C().I(),o=ai(t),r=M(r,u),o=sc(r,o),i.qd=r,i.rd=o,i.Ba=t.Hd++,i=wf(t.L,e,o,i.Ba,i.cf),Ab(t.da,e,i),ki(t)}else i.ie(),i.qd=null,i.rd=null,i.H&&(t=new Q(i.pd,new U(t,i.path),N),i.H(null,!1,t))}function ki(t,e){var n=e||t.uc;if(e||li(t,n),null!==n.Ca()){var i=mi(t,n);K(0<i.length,"Sending zero length transaction queue"),Sa(i,function(t){return 1===t.status})&&ni(t,n.path(),i)}else n.wd()&&n.P(function(e){ki(t,e)})}function ni(t,e,n){for(var i=Qa(n,function(t){return t.Ba}),r=t.L.za(e,i)||C,i=r,r=r.hash(),o=0;o<n.length;o++){var a=n[o];K(1===a.status,"tryToSendTransactionQueue_: items in queue should all be run."),a.status=2,a.Lf++;var s=T(e,a.path),i=i.G(s,a.qd)}i=i.I(!0),t.ba.put(e.toString(),i,function(i){t.f("transaction put response",{path:e.toString(),status:i});var r=[];if("ok"===i){for(i=[],o=0;o<n.length;o++){if(n[o].status=3,r=r.concat(zf(t.L,n[o].Ba)),n[o].H){var a=n[o].rd,s=new U(t,n[o].path);i.push(q(n[o].H,null,null,!0,new Q(a,s,N)))}n[o].ie()}for(li(t,Sf(t.uc,e)),ki(t),Ab(t.da,e,r),o=0;o<i.length;o++)Db(i[o])}else{if("datastale"===i)for(o=0;o<n.length;o++)n[o].status=4===n[o].status?5:1;else for(O("transaction at "+e.toString()+" failed: "+i),o=0;o<n.length;o++)n[o].status=5,n[o].ke=i;bi(t,e)}},r)}function bi(t,e){var n=oi(t,e),i=n.path(),n=mi(t,n);return pi(t,n,i),i}function pi(t,e,i){if(0!==e.length){for(var r=[],o=[],a=Qa(e,function(t){return t.Ba}),s=0;s<e.length;s++){var u,l=e[s],c=T(i,l.path),f=!1;if(K(null!==c,"rerunTransactionsUnderNode_: relativePath should not be null."),5===l.status)f=!0,u=l.ke,o=o.concat(zf(t.L,l.Ba,!0));else if(1===l.status)if(25<=l.Lf)f=!0,u="maxretry",o=o.concat(zf(t.L,l.Ba,!0));else{var h=t.L.za(l.path,a)||C;l.pd=h;var d=e[s].update(h.I());n(d)?(cg("transaction failed: Data returned ",d,l.path),c=M(d),"object"==typeof d&&null!=d&&v(d,".priority")||(c=c.ga(h.C())),h=l.Ba,d=ai(t),d=sc(c,d),l.qd=c,l.rd=d,l.Ba=t.Hd++,Va(a,h),o=o.concat(wf(t.L,l.path,d,l.Ba,l.cf)),o=o.concat(zf(t.L,h,!0))):(f=!0,u="nodata",o=o.concat(zf(t.L,l.Ba,!0)))}Ab(t.da,i,o),o=[],f&&(e[s].status=3,setTimeout(e[s].ie,Math.floor(0)),e[s].H&&("nodata"===u?(l=new U(t,e[s].path),r.push(q(e[s].H,null,null,!1,new Q(e[s].pd,l,N)))):r.push(q(e[s].H,null,Error(u),!1,null))))}for(li(t,t.uc),s=0;s<r.length;s++)Db(r[s]);ki(t)}}function oi(t,e){for(var n,i=t.uc;null!==(n=E(e))&&null===i.Ca();)i=Sf(i,n),e=H(e);return i}function mi(t,e){var n=[];return qi(t,e,n),n.sort(function(t,e){return t.Ff-e.Ff}),n}function qi(t,e,n){var i=e.Ca();if(null!==i)for(var r=0;r<i.length;r++)n.push(i[r]);e.P(function(e){qi(t,e,n)})}function li(t,e){var n=e.Ca();if(n){for(var i=0,r=0;r<n.length;r++)3!==n[r].status&&(n[i]=n[r],i++);n.length=i,Tf(e,0<n.length?n:null)}e.P(function(e){li(t,e)})}function ei(t,e){var n=oi(t,e).path(),i=Sf(t.uc,e);return Wf(i,function(e){ri(t,e)}),ri(t,i),Vf(i,function(e){ri(t,e)}),n}function ri(t,e){var n=e.Ca();if(null!==n){for(var i=[],r=[],o=-1,a=0;a<n.length;a++)4!==n[a].status&&(2===n[a].status?(K(o===a-1,"All SENT items should be at beginning of queue."),o=a,n[a].status=4,n[a].ke="set"):(K(1===n[a].status,"Unexpected transaction status in abort"),n[a].ie(),r=r.concat(zf(t.L,n[a].Ba,!0)),n[a].H&&i.push(q(n[a].H,null,Error("set"),!1,null))));for(-1===o?Tf(e,null):n.length=o+1,Ab(t.da,e.path(),r),a=0;a<i.length;a++)Db(i[a])}}function W(){this.oc={},this.Sf=!1}function X(t,e){this.bd=t,this.ra=e}function Y(t,e,n,i){this.k=t,this.path=e,this.n=n,this.lc=i}function si(t){var e=null,n=null;if(t.ma&&(e=nd(t)),t.pa&&(n=pd(t)),t.g===Qd){if(t.ma){if("[MIN_NAME]"!=md(t))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!=typeof e)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.")}if(t.pa){if("[MAX_NAME]"!=od(t))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!=typeof n)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.")}}else if(t.g===N){if(null!=e&&!ag(e)||null!=n&&!ag(n))throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(K(t.g instanceof Ud||t.g===$d,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")}function ti(t){if(t.ma&&t.pa&&t.ja&&(!t.ja||""===t.Nb))throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")}function ui(t,e){if(!0===t.lc)throw Error(e+": You can't combine multiple orderBy calls.")}function vi(t,e,n){var i={cancel:null,Ma:null};if(e&&n)i.cancel=e,A(t,3,i.cancel,!0),i.Ma=n,mb(t,4,i.Ma);else if(e)if("object"==typeof e&&null!==e)i.Ma=e;else{if("function"!=typeof e)throw Error(y(t,3,!0)+" must either be a cancel callback or a context object.");i.cancel=e}return i}function U(t,e){var n,i,r;if(t instanceof Yh)n=t,i=e;else{x("new Firebase",1,2,arguments.length),i=Pc(arguments[0]),n=i.Tg,"firebase"===i.domain&&Oc(i.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!=n||Oc("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),i.kb||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&O("Insecure Firebase access from a secure page. Please use https in calls to new Firebase()."),n=new zc(i.host,i.kb,n,"ws"===i.scheme||"wss"===i.scheme),i=new L(i.$c),r=i.toString();var o;if(!(o=!p(n.host)||0===n.host.length||!$f(n.hc))&&(o=0!==r.length)&&(r&&(r=r.replace(/^\/*\.info(\/|$)/,"/")),o=!(p(r)&&0!==r.length&&!Yf.test(r))),o)throw Error(y("new Firebase",1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');if(e)if(e instanceof W)r=e;else{if(!p(e))throw Error("Expected a valid Firebase.Context for second argument to new Firebase()");r=W.ub(),n.Od=e}else r=W.ub();o=n.toString();var a=w(r.oc,o);a||(a=new Yh(n,r.Sf),r.oc[o]=a),n=a}Y.call(this,n,i,be,!1)}function Lc(t,e){K(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?("undefined"!=typeof console&&("function"==typeof console.log?Bb=q(console.log,console):"object"==typeof console.log&&(Bb=function(t){console.log(t)})),e&&yc.set("logging_enabled",!0)):t?Bb=t:(Bb=null,yc.remove("logging_enabled"))}var g,aa=this,la=Date.now||function(){return+new Date},ya="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),Ea={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","	":"\\t","\x0B":"\\u000b"},Fa=/\uffff/.test("￿")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g,Ha;t:{var Ia=aa.navigator;if(Ia){var Ja=Ia.userAgent;if(Ja){Ha=Ja;break t}}Ha=""}ma(La,Ka),La.prototype.reset=function(){this.N[0]=1732584193,this.N[1]=4023233417,this.N[2]=2562383102,this.N[3]=271733878,this.N[4]=3285377520,this.de=this.ac=0},La.prototype.update=function(t,e){if(null!=t){n(e)||(e=t.length);for(var i=e-this.Va,r=0,o=this.me,a=this.ac;e>r;){if(0==a)for(;i>=r;)Ma(this,t,r),r+=this.Va;if(p(t)){for(;e>r;)if(o[a]=t.charCodeAt(r),++a,++r,a==this.Va){Ma(this,o),a=0;break}}else for(;e>r;)if(o[a]=t[r],++a,++r,a==this.Va){Ma(this,o),a=0;break}}this.ac=a,this.de+=e}};var u=Array.prototype,Na=u.indexOf?function(t,e,n){return u.indexOf.call(t,e,n)}:function(t,e,n){if(n=null==n?0:0>n?Math.max(0,t.length+n):n,p(t))return p(e)&&1==e.length?t.indexOf(e,n):-1;for(;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},Oa=u.forEach?function(t,e,n){u.forEach.call(t,e,n)}:function(t,e,n){for(var i=t.length,r=p(t)?t.split(""):t,o=0;i>o;o++)o in r&&e.call(n,r[o],o,t)},Pa=u.filter?function(t,e,n){return u.filter.call(t,e,n)}:function(t,e,n){for(var i=t.length,r=[],o=0,a=p(t)?t.split(""):t,s=0;i>s;s++)if(s in a){var u=a[s];e.call(n,u,s,t)&&(r[o++]=u)}return r},Qa=u.map?function(t,e,n){return u.map.call(t,e,n)}:function(t,e,n){for(var i=t.length,r=Array(i),o=p(t)?t.split(""):t,a=0;i>a;a++)a in o&&(r[a]=e.call(n,o[a],a,t));return r},Ra=u.reduce?function(t,e,n,i){for(var r=[],o=1,a=arguments.length;a>o;o++)r.push(arguments[o]);return i&&(r[0]=q(e,i)),u.reduce.apply(t,r)}:function(t,e,n,i){var r=n;return Oa(t,function(n,o){r=e.call(i,r,n,o,t)}),r},Sa=u.every?function(t,e,n){return u.every.call(t,e,n)}:function(t,e,n){for(var i=t.length,r=p(t)?t.split(""):t,o=0;i>o;o++)if(o in r&&!e.call(n,r[o],o,t))return!1;return!0},Za=-1!=Ha.indexOf("Opera")||-1!=Ha.indexOf("OPR"),$a=-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE"),ab=-1!=Ha.indexOf("Gecko")&&-1==Ha.toLowerCase().indexOf("webkit")&&!(-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE")),bb=-1!=Ha.toLowerCase().indexOf("webkit");!function(){var t,e="";return Za&&aa.opera?(e=aa.opera.version,ha(e)?e():e):(ab?t=/rv\:([^\);]+)(\)|;)/:$a?t=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:bb&&(t=/WebKit\/(\S+)/),t&&(e=(e=t.exec(Ha))?e[1]:""),$a&&(t=(t=aa.document)?t.documentMode:void 0,t>parseFloat(e))?String(t):e)}();var cb=null,db=null,eb=null,hb=hb||"2.3.1";ob.prototype.j=function(t){return this.Wd.Q(t)},ob.prototype.toString=function(){return this.Wd.toString()},pb.prototype.qf=function(){return null},pb.prototype.ye=function(){return null};var qb=new pb;rb.prototype.qf=function(t){var e=this.Ka.O;return sb(e,t)?e.j().R(t):(e=null!=this.Kd?new tb(this.Kd,!0,!1):this.Ka.w(),this.Tf.xc(t,e))},rb.prototype.ye=function(t,e,n){var i=null!=this.Kd?this.Kd:ub(this.Ka);return t=this.Tf.ne(i,e,1,n,t),0===t.length?null:t[0]},xb.prototype.add=function(t){this.vd.push(t)},xb.prototype.Zb=function(){return this.ra};var Fb="value";Gb.prototype.Zb=function(){var t=this.Zd.Ib();return"value"===this.ud?t.path:t.parent().path},Gb.prototype.ze=function(){return this.ud},Gb.prototype.Vb=function(){return this.ue.Vb(this)},Gb.prototype.toString=function(){return this.Zb().toString()+":"+this.ud+":"+B(this.Zd.mf())},Hb.prototype.Zb=function(){return this.path},Hb.prototype.ze=function(){return"cancel"},Hb.prototype.Vb=function(){return this.ue.Vb(this)},Hb.prototype.toString=function(){return this.path.toString()+":cancel"},tb.prototype.j=function(){return this.A},Lb.prototype.get=function(){var t=this.gg.get(),e=xa(t);if(this.Dd)for(var n in this.Dd)e[n]-=this.Dd[n];return this.Dd=t,e},Mb.prototype.If=function(){var t,e=this.fd.get(),n={},i=!1;for(t in e)0<e[t]&&v(this.Of,t)&&(n[t]=e[t],i=!0);i&&this.ba.Ue(n),setTimeout(q(this.If,this),Math.floor(6e5*Math.random()))},Nb.prototype.get=function(){return xa(this.Ec)};var Pb={},Qb={};Xb.prototype.Xc=function(t){return this.path.e()?new Xb(this.source,G,this.Ga.R(t)):new Xb(this.source,H(this.path),this.Ga)},Xb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" overwrite: "+this.Ga.toString()+")"},Zb.prototype.Xc=function(){return this.path.e()?new Zb(this.source,G):new Zb(this.source,H(this.path))},Zb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" listen_complete)"},g=ac.prototype,g.Oa=function(t,e){return new ac(this.La,this.wa.Oa(t,e,this.La).Y(null,null,!1,null,null))},g.remove=function(t){return new ac(this.La,this.wa.remove(t,this.La).Y(null,null,!1,null,null))},g.get=function(t){for(var e,n=this.wa;!n.e();){if(e=this.La(t,n.key),0===e)return n.value;0>e?n=n.left:e>0&&(n=n.right)}return null},g.e=function(){return this.wa.e()},g.count=function(){return this.wa.count()},g.Sc=function(){return this.wa.Sc()},g.fc=function(){return this.wa.fc()},g.ia=function(t){return this.wa.ia(t)},g.Xb=function(t){return new dc(this.wa,null,this.La,!1,t)},g.Yb=function(t,e){return new dc(this.wa,t,this.La,!1,e)},g.$b=function(t,e){return new dc(this.wa,t,this.La,!0,e)},g.sf=function(t){return new dc(this.wa,null,this.La,!0,t)},g=fc.prototype,g.Y=function(t,e,n,i,r){return new fc(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=i?i:this.left,null!=r?r:this.right)},g.count=function(){return this.left.count()+1+this.right.count()},g.e=function(){return!1},g.ia=function(t){return this.left.ia(t)||t(this.key,this.value)||this.right.ia(t)},g.Sc=function(){return gc(this).key},g.fc=function(){return this.right.e()?this.key:this.right.fc()},g.Oa=function(t,e,n){var i,r;return r=this,i=n(t,r.key),r=0>i?r.Y(null,null,null,r.left.Oa(t,e,n),null):0===i?r.Y(null,e,null,null,null):r.Y(null,null,null,null,r.right.Oa(t,e,n)),hc(r)},g.remove=function(t,e){var n,i;if(n=this,0>e(t,n.key))n.left.e()||n.left.fa()||n.left.left.fa()||(n=jc(n)),n=n.Y(null,null,null,n.left.remove(t,e),null);else{if(n.left.fa()&&(n=kc(n)),n.right.e()||n.right.fa()||n.right.left.fa()||(n=lc(n),n.left.left.fa()&&(n=kc(n),n=lc(n))),0===e(t,n.key)){if(n.right.e())return bc;i=gc(n.right),n=n.Y(i.key,i.value,null,null,ic(n.right))}n=n.Y(null,null,null,null,n.right.remove(t,e))}return hc(n)},g.fa=function(){return this.color},g=nc.prototype,g.Y=function(){return this},g.Oa=function(t,e){return new fc(t,e,null)},g.remove=function(){return this},g.count=function(){return 0},g.e=function(){return!0},g.ia=function(){return!1},g.Sc=function(){return null},g.fc=function(){return null},g.fa=function(){return!1};var bc=new nc;uc.prototype.set=function(t,e){null==e?delete this.wc[t]:this.wc[t]=e},uc.prototype.get=function(t){return v(this.wc,t)?this.wc[t]:null},uc.prototype.remove=function(t){delete this.wc[t]},uc.prototype.wf=!0,g=vc.prototype,g.set=function(t,e){null==e?this.Fc.removeItem(this.Pd+t):this.Fc.setItem(this.Pd+t,B(e))},g.get=function(t){return t=this.Fc.getItem(this.Pd+t),null==t?null:nb(t)},g.remove=function(t){this.Fc.removeItem(this.Pd+t)},g.wf=!1,g.toString=function(){return this.Fc.toString()};var xc=wc("localStorage"),yc=wc("sessionStorage");zc.prototype.toString=function(){var t=(this.kb?"https://":"http://")+this.host;return this.Od&&(t+="<"+this.Od+">"),t};var Ec=function(){var t=1;return function(){return t++}}(),Bb=null,Kc=!0,Yc=/^-?\d{1,10}$/;cd.prototype.hg=function(t,e){if(null==t.Wa||null==e.Wa)throw Fc("Should only compare child_ events.");return this.g.compare(new F(t.Wa,t.Ja),new F(e.Wa,e.Ja))},g=id.prototype,g.Kf=function(t){return"value"===t},g.createEvent=function(t,e){var n=e.n.g;return new Gb("value",this,new Q(t.Ja,e.Ib(),n))},g.Vb=function(t){var e=this.rb;if("cancel"===t.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var n=this.pb;return function(){n.call(e,t.error)}}var i=this.Rb;return function(){i.call(e,t.Zd)}},g.gf=function(t,e){return this.pb?new Hb(this,t,e):null},g.matches=function(t){return t instanceof id?t.Rb&&this.Rb?t.Rb===this.Rb&&t.rb===this.rb:!0:!1},g.tf=function(){return null!==this.Rb},g=jd.prototype,g.Kf=function(t){return t="children_added"===t?"child_added":t,("children_removed"===t?"child_removed":t)in this.ha},g.gf=function(t,e){return this.pb?new Hb(this,t,e):null},g.createEvent=function(t,e){K(null!=t.Wa,"Child events should have a childName.");var n=e.Ib().u(t.Wa);return new Gb(t.type,this,new Q(t.Ja,n,e.n.g),t.Qd)},g.Vb=function(t){var e=this.rb;if("cancel"===t.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var n=this.pb;return function(){n.call(e,t.error)}}var i=this.ha[t.ud];return function(){i.call(e,t.Zd,t.Qd)}},g.matches=function(t){if(t instanceof jd){if(!this.ha||!t.ha)return!0;if(this.rb===t.rb){var e=pa(t.ha);if(e===pa(this.ha)){if(1===e){var e=qa(t.ha),n=qa(this.ha);return!(n!==e||t.ha[e]&&this.ha[n]&&t.ha[e]!==this.ha[n])}return oa(this.ha,function(e,n){return t.ha[n]===e})}}}return!1},g.tf=function(){return null!==this.ha},g=kd.prototype,g.G=function(t,e,n,i,r,o){return K(t.Jc(this.g),"A node must be indexed if only a child is updated"),r=t.R(e),r.Q(i).ca(n.Q(i))&&r.e()==n.e()?t:(null!=o&&(n.e()?t.Da(e)?hd(o,new D("child_removed",r,e)):K(t.K(),"A child remove without an old child only makes sense on a leaf node"):r.e()?hd(o,new D("child_added",n,e)):hd(o,new D("child_changed",n,e,r))),t.K()&&n.e()?t:t.U(e,n).lb(this.g))},g.xa=function(t,e,n){return null!=n&&(t.K()||t.P(N,function(t,i){e.Da(t)||hd(n,new D("child_removed",i,t))}),e.K()||e.P(N,function(e,i){if(t.Da(e)){var r=t.R(e);r.ca(i)||hd(n,new D("child_changed",i,e,r))}else hd(n,new D("child_added",i,e))})),e.lb(this.g)},g.ga=function(t,e){return t.e()?C:t.ga(e)},g.Na=function(){return!1},g.Wb=function(){return this},g=ld.prototype,g.matches=function(t){return 0>=this.g.compare(this.ed,t)&&0>=this.g.compare(t,this.Gc)},g.G=function(t,e,n,i,r,o){return this.matches(new F(e,n))||(n=C),this.Be.G(t,e,n,i,r,o)},g.xa=function(t,e,n){e.K()&&(e=C);var i=e.lb(this.g),i=i.ga(C),r=this;return e.P(N,function(t,e){r.matches(new F(t,e))||(i=i.U(t,C))}),this.Be.xa(t,i,n)},g.ga=function(t){return t},g.Na=function(){return!0},g.Wb=function(){return this.Be},g=qd.prototype,g.G=function(t,e,n,i,r,o){return this.sa.matches(new F(e,n))||(n=C),t.R(e).ca(n)?t:t.Db()<this.ka?this.sa.Wb().G(t,e,n,i,r,o):sd(this,t,e,n,r,o)},g.xa=function(t,e,n){var i;if(e.K()||e.e())i=C.lb(this.g);else if(2*this.ka<e.Db()&&e.Jc(this.g)){i=C.lb(this.g),e=this.Jb?e.$b(this.sa.Gc,this.g):e.Yb(this.sa.ed,this.g);for(var r=0;0<e.Pa.length&&r<this.ka;){var o,a=J(e);if(!(o=this.Jb?0>=this.g.compare(this.sa.ed,a):0>=this.g.compare(a,this.sa.Gc)))break;i=i.U(a.name,a.S),r++}}else{i=e.lb(this.g),i=i.ga(C);var s,u,l;if(this.Jb){e=i.sf(this.g),s=this.sa.Gc,u=this.sa.ed;var c=td(this.g);l=function(t,e){return c(e,t)}}else e=i.Xb(this.g),s=this.sa.ed,u=this.sa.Gc,l=td(this.g);for(var r=0,f=!1;0<e.Pa.length;)a=J(e),!f&&0>=l(s,a)&&(f=!0),(o=f&&r<this.ka&&0>=l(a,u))?r++:i=i.U(a.name,C)}return this.sa.Wb().xa(t,i,n)},g.ga=function(t){return t},g.Na=function(){return!0},g.Wb=function(){return this.sa.Wb()},xd.prototype.ab=function(t,e,n,i){var r,o=new gd;if(e.type===Yb)e.source.we?n=yd(this,t,e.path,e.Ga,n,i,o):(K(e.source.pf,"Unknown source."),r=e.source.af||Jb(t.w())&&!e.path.e(),n=Ad(this,t,e.path,e.Ga,n,i,r,o));else if(e.type===Bd)e.source.we?n=Cd(this,t,e.path,e.children,n,i,o):(K(e.source.pf,"Unknown source."),r=e.source.af||Jb(t.w()),n=Dd(this,t,e.path,e.children,n,i,r,o));else if(e.type===Ed)if(e.Vd)if(e=e.path,null!=n.tc(e))n=t;else{if(r=new rb(n,t,i),i=t.O.j(),e.e()||".priority"===E(e))Ib(t.w())?e=n.za(ub(t)):(e=t.w().j(),K(e instanceof R,"serverChildren would be complete if leaf node"),e=n.yc(e)),e=this.V.xa(i,e,o);else{var a=E(e),s=n.xc(a,t.w());null==s&&sb(t.w(),a)&&(s=i.R(a)),e=null!=s?this.V.G(i,a,s,H(e),r,o):t.O.j().Da(a)?this.V.G(i,a,C,H(e),r,o):i,e.e()&&Ib(t.w())&&(i=n.za(ub(t)),i.K()&&(e=this.V.xa(e,i,o)))}i=Ib(t.w())||null!=n.tc(G),n=Fd(t,e,i,this.V.Na())}else n=Gd(this,t,e.path,e.Qb,n,i,o);else{if(e.type!==$b)throw Fc("Unknown operation type: "+e.type);i=e.path,e=t.w(),r=e.j(),a=e.ea||i.e(),n=Hd(this,new Id(t.O,new tb(r,a,e.Ub)),i,n,qb,o)}return o=ra(o.bb),i=n,e=i.O,e.ea&&(r=e.j().K()||e.j().e(),a=Jd(t),(0<o.length||!t.O.ea||r&&!e.j().ca(a)||!e.j().C().ca(a.C()))&&o.push(Eb(Jd(i)))),new wd(n,o)};var Sd={};Rd.prototype.Ad=function(t,e){return 0!==this.compare(new F("[MIN_NAME]",t),new F("[MIN_NAME]",e))},Rd.prototype.Tc=function(){return Td},ma(Ud,Rd),g=Ud.prototype,g.Ic=function(t){return!t.Q(this.cc).e()},g.compare=function(t,e){var n=t.S.Q(this.cc),i=e.S.Q(this.cc),n=n.Dc(i);return 0===n?Vb(t.name,e.name):n},g.Pc=function(t,e){var n=M(t),n=C.G(this.cc,n);return new F(e,n)},g.Qc=function(){var t=C.G(this.cc,Vd);return new F("[MAX_NAME]",t)},g.toString=function(){return this.cc.slice().join("/")},ma(Wd,Rd),g=Wd.prototype,g.compare=function(t,e){var n=t.S.C(),i=e.S.C(),n=n.Dc(i);return 0===n?Vb(t.name,e.name):n},g.Ic=function(t){return!t.C().e()},g.Ad=function(t,e){return!t.C().ca(e.C())},g.Tc=function(){return Td},g.Qc=function(){return new F("[MAX_NAME]",new tc("[PRIORITY-POST]",Vd))},g.Pc=function(t,e){var n=M(t);return new F(e,new tc("[PRIORITY-POST]",n))},g.toString=function(){return".priority"};var N=new Wd;ma(Xd,Rd),g=Xd.prototype,g.compare=function(t,e){return Vb(t.name,e.name)},g.Ic=function(){throw Fc("KeyIndex.isDefinedOn not expected to be called.")},g.Ad=function(){return!1},g.Tc=function(){return Td},g.Qc=function(){return new F("[MAX_NAME]",C)},g.Pc=function(t){return K(p(t),"KeyIndex indexValue must always be a string."),new F(t,C)},g.toString=function(){return".key"};var Qd=new Xd;ma(Yd,Rd),g=Yd.prototype,g.compare=function(t,e){var n=t.S.Dc(e.S);return 0===n?Vb(t.name,e.name):n},g.Ic=function(){return!0},g.Ad=function(t,e){return!t.ca(e)},g.Tc=function(){return Td},g.Qc=function(){return Zd},g.Pc=function(t,e){var n=M(t);return new F(e,n)},g.toString=function(){return".value"};var $d=new Yd,be=new ae;g=ae.prototype,g.He=function(t){var e=ce(this);return e.ja=!0,e.ka=t,e.Nb="",e},g.Ie=function(t){var e=ce(this);return e.ja=!0,e.ka=t,e.Nb="l",e},g.Je=function(t){var e=ce(this);return e.ja=!0,e.ka=t,e.Nb="r",e},g.$d=function(t,e){var i=ce(this);return i.ma=!0,n(t)||(t=null),i.ec=t,null!=e?(i.Lb=!0,i.xb=e):(i.Lb=!1,i.xb=""),i},g.td=function(t,e){var i=ce(this);return i.pa=!0,n(t)||(t=null),i.bc=t,n(e)?(i.Tb=!0,i.vb=e):(i.ah=!1,i.vb=""),i},g.toString=function(){return B(ee(this))},he.prototype.get=function(t){var e=w(this.Bd,t);if(!e)throw Error("No index defined for "+t);return e===Sd?null:e};var le=new he({".priority":Sd},{".priority":N}),ne=["object","boolean","number","string"];g=tc.prototype,g.K=function(){return!0},g.C=function(){return this.aa},g.ga=function(t){return new tc(this.B,t)},g.R=function(t){return".priority"===t?this.aa:C},g.Q=function(t){return t.e()?this:".priority"===E(t)?this.aa:C},g.Da=function(){return!1},g.rf=function(){return null},g.U=function(t,e){return".priority"===t?this.ga(e):e.e()&&".priority"!==t?this:C.U(t,e).ga(this.aa)},g.G=function(t,e){var n=E(t);return null===n?e:e.e()&&".priority"!==n?this:(K(".priority"!==n||1===Kd(t),".priority must be the last token in a path"),this.U(n,C.G(H(t),e)))},g.e=function(){return!1},g.Db=function(){return 0},g.P=function(){return!1},g.I=function(t){return t&&!this.C().e()?{".value":this.Ca(),".priority":this.C().I()}:this.Ca()},g.hash=function(){if(null===this.Cb){var t="";this.aa.e()||(t+="priority:"+oe(this.aa.I())+":");var e=typeof this.B,t=t+(e+":"),t="number"===e?t+Xc(this.B):t+this.B;this.Cb=Hc(t)}return this.Cb},g.Ca=function(){return this.B},g.Dc=function(t){if(t===C)return 1;if(t instanceof R)return-1;K(t.K(),"Unknown node type");var e=typeof t.B,n=typeof this.B,i=Na(ne,e),r=Na(ne,n);return K(i>=0,"Unknown leaf type: "+e),K(r>=0,"Unknown leaf type: "+n),i===r?"object"===n?0:this.B<t.B?-1:this.B===t.B?0:1:r-i},g.lb=function(){return this},g.Jc=function(){return!0},g.ca=function(t){return t===this?!0:t.K()?this.B===t.B&&this.aa.ca(t.aa):!1},g.toString=function(){return B(this.I(!0))},g=R.prototype,g.K=function(){return!1},g.C=function(){return this.aa||C},g.ga=function(t){return this.m.e()?this:new R(this.m,t,this.wb)},g.R=function(t){return".priority"===t?this.C():(t=this.m.get(t),null===t?C:t)},g.Q=function(t){var e=E(t);return null===e?this:this.R(e).Q(H(t))},g.Da=function(t){return null!==this.m.get(t)},g.U=function(t,e){if(K(e,"We should always be passing snapshot nodes"),".priority"===t)return this.ga(e);var n,i,r=new F(t,e);return e.e()?(n=this.m.remove(t),r=ke(this.wb,r,this.m)):(n=this.m.Oa(t,e),r=ie(this.wb,r,this.m)),i=n.e()?C:this.aa,new R(n,i,r)},g.G=function(t,e){var n=E(t);if(null===n)return e;K(".priority"!==E(t)||1===Kd(t),".priority must be the last token in a path");var i=this.R(n).G(H(t),e);return this.U(n,i)},g.e=function(){return this.m.e()},g.Db=function(){return this.m.count()};var pe=/^(0|[1-9]\d*)$/;
g=R.prototype,g.I=function(t){if(this.e())return null;var e={},n=0,i=0,r=!0;if(this.P(N,function(o,a){e[o]=a.I(t),n++,r&&pe.test(o)?i=Math.max(i,Number(o)):r=!1}),!t&&r&&2*n>i){var o,a=[];for(o in e)a[o]=e[o];return a}return t&&!this.C().e()&&(e[".priority"]=this.C().I()),e},g.hash=function(){if(null===this.Cb){var t="";this.C().e()||(t+="priority:"+oe(this.C().I())+":"),this.P(N,function(e,n){var i=n.hash();""!==i&&(t+=":"+e+":"+i)}),this.Cb=""===t?"":Hc(t)}return this.Cb},g.rf=function(t,e,n){return(n=qe(this,n))?(t=cc(n,new F(t,e)))?t.name:null:cc(this.m,t)},g.P=function(t,e){var n=qe(this,t);return n?n.ia(function(t){return e(t.name,t.S)}):this.m.ia(e)},g.Xb=function(t){return this.Yb(t.Tc(),t)},g.Yb=function(t,e){var n=qe(this,e);if(n)return n.Yb(t,function(t){return t});for(var n=this.m.Yb(t.name,Tb),i=ec(n);null!=i&&0>e.compare(i,t);)J(n),i=ec(n);return n},g.sf=function(t){return this.$b(t.Qc(),t)},g.$b=function(t,e){var n=qe(this,e);if(n)return n.$b(t,function(t){return t});for(var n=this.m.$b(t.name,Tb),i=ec(n);null!=i&&0<e.compare(i,t);)J(n),i=ec(n);return n},g.Dc=function(t){return this.e()?t.e()?0:-1:t.K()||t.e()?1:t===Vd?-1:0},g.lb=function(t){if(t===Qd||ta(this.wb.dc,t.toString()))return this;var e=this.wb,n=this.m;K(t!==Qd,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var i=[],r=!1,n=n.Xb(Tb),o=J(n);o;)r=r||t.Ic(o.S),i.push(o),o=J(n);return i=r?je(i,td(t)):Sd,r=t.toString(),n=xa(e.dc),n[r]=t,t=xa(e.Bd),t[r]=i,new R(this.m,this.aa,new he(t,n))},g.Jc=function(t){return t===Qd||ta(this.wb.dc,t.toString())},g.ca=function(t){if(t===this)return!0;if(t.K())return!1;if(this.C().ca(t.C())&&this.m.count()===t.m.count()){var e=this.Xb(N);t=t.Xb(N);for(var n=J(e),i=J(t);n&&i;){if(n.name!==i.name||!n.S.ca(i.S))return!1;n=J(e),i=J(t)}return null===n&&null===i}return!1},g.toString=function(){return B(this.I(!0))};var re=Math.log(2),C=new R(new ac(Wb),null,le);ma(ue,R),g=ue.prototype,g.Dc=function(t){return t===this?0:1},g.ca=function(t){return t===this},g.C=function(){return this},g.R=function(){return C},g.e=function(){return!1};var Vd=new ue,Td=new F("[MIN_NAME]",C),Zd=new F("[MAX_NAME]",Vd);Id.prototype.w=function(){return this.Yd},g=ve.prototype,g.w=function(){return this.Ka.w().j()},g.fb=function(t){var e=ub(this.Ka);return e&&(S(this.W.n)||!t.e()&&!e.R(E(t)).e())?e.Q(t):null},g.e=function(){return 0===this.Xa.length},g.Pb=function(t){this.Xa.push(t)},g.jb=function(t,e){var n=[];if(e){K(null==t,"A cancel should cancel all event registrations.");var i=this.W.path;Oa(this.Xa,function(t){(t=t.gf(e,i))&&n.push(t)})}if(t){for(var r=[],o=0;o<this.Xa.length;++o){var a=this.Xa[o];if(a.matches(t)){if(t.tf()){r=r.concat(this.Xa.slice(o+1));break}}else r.push(a)}this.Xa=r}else this.Xa=[];return n},g.ab=function(t,e,n){t.type===Bd&&null!==t.source.Hb&&(K(ub(this.Ka),"We should always have a full cache before handling merges"),K(Jd(this.Ka),"Missing event cache, even though we have a server cache"));var i=this.Ka;return t=this.Hf.ab(i,t,e,n),e=this.Hf,n=t.je,K(n.O.j().Jc(e.V.g),"Event snap not indexed"),K(n.w().j().Jc(e.V.g),"Server snap not indexed"),K(Ib(t.je.w())||!Ib(i.w()),"Once a server snap is complete, it should never go back"),this.Ka=t.je,xe(this,t.fg,t.je.O.j(),null)},ze.prototype.Xc=function(t){return this.path.e()?(t=this.children.subtree(new L(t)),t.e()?null:t.value?new Xb(this.source,G,t.value):new ze(this.source,G,t)):(K(E(this.path)===t,"Can't get a merge for a child not on the path of the operation"),new ze(this.source,H(this.path),this.children))},ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},g=Ae.prototype,g.yf=function(t,e,n,i){var r=t.path.toString();this.f("Listen called for "+r+" "+t.va());var o=Be(t,n),a={};this.$[o]=a,t=ge(t.n);var s=this;Ce(this,r+".json",t,function(t,e){var u=e;404===t&&(t=u=null),null===t&&s.Gb(r,u,!1,n),w(s.$,o)===a&&i(t?401==t?"permission_denied":"rest_error:"+t:"ok",null)})},g.Rf=function(t,e){var n=Be(t,e);delete this.$[n]},g.M=function(t,e){this.Aa=t;var n=$c(t),i=n.data,n=n.Bc&&n.Bc.exp;e&&e("ok",{auth:i,expires:n})},g.ge=function(t){this.Aa=null,t("ok",null)},g.Me=function(){},g.Cf=function(){},g.Jd=function(){},g.put=function(){},g.zf=function(){},g.Ue=function(){},De.prototype.fe=function(t,e){var n;n=this.Oc[t]||[];var i=n.length;if(i>0){for(var r=Array(i),o=0;i>o;o++)r[o]=n[o];n=r}else n=[];for(i=0;i<n.length;i++)n[i].zc.apply(n[i].Ma,Array.prototype.slice.call(arguments,1))},De.prototype.Eb=function(t,e,n){Ee(this,t),this.Oc[t]=this.Oc[t]||[],this.Oc[t].push({zc:e,Ma:n}),(t=this.Ae(t))&&e.apply(n,t)},De.prototype.ic=function(t,e,n){Ee(this,t),t=this.Oc[t]||[];for(var i=0;i<t.length;i++)if(t[i].zc===e&&(!n||n===t[i].Ma)){t.splice(i,1);break}};var Fe=function(){var t=0,e=[];return function(n){var i=n===t;t=n;for(var r=Array(8),o=7;o>=0;o--)r[o]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(n%64),n=Math.floor(n/64);if(K(0===n,"Cannot push at time == 0"),n=r.join(""),i){for(o=11;o>=0&&63===e[o];o--)e[o]=0;e[o]++}else for(o=0;12>o;o++)e[o]=Math.floor(64*Math.random());for(o=0;12>o;o++)n+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(e[o]);return K(20===n.length,"nextPushId: Length should be 20."),n}}();ma(Ge,De),Ge.prototype.Ae=function(t){return K("online"===t,"Unknown event type: "+t),[this.kc]},ca(Ge),ma(He,De),He.prototype.Ae=function(t){return K("visible"===t,"Unknown event type: "+t),[this.Ob]},ca(He),g=L.prototype,g.toString=function(){for(var t="",e=this.Z;e<this.o.length;e++)""!==this.o[e]&&(t+="/"+this.o[e]);return t||"/"},g.slice=function(t){return this.o.slice(this.Z+(t||0))},g.parent=function(){if(this.Z>=this.o.length)return null;for(var t=[],e=this.Z;e<this.o.length-1;e++)t.push(this.o[e]);return new L(t,0)},g.u=function(t){for(var e=[],n=this.Z;n<this.o.length;n++)e.push(this.o[n]);if(t instanceof L)for(n=t.Z;n<t.o.length;n++)e.push(t.o[n]);else for(t=t.split("/"),n=0;n<t.length;n++)0<t[n].length&&e.push(t[n]);return new L(e,0)},g.e=function(){return this.Z>=this.o.length},g.ca=function(t){if(Kd(this)!==Kd(t))return!1;for(var e=this.Z,n=t.Z;e<=this.o.length;e++,n++)if(this.o[e]!==t.o[n])return!1;return!0},g.contains=function(t){var e=this.Z,n=t.Z;if(Kd(this)>Kd(t))return!1;for(;e<this.o.length;){if(this.o[e]!==t.o[n])return!1;++e,++n}return!0};var G=new L("");Je.prototype.push=function(t){0<this.Qa.length&&(this.Ha+=1),this.Qa.push(t),this.Ha+=Zc(t),Ke(this)},Je.prototype.pop=function(){var t=this.Qa.pop();this.Ha-=Zc(t),0<this.Qa.length&&--this.Ha};var Ne=new ac(function(t,e){return t===e?0:e>t?-1:1});g=Me.prototype,g.e=function(){return null===this.value&&this.children.e()},g.subtree=function(t){if(t.e())return this;var e=this.children.get(E(t));return null!==e?e.subtree(H(t)):Pd},g.set=function(t,e){if(t.e())return new Me(e,this.children);var n=E(t),i=(this.children.get(n)||Pd).set(H(t),e),n=this.children.Oa(n,i);return new Me(this.value,n)},g.remove=function(t){if(t.e())return this.children.e()?Pd:new Me(null,this.children);var e=E(t),n=this.children.get(e);return n?(t=n.remove(H(t)),e=t.e()?this.children.remove(e):this.children.Oa(e,t),null===this.value&&e.e()?Pd:new Me(this.value,e)):this},g.get=function(t){if(t.e())return this.value;var e=this.children.get(E(t));return e?e.get(H(t)):null};var Pd=new Me(null);Me.prototype.toString=function(){var t={};return Md(this,function(e,n){t[e.toString()]=n.toString()}),B(t)},Ze.prototype.Xc=function(t){return this.path.e()?null!=this.Qb.value?(K(this.Qb.children.e(),"affectedTree should not have overlapping affected paths."),this):(t=this.Qb.subtree(new L(t)),new Ze(G,t,this.Vd)):(K(E(this.path)===t,"operationForChild called for unrelated child."),new Ze(H(this.path),this.Qb,this.Vd))},Ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" ack write revert="+this.Vd+" affectedTree="+this.Qb+")"};var Yb=0,Bd=1,Ed=2,$b=3,$e=new af(!0,!1,null,!1),bf=new af(!1,!0,null,!1);af.prototype.toString=function(){return this.we?"user":this.af?"server(queryID="+this.Hb+")":"server"};var df=new cf(new Me(null));cf.prototype.Rd=function(t){return t.e()?df:(t=Od(this.X,t,Pd),new cf(t))},cf.prototype.e=function(){return this.X.e()},cf.prototype.apply=function(t){return kf(G,this.X,t)},g=lf.prototype,g.Rd=function(t){var e=Ua(this.na,function(e){return e.kd===t});K(e>=0,"removeWrite called with nonexistent writeId.");var n=this.na[e];this.na.splice(e,1);for(var i=n.visible,o=!1,a=this.na.length-1;i&&a>=0;){var s=this.na[a];s.visible&&(a>=e&&nf(s,n.path)?i=!1:n.path.contains(s.path)&&(o=!0)),a--}if(i){if(o)this.T=of(this.na,pf,G),this.Mc=0<this.na.length?this.na[this.na.length-1].kd:-1;else if(n.Ga)this.T=this.T.Rd(n.path);else{var u=this;r(n.children,function(t,e){u.T=u.T.Rd(n.path.u(e))})}return!0}return!1},g.za=function(t,e,n,i){if(n||i){var r=jf(this.T,t);return!i&&r.e()?e:i||null!=e||null!=gf(r,G)?(r=of(this.na,function(e){return(e.visible||i)&&(!n||!(0<=Na(n,e.kd)))&&(e.path.contains(t)||t.contains(e.path))},t),e=e||C,r.apply(e)):null}return r=gf(this.T,t),null!=r?r:(r=jf(this.T,t),r.e()?e:null!=e||null!=gf(r,G)?(e=e||C,r.apply(e)):null)},g.yc=function(t,e){var n=C,i=gf(this.T,t);if(i)i.K()||i.P(N,function(t,e){n=n.U(t,e)});else if(e){var r=jf(this.T,t);e.P(N,function(t,e){var i=jf(r,new L(t)).apply(e);n=n.U(t,i)}),Oa(hf(r),function(t){n=n.U(t.name,t.S)})}else r=jf(this.T,t),Oa(hf(r),function(t){n=n.U(t.name,t.S)});return n},g.ld=function(t,e,n,i){return K(n||i,"Either existingEventSnap or existingServerSnap must exist"),t=t.u(e),null!=gf(this.T,t)?null:(t=jf(this.T,t),t.e()?i.Q(e):t.apply(i.Q(e)))},g.xc=function(t,e,n){t=t.u(e);var i=gf(this.T,t);return null!=i?i:sb(n,e)?jf(this.T,t).apply(n.j().R(e)):null},g.tc=function(t){return gf(this.T,t)},g.ne=function(t,e,n,i,r,o){var a;if(t=jf(this.T,t),a=gf(t,G),null==a){if(null==e)return[];a=t.apply(e)}if(a=a.lb(o),a.e()||a.K())return[];for(e=[],t=td(o),r=r?a.$b(n,o):a.Yb(n,o),o=J(r);o&&e.length<i;)0!==t(o,n)&&e.push(o),o=J(r);return e},g=qf.prototype,g.za=function(t,e,n){return this.X.za(this.Mb,t,e,n)},g.yc=function(t){return this.X.yc(this.Mb,t)},g.ld=function(t,e,n){return this.X.ld(this.Mb,t,e,n)},g.tc=function(t){return this.X.tc(this.Mb.u(t))},g.ne=function(t,e,n,i,r){return this.X.ne(this.Mb,t,e,n,i,r)},g.xc=function(t,e){return this.X.xc(this.Mb,t,e)},g.u=function(t){return new qf(this.Mb.u(t),this.X)},g=rf.prototype,g.e=function(){return wa(this.ya)},g.ab=function(t,e,n){var i=t.source.Hb;if(null!==i)return i=w(this.ya,i),K(null!=i,"SyncTree gave us an op for an invalid query."),i.ab(t,e,n);var o=[];return r(this.ya,function(i){o=o.concat(i.ab(t,e,n))}),o},g.Pb=function(t,e,n,i,r){var o=t.va(),a=w(this.ya,o);if(!a){var a=n.za(r?i:null),s=!1;a?s=!0:(a=i instanceof R?n.yc(i):C,s=!1),a=new ve(t,new Id(new tb(a,s,!1),new tb(i,r,!1))),this.ya[o]=a}return a.Pb(e),ye(a,e)},g.jb=function(t,e,n){var i=t.va(),o=[],a=[],s=null!=sf(this);if("default"===i){var u=this;r(this.ya,function(t,i){a=a.concat(t.jb(e,n)),t.e()&&(delete u.ya[i],S(t.W.n)||o.push(t.W))})}else{var l=w(this.ya,i);l&&(a=a.concat(l.jb(e,n)),l.e()&&(delete this.ya[i],S(l.W.n)||o.push(l.W)))}return s&&null==sf(this)&&o.push(new U(t.k,t.path)),{Kg:o,mg:a}},g.fb=function(t){var e=null;return r(this.ya,function(n){e=e||n.fb(t)}),e},vf.prototype.Pb=function(t,e){var n=t.path,i=null,r=!1;Ve(this.ta,n,function(t,e){var o=T(t,n);return i=e.fb(o),r=r||null!=sf(e),!i});var o=this.ta.get(n);o?(r=r||null!=sf(o),i=i||o.fb(G)):(o=new rf,this.ta=this.ta.set(n,o));var a;null!=i?a=!0:(a=!1,i=C,Ye(this.ta.subtree(n),function(t,e){var n=e.fb(G);n&&(i=i.U(t,n))}));var s=null!=uf(o,t);if(!s&&!S(t.n)){var u=Gf(t);K(!(u in this.mc),"View does not exist, but we have a tag");var l=Hf++;this.mc[u]=l,this.$e["_"+l]=u}return a=o.Pb(t,e,new qf(n,this.ib),i,a),s||r||(o=uf(o,t),a=a.concat(If(this,t,o))),a},vf.prototype.jb=function(t,e,n){var i=t.path,r=this.ta.get(i),o=[];if(r&&("default"===t.va()||null!=uf(r,t))){o=r.jb(t,e,n),r.e()&&(this.ta=this.ta.remove(i)),r=o.Kg,o=o.mg,e=-1!==Ua(r,function(t){return S(t.n)});var a=Te(this.ta,i,function(t,e){return null!=sf(e)});if(e&&!a&&(i=this.ta.subtree(i),!i.e()))for(var i=Jf(i),s=0;s<i.length;++s){var u=i[s],l=u.W,u=Kf(this,u);this.Nc.Xe(Lf(l),Mf(this,l),u.xd,u.H)}if(!a&&0<r.length&&!n)if(e)this.Nc.ae(Lf(t),null);else{var c=this;Oa(r,function(t){t.va();var e=c.mc[Gf(t)];c.Nc.ae(Lf(t),e)})}Nf(this,r)}return o},vf.prototype.za=function(t,e){var n=this.ib,i=Te(this.ta,t,function(e,n){var i=T(e,t);return(i=n.fb(i))?i:void 0});return n.za(t,i,e,!0)};var Hf=1;g=Rf.prototype,g.Ca=function(){return this.A.value},g.clear=function(){this.A.value=null,this.A.children={},this.A.nd=0,Uf(this)},g.wd=function(){return 0<this.A.nd},g.e=function(){return null===this.Ca()&&!this.wd()},g.P=function(t){var e=this;r(this.A.children,function(n,i){t(new Rf(i,e,n))})},g.path=function(){return new L(null===this.Zc?this.Gd:this.Zc.path()+"/"+this.Gd)},g.name=function(){return this.Gd},g.parent=function(){return this.Zc};var Xf=/[\[\].#$\/\u0000-\u001F\u007F]/,Yf=/[\[\].#$\u0000-\u001F\u007F]/,Zf=/^[a-zA-Z][a-zA-Z._\-+]+$/;g=pg.prototype,g.add=function(t,e){this.set[t]=null!==e?e:!0},g.contains=function(t){return v(this.set,t)},g.get=function(t){return this.contains(t)?this.set[t]:void 0},g.remove=function(t){delete this.set[t]},g.clear=function(){this.set={}},g.e=function(){return wa(this.set)},g.count=function(){return pa(this.set)},g.keys=function(){var t=[];return r(this.set,function(e,n){t.push(n)}),t},qc.prototype.find=function(t){if(null!=this.B)return this.B.Q(t);if(t.e()||null==this.m)return null;var e=E(t);return t=H(t),this.m.contains(e)?this.m.get(e).find(t):null},qc.prototype.nc=function(t,e){if(t.e())this.B=e,this.m=null;else if(null!==this.B)this.B=this.B.G(t,e);else{null==this.m&&(this.m=new pg);var n=E(t);this.m.contains(n)||this.m.add(n,new qc),n=this.m.get(n),t=H(t),n.nc(t,e)}},qc.prototype.P=function(t){null!==this.m&&qg(this.m,function(e,n){t(e,n)})};var sg="auth.firebase.com",ug=["remember","redirectTo"];wg.prototype.set=function(t,e){if(!e){if(!this.be.length)throw Error("fb.login.SessionManager : No storage options available!");e=this.be[0]}e.set(this.Qe,t)},wg.prototype.get=function(){var t=Qa(this.be,q(this.qg,this)),t=Pa(t,function(t){return null!==t});return Xa(t,function(t,e){return ad(e.token)-ad(t.token)}),0<t.length?t.shift():null},wg.prototype.qg=function(t){try{var e=t.get(this.Qe);if(e&&e.token)return e}catch(n){}return null},wg.prototype.clear=function(){var t=this;Oa(this.be,function(e){e.remove(t.Qe)})},Ig.prototype.jc=function(t){var e,n=this;try{e=nb(t.data)}catch(i){}e&&"request"===e.a&&(Dg(window,"message",this.jc),this.ce=t.origin,this.Ac&&setTimeout(function(){n.Ac(n.ce,e.d,function(t,e){n.dg=!e,n.Ac=void 0,Jg(n,{a:"response",d:t,forceKeepWindowOpen:e})})},0))},Ig.prototype.Bg=function(){try{Dg(this.zd,"message",this.Bf)}catch(t){}this.Ac&&(Jg(this,{a:"error",d:"unknown closed window"}),this.Ac=void 0);try{window.close()}catch(e){}},Ig.prototype.Bf=function(t){if(this.dg&&"die"===t.data)try{window.close()}catch(e){}},Kg.prototype.open=function(t,e){yc.set("redirect_request_id",this.pc),yc.set("redirect_request_id",this.pc),e.requestId=this.pc,e.redirectTo=e.redirectTo||window.location.href,t+=(/\?/.test(t)?"":"?")+kb(e),window.location=t},Kg.isAvailable=function(){return!zg()&&!yg()},Kg.prototype.Cc=function(){return"redirect"};var Lg={NETWORK_ERROR:"Unable to contact the Firebase server.",SERVER_ERROR:"An unknown server error occurred.",TRANSPORT_UNAVAILABLE:"There are no login transports available for the requested method.",REQUEST_INTERRUPTED:"The browser redirected the page before the login request could complete.",USER_CANCELLED:"The user cancelled authentication."};Ng.prototype.open=function(t,e,n){function i(t){if(o&&(document.body.removeChild(o),o=void 0),c&&(c=clearInterval(c)),Dg(window,"message",r),Dg(window,"unload",i),l&&!t)try{l.close()}catch(e){a.postMessage("die",u)}l=a=void 0}function r(t){if(t.origin===u)try{var e=nb(t.data);"ready"===e.a?a.postMessage(f,u):"error"===e.a?(i(!1),n&&(n(e.d),n=null)):"response"===e.a&&(i(e.forceKeepWindowOpen),n&&(n(null,e.d),n=null))}catch(r){}}var o,a,s=Ag(8);if(!this.options.relay_url)return n(Error("invalid arguments: origin of url and relay_url must match"));var u=Eg(t);if(u!==Eg(this.options.relay_url))n&&setTimeout(function(){n(Error("invalid arguments: origin of url and relay_url must match"))},0);else{s&&(o=document.createElement("iframe"),o.setAttribute("src",this.options.relay_url),o.style.display="none",o.setAttribute("name","__winchan_relay_frame"),document.body.appendChild(o),a=o.contentWindow),t+=(/\?/.test(t)?"":"?")+kb(e);var l=window.open(t,this.options.window_name,this.options.window_features);a||(a=l);var c=setInterval(function(){l&&l.closed&&(i(!1),n&&(n(Mg("USER_CANCELLED")),n=null))},500),f=B({a:"request",d:e});Cg(window,"unload",i),Cg(window,"message",r)}},Ng.isAvailable=function(){var t;return(t="postMessage"in window&&!zg())&&((t=yg()||"undefined"!=typeof navigator&&(!!xg().match(/Windows Phone/)||!!window.Windows&&/^ms-appx:/.test(location.href)))||(t=xg(),t="undefined"!=typeof navigator&&"undefined"!=typeof window&&!!(t.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i)||t.match(/CriOS/)||t.match(/Twitter for iPhone/)||t.match(/FBAN\/FBIOS/)||window.navigator.standalone)),t=!t),t&&!xg().match(/PhantomJS/)},Ng.prototype.Cc=function(){return"popup"},Og.prototype.open=function(t,e,n){function i(){n&&(n(Mg("REQUEST_INTERRUPTED")),n=null)}var r,o=new XMLHttpRequest,a=this.options.method.toUpperCase();if(Cg(window,"beforeunload",i),o.onreadystatechange=function(){if(n&&4===o.readyState){var t;if(200<=o.status&&300>o.status){try{t=nb(o.responseText)}catch(e){}n(null,t)}else n(500<=o.status&&600>o.status?Mg("SERVER_ERROR"):Mg("NETWORK_ERROR"));n=null,Dg(window,"beforeunload",i)}},"GET"===a)t+=(/\?/.test(t)?"":"?")+kb(e),r=null;else{var s=this.options.headers.content_type;"application/json"===s&&(r=B(e)),"application/x-www-form-urlencoded"===s&&(r=kb(e))}o.open(a,t,!0),t={"X-Requested-With":"XMLHttpRequest",Accept:"application/json;text/plain"},za(t,this.options.headers);for(var u in t)o.setRequestHeader(u,t[u]);o.send(r)},Og.isAvailable=function(){var t;return(t=!!window.XMLHttpRequest)&&(t=xg(),t=!(t.match(/MSIE/)||t.match(/Trident/))||Ag(10)),t},Og.prototype.Cc=function(){return"json"},Pg.prototype.open=function(t,e,n){function i(){n&&(n(Mg("USER_CANCELLED")),n=null)}var r,o=this,a=Pc(sg);e.requestId=this.pc,e.redirectTo=a.scheme+"://"+a.host+"/blank/page.html",t+=/\?/.test(t)?"":"?",t+=kb(e),(r=window.open(t,"_blank","location=no"))&&ha(r.addEventListener)?(r.addEventListener("loadstart",function(t){var e;if(e=t&&t.url)t:{try{var s=document.createElement("a");s.href=t.url,e=s.host===a.host&&"/blank/page.html"===s.pathname;break t}catch(u){}e=!1}e&&(t=Fg(t.url),r.removeEventListener("exit",i),r.close(),t=new tg(null,null,{requestId:o.pc,requestKey:t}),o.Ef.requestWithCredential("/auth/session",t,n),n=null)}),r.addEventListener("exit",i)):n(Mg("TRANSPORT_UNAVAILABLE"))},Pg.isAvailable=function(){return yg()},Pg.prototype.Cc=function(){return"redirect"},Qg.prototype.open=function(t,e,n){function i(){n&&(n(Mg("REQUEST_INTERRUPTED")),n=null)}function r(){setTimeout(function(){window.__firebase_auth_jsonp[o]=void 0,wa(window.__firebase_auth_jsonp)&&(window.__firebase_auth_jsonp=void 0);try{var t=document.getElementById(o);t&&t.parentNode.removeChild(t)}catch(e){}},1),Dg(window,"beforeunload",i)}var o="fn"+(new Date).getTime()+Math.floor(99999*Math.random());e[this.options.callback_parameter]="__firebase_auth_jsonp."+o,t+=(/\?/.test(t)?"":"?")+kb(e),Cg(window,"beforeunload",i),window.__firebase_auth_jsonp[o]=function(t){n&&(n(null,t),n=null),r()},Rg(o,t,n)},Qg.isAvailable=function(){return"undefined"!=typeof document&&null!=document.createElement},Qg.prototype.Cc=function(){return"json"},ma(Sg,De),g=Sg.prototype,g.xe=function(){return this.mb||null},g.se=function(t,e){ah(this);var n=vg(t);n.$a._method="POST",this.qc("/users",n,function(t,n){t?P(e,t):P(e,t,n)})},g.Te=function(t,e){var n=this;ah(this);var i="/users/"+encodeURIComponent(t.email),r=vg(t);r.$a._method="DELETE",this.qc(i,r,function(t,i){!t&&i&&i.uid&&n.mb&&n.mb.uid&&n.mb.uid===i.uid&&Zg(n),P(e,t)})},g.pe=function(t,e){ah(this);var n="/users/"+encodeURIComponent(t.email)+"/password",i=vg(t);i.$a._method="PUT",i.$a.password=t.newPassword,this.qc(n,i,function(t){P(e,t)})},g.oe=function(t,e){ah(this);var n="/users/"+encodeURIComponent(t.oldEmail)+"/email",i=vg(t);i.$a._method="PUT",i.$a.email=t.newEmail,i.$a.password=t.password,this.qc(n,i,function(t){P(e,t)})},g.Ve=function(t,e){ah(this);var n="/users/"+encodeURIComponent(t.email)+"/password",i=vg(t);i.$a._method="POST",this.qc(n,i,function(t){P(e,t)})},g.qc=function(t,e,n){dh(this,[Og,Qg],t,e,n)},g.Ae=function(t){return K("auth_status"===t,'initial event must be of type "auth_status"'),this.Se?null:[this.mb]};var Cc="websocket",Dc="long_polling",ih,jh;hh.prototype.open=function(t,e){this.hf=0,this.la=e,this.Af=new eh(t),this.zb=!1;var n=this;this.qb=setTimeout(function(){n.f("Timed out trying to connect."),n.gb(),n.qb=null},Math.floor(3e4)),Rc(function(){if(!n.zb){n.Sa=new kh(function(t,e,i,r,o){if(lh(n,arguments),n.Sa)if(n.qb&&(clearTimeout(n.qb),n.qb=null),n.Hc=!0,"start"==t)n.id=e,n.Gf=i;else{if("close"!==t)throw Error("Unrecognized command received: "+t);e?(n.Sa.Xd=!1,fh(n.Af,e,function(){n.gb()})):n.gb()}},function(t,e){lh(n,arguments),gh(n.Af,t,e)},function(){n.gb()},n.jd);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.Sa.he&&(t.cb=n.Sa.he),t.v="5",n.Qf&&(t.s=n.Qf),n.Bb&&(t.ls=n.Bb),"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f"),t=n.jd(t),n.f("Connecting via long-poll to "+t),mh(n.Sa,t,function(){})}})},hh.prototype.start=function(){var t=this.Sa,e=this.Gf;for(t.ug=this.id,t.vg=e,t.le=!0;nh(t););t=this.id,e=this.Gf,this.gc=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.gc.src=this.jd(n),this.gc.style.display="none",document.body.appendChild(this.gc)},hh.isAvailable=function(){return ih||!jh&&"undefined"!=typeof document&&null!=document.createElement&&!("object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"==typeof Windows&&"object"==typeof Windows.Xg)&&!0},g=hh.prototype,g.Ed=function(){},g.dd=function(){this.zb=!0,this.Sa&&(this.Sa.close(),this.Sa=null),this.gc&&(document.body.removeChild(this.gc),this.gc=null),this.qb&&(clearTimeout(this.qb),this.qb=null)},g.gb=function(){this.zb||(this.f("Longpoll is closing itself"),this.dd(),this.la&&(this.la(this.Hc),this.la=null))},g.close=function(){this.zb||(this.f("Longpoll is being closed."),this.dd())},g.send=function(t){t=B(t),this.ob+=t.length,Ob(this.Ua,"bytes_sent",t.length),t=Ic(t),t=fb(t,!0),t=Vc(t,1840);for(var e=0;e<t.length;e++){var n=this.Sa;n.ad.push({Mg:this.hf,Ug:t.length,kf:t[e]}),n.le&&nh(n),this.hf++}},kh.prototype.close=function(){if(this.le=!1,this.Ea){this.Ea.eb.body.innerHTML="";var t=this;setTimeout(function(){null!==t.Ea&&(document.body.removeChild(t.Ea),t.Ea=null)},Math.floor(0))}var e=this.hb;e&&(this.hb=null,e())};var ph=null;"undefined"!=typeof MozWebSocket?ph=MozWebSocket:"undefined"!=typeof WebSocket&&(ph=WebSocket);var rh;qh.prototype.open=function(t,e){this.hb=e,this.zg=t,this.f("Websocket connecting to "+this.ef),this.Hc=!1,xc.set("previous_websocket_failure",!0);try{this.ua=new ph(this.ef)}catch(n){this.f("Error instantiating WebSocket.");var i=n.message||n.data;return i&&this.f(i),void this.gb()}var r=this;this.ua.onopen=function(){r.f("Websocket connected."),r.Hc=!0},this.ua.onclose=function(){r.f("Websocket connection was disconnected."),r.ua=null,r.gb()},this.ua.onmessage=function(t){if(null!==r.ua)if(t=t.data,r.nb+=t.length,Ob(r.Ua,"bytes_received",t.length),sh(r),null!==r.frames)th(r,t);else{t:{if(K(null===r.frames,"We already have a frame buffer"),6>=t.length){var e=Number(t);if(!isNaN(e)){r.bf=e,r.frames=[],t=null;break t}}r.bf=1,r.frames=[]}null!==t&&th(r,t)}},this.ua.onerror=function(t){r.f("WebSocket error.  Closing connection."),(t=t.message||t.data)&&r.f(t),r.gb()}},qh.prototype.start=function(){},qh.isAvailable=function(){var t=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var e=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);e&&1<e.length&&4.4>parseFloat(e[1])&&(t=!0)}return!t&&null!==ph&&!rh},qh.responsesRequiredToBeHealthy=2,qh.healthyTimeout=3e4,g=qh.prototype,g.Ed=function(){xc.remove("previous_websocket_failure")},g.send=function(t){sh(this),t=B(t),this.ob+=t.length,Ob(this.Ua,"bytes_sent",t.length),t=Vc(t,16384),1<t.length&&this.ua.send(String(t.length));for(var e=0;e<t.length;e++)this.ua.send(t[e])},g.dd=function(){this.zb=!0,this.Kc&&(clearInterval(this.Kc),this.Kc=null),this.ua&&(this.ua.close(),this.ua=null)},g.gb=function(){this.zb||(this.f("WebSocket is closing itself"),this.dd(),this.hb&&(this.hb(this.Hc),this.hb=null))},g.close=function(){this.zb||(this.f("WebSocket is being closed"),this.dd())};var wh=[hh,qh];yh.prototype.Fa=function(t){Jh(this,{t:"d",d:t})},yh.prototype.Id=function(t){Gh(this),this.jc(t)},yh.prototype.close=function(){2!==this.Ta&&(this.f("Closing realtime connection."),this.Ta=2,Fh(this),this.la&&(this.la(),this.la=null))};var Lh=0,Nh=0;g=Kh.prototype,g.Fa=function(t,e,n){var i=++this.Lg;t={r:i,a:t,b:e},this.f(B(t)),K(this.oa,"sendRequest call when we're not connected not allowed."),this.Ia.Fa(t),n&&(this.Td[i]=n)},g.yf=function(t,e,n,i){var r=t.va(),o=t.path.toString();this.f("Listen called for "+o+" "+r),this.$[o]=this.$[o]||{},K(fe(t.n)||!S(t.n),"listen() called for non-default but complete query"),K(!this.$[o][r],"listen() called twice for same path/queryId."),t={H:i,xd:e,Ig:t,tag:n},this.$[o][r]=t,this.oa&&Oh(this,t)},g.M=function(t,e,n){this.Aa={ig:t,of:!1,zc:e,md:n},this.f("Authenticating using credential: "+t),Qh(this),(e=40==t.length)||(t=$c(t).Bc,e="object"==typeof t&&!0===w(t,"admin")),e&&(this.f("Admin auth credential detected.  Reducing max reconnect time."),this.Fd=3e4)},g.ge=function(t){delete this.Aa,this.oa&&this.Fa("unauth",{},function(e){t(e.s,e.d)})},g.Rf=function(t,e){var n=t.path.toString(),i=t.va();if(this.f("Unlisten called for "+n+" "+i),K(fe(t.n)||!S(t.n),"unlisten() called for non-default but complete query"),Ph(this,n,i)&&this.oa){var r=ee(t.n);this.f("Unlisten on "+n+" for "+i),n={p:n},e&&(n.q=r,n.t=e),this.Fa("n",n)}},g.Me=function(t,e,n){this.oa?Rh(this,"o",t,e,n):this.Vc.push({$c:t,action:"o",data:e,H:n})},g.Cf=function(t,e,n){this.oa?Rh(this,"om",t,e,n):this.Vc.push({$c:t,action:"om",data:e,H:n})},g.Jd=function(t,e){this.oa?Rh(this,"oc",t,null,e):this.Vc.push({$c:t,action:"oc",data:null,H:e})},g.put=function(t,e,n,i){Sh(this,"p",t,e,n,i)},g.zf=function(t,e,n,i){Sh(this,"m",t,e,n,i)},g.Ue=function(t){this.oa&&(t={c:t},this.f("reportStats",t),this.Fa("s",t,function(t){"ok"!==t.s&&this.f("reportStats","Error sending stats: "+t.d)}))},g.Id=function(t){if("r"in t){this.f("from server: "+B(t));var e=t.r,n=this.Td[e];n&&(delete this.Td[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&(e=t.a,n=t.b,this.f("handleServerMessage",e,n),"d"===e?this.Gb(n.p,n.d,!1,n.t):"m"===e?this.Gb(n.p,n.d,!0,n.t):"c"===e?Uh(this,n.p,n.q):"ac"===e?(t=n.s,e=n.d,n=this.Aa,delete this.Aa,n&&n.md&&n.md(t,e)):"sd"===e?this.We?this.We(n):"msg"in n&&"undefined"!=typeof console&&console.log("FIREBASE: "+n.msg.replace("\n","\nFIREBASE: ")):Nc("Unrecognized action received from server: "+B(e)+"\nAre you using the latest client?"))}},g.Wc=function(t,e){if(this.f("connection ready"),this.oa=!0,this.Lc=(new Date).getTime(),this.Oe({serverTimeOffset:t-(new Date).getTime()}),this.Bb=e,this.nf){var n={};n["sdk.js."+hb.replace(/\./g,"-")]=1,yg()&&(n["framework.cordova"]=1),this.Ue(n)}Vh(this),this.nf=!1,this.Uc(!0)},g.Cg=function(t){t&&!this.Ob&&this.Za===this.Fd&&(this.f("Window became visible.  Reducing delay."),this.Za=1e3,this.Ia||Mh(this,0)),this.Ob=t},g.Ag=function(t){t?(this.f("Browser went online."),this.Za=1e3,this.Ia||Mh(this,0)):(this.f("Browser went offline.  Killing connection."),this.Ia&&this.Ia.close())},g.Df=function(){this.f("data client disconnected"),this.oa=!1,this.Ia=null;for(var t=0;t<this.qa.length;t++){var e=this.qa[t];e&&"h"in e.Jf&&e.Jg&&(e.H&&e.H("disconnect"),delete this.qa[t],this.Yc--)}0===this.Yc&&(this.qa=[]),this.Td={},Xh(this)&&(this.Ob?this.Lc&&(3e4<(new Date).getTime()-this.Lc&&(this.Za=1e3),this.Lc=null):(this.f("Window isn't visible.  Delaying reconnect."),this.Za=this.Fd,this.Ge=(new Date).getTime()),t=Math.max(0,this.Za-((new Date).getTime()-this.Ge)),t*=Math.random(),this.f("Trying to reconnect in "+t+"ms"),Mh(this,t),this.Za=Math.min(this.Fd,1.3*this.Za)),this.Uc(!1)},g.yb=function(){this.Ee=!0,this.Ia?this.Ia.close():(this.sb&&(clearTimeout(this.sb),this.sb=null),this.oa&&this.Df())},g.rc=function(){this.Ee=!1,this.Za=1e3,this.Ia||Mh(this,0)};var V={og:function(){ih=rh=!0}};V.forceLongPolling=V.og,V.pg=function(){jh=!0},V.forceWebSockets=V.pg,V.Pg=function(t,e){t.k.Ra.We=e},V.setSecurityDebugCallback=V.Pg,V.Ye=function(t,e){t.k.Ye(e)},V.stats=V.Ye,V.Ze=function(t,e){t.k.Ze(e)},V.statsIncrementCounter=V.Ze,V.sd=function(t){return t.k.sd},V.dataUpdateCount=V.sd,V.sg=function(t,e){t.k.De=e},V.interceptServerData=V.sg,V.yg=function(t){new Ig(t)},V.onPopupOpen=V.yg,V.Ng=function(t){sg=t},V.setAuthenticationServer=V.Ng,Q.prototype.I=function(){return x("Firebase.DataSnapshot.val",0,0,arguments.length),this.A.I()},Q.prototype.val=Q.prototype.I,Q.prototype.mf=function(){return x("Firebase.DataSnapshot.exportVal",0,0,arguments.length),this.A.I(!0)},Q.prototype.exportVal=Q.prototype.mf,Q.prototype.ng=function(){return x("Firebase.DataSnapshot.exists",0,0,arguments.length),!this.A.e()},Q.prototype.exists=Q.prototype.ng,Q.prototype.u=function(t){x("Firebase.DataSnapshot.child",0,1,arguments.length),ga(t)&&(t=String(t)),ig("Firebase.DataSnapshot.child",t);var e=new L(t),n=this.W.u(e);return new Q(this.A.Q(e),n,N)},Q.prototype.child=Q.prototype.u,Q.prototype.Da=function(t){x("Firebase.DataSnapshot.hasChild",1,1,arguments.length),ig("Firebase.DataSnapshot.hasChild",t);var e=new L(t);return!this.A.Q(e).e()},Q.prototype.hasChild=Q.prototype.Da,Q.prototype.C=function(){return x("Firebase.DataSnapshot.getPriority",0,0,arguments.length),this.A.C().I()},Q.prototype.getPriority=Q.prototype.C,Q.prototype.forEach=function(t){if(x("Firebase.DataSnapshot.forEach",1,1,arguments.length),A("Firebase.DataSnapshot.forEach",1,t,!1),this.A.K())return!1;var e=this;return!!this.A.P(this.g,function(n,i){return t(new Q(i,e.W.u(n),N))})},Q.prototype.forEach=Q.prototype.forEach,Q.prototype.wd=function(){return x("Firebase.DataSnapshot.hasChildren",0,0,arguments.length),this.A.K()?!1:!this.A.e()},Q.prototype.hasChildren=Q.prototype.wd,Q.prototype.name=function(){return O("Firebase.DataSnapshot.name() being deprecated. Please use Firebase.DataSnapshot.key() instead."),x("Firebase.DataSnapshot.name",0,0,arguments.length),this.key()},Q.prototype.name=Q.prototype.name,Q.prototype.key=function(){return x("Firebase.DataSnapshot.key",0,0,arguments.length),this.W.key()},Q.prototype.key=Q.prototype.key,Q.prototype.Db=function(){return x("Firebase.DataSnapshot.numChildren",0,0,arguments.length),this.A.Db()},Q.prototype.numChildren=Q.prototype.Db,Q.prototype.Ib=function(){return x("Firebase.DataSnapshot.ref",0,0,arguments.length),this.W},Q.prototype.ref=Q.prototype.Ib,g=Yh.prototype,g.toString=function(){return(this.F.kb?"https://":"http://")+this.F.host},g.name=function(){return this.F.hc},g.Gb=function(t,e,n,i){this.sd++;var r=new L(t);e=this.De?this.De(t,e):e,t=[],i?n?(e=na(e,function(t){return M(t)}),t=Ff(this.L,r,e,i)):(e=M(e),t=Bf(this.L,r,e,i)):n?(i=na(e,function(t){return M(t)}),t=Af(this.L,r,i)):(i=M(e),t=xf(this.L,new Xb(bf,r,i))),i=r,0<t.length&&(i=bi(this,r)),
Ab(this.da,i,t)},g.Uc=function(t){Zh(this,"connected",t),!1===t&&ci(this)},g.Oe=function(t){var e=this;Wc(t,function(t,n){Zh(e,n,t)})},g.Le=function(t){Zh(this,"authenticated",t)},g.Kb=function(t,e,n,i){this.f("set",{path:t.toString(),value:e,$g:n});var r=ai(this);e=M(e,n);var r=sc(e,r),o=this.Hd++,r=wf(this.L,t,r,o,!0);wb(this.da,r);var a=this;this.ba.put(t.toString(),e.I(!0),function(e,n){var r="ok"===e;r||O("set at "+t+" failed: "+e),r=zf(a.L,o,!r),Ab(a.da,t,r),di(i,e,n)}),r=ei(this,t),bi(this,r),Ab(this.da,r,[])},g.update=function(t,e,n){this.f("update",{path:t.toString(),value:e});var i=!0,o=ai(this),a={};if(r(e,function(t,e){i=!1;var n=M(t);a[e]=sc(n,o)}),i)Cb("update() called with empty data.  Don't do anything."),di(n,"ok");else{var s=this.Hd++,u=yf(this.L,t,a,s);wb(this.da,u);var l=this;this.ba.zf(t.toString(),e,function(e,i){var r="ok"===e;r||O("update at "+t+" failed: "+e);var r=zf(l.L,s,!r),o=t;0<r.length&&(o=bi(l,t)),Ab(l.da,o,r),di(n,e,i)}),e=ei(this,t),bi(this,e),Ab(this.da,t,[])}},g.Jd=function(t,e){var n=this;this.ba.Jd(t.toString(),function(i,r){"ok"===i&&rg(n.la,t),di(e,i,r)})},g.yb=function(){this.Ra&&this.Ra.yb()},g.rc=function(){this.Ra&&this.Ra.rc()},g.Ye=function(t){if("undefined"!=typeof console){t?(this.fd||(this.fd=new Lb(this.Ua)),t=this.fd.get()):t=this.Ua.get();var e,n=Ra(sa(t),function(t,e){return Math.max(e.length,t)},0);for(e in t){for(var i=t[e],r=e.length;n+2>r;r++)e+=" ";console.log(e+i)}}},g.Ze=function(t){Ob(this.Ua,t),this.Sg.Of[t]=!0},g.f=function(t){var e="";this.Ra&&(e=this.Ra.id+":"),Cb(e,arguments)},W.prototype.yb=function(){for(var t in this.oc)this.oc[t].yb()},W.prototype.rc=function(){for(var t in this.oc)this.oc[t].rc()},W.prototype.ve=function(){this.Sf=!0},ca(W),W.prototype.interrupt=W.prototype.yb,W.prototype.resume=W.prototype.rc,X.prototype.cancel=function(t){x("Firebase.onDisconnect().cancel",0,1,arguments.length),A("Firebase.onDisconnect().cancel",1,t,!0),this.bd.Jd(this.ra,t||null)},X.prototype.cancel=X.prototype.cancel,X.prototype.remove=function(t){x("Firebase.onDisconnect().remove",0,1,arguments.length),jg("Firebase.onDisconnect().remove",this.ra),A("Firebase.onDisconnect().remove",1,t,!0),fi(this.bd,this.ra,null,t)},X.prototype.remove=X.prototype.remove,X.prototype.set=function(t,e){x("Firebase.onDisconnect().set",1,2,arguments.length),jg("Firebase.onDisconnect().set",this.ra),bg("Firebase.onDisconnect().set",t,this.ra,!1),A("Firebase.onDisconnect().set",2,e,!0),fi(this.bd,this.ra,t,e)},X.prototype.set=X.prototype.set,X.prototype.Kb=function(t,e,n){x("Firebase.onDisconnect().setWithPriority",2,3,arguments.length),jg("Firebase.onDisconnect().setWithPriority",this.ra),bg("Firebase.onDisconnect().setWithPriority",t,this.ra,!1),fg("Firebase.onDisconnect().setWithPriority",2,e),A("Firebase.onDisconnect().setWithPriority",3,n,!0),gi(this.bd,this.ra,t,e,n)},X.prototype.setWithPriority=X.prototype.Kb,X.prototype.update=function(t,e){if(x("Firebase.onDisconnect().update",1,2,arguments.length),jg("Firebase.onDisconnect().update",this.ra),ea(t)){for(var n={},i=0;i<t.length;++i)n[""+i]=t[i];t=n,O("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.onDisconnect().update",t,this.ra),A("Firebase.onDisconnect().update",2,e,!0),hi(this.bd,this.ra,t,e)},X.prototype.update=X.prototype.update,g=Y.prototype,g.Ib=function(){return x("Query.ref",0,0,arguments.length),new U(this.k,this.path)},g.Eb=function(t,e,n,i){x("Query.on",2,4,arguments.length),gg("Query.on",t,!1),A("Query.on",2,e,!1);var r=vi("Query.on",n,i);if("value"===t)ii(this.k,this,new id(e,r.cancel||null,r.Ma||null));else{var o={};o[t]=e,ii(this.k,this,new jd(o,r.cancel,r.Ma))}return e},g.ic=function(t,e,n){x("Query.off",0,3,arguments.length),gg("Query.off",t,!0),A("Query.off",2,e,!0),mb("Query.off",3,n);var i=null,r=null;"value"===t?i=new id(e||null,null,n||null):t&&(e&&(r={},r[t]=e),i=new jd(r,null,n||null)),r=this.k,i=".info"===E(this.path)?r.Cd.jb(this,i):r.L.jb(this,i),yb(r.da,this.path,i)},g.Dg=function(t,e){function n(a){o&&(o=!1,r.ic(t,n),e.call(i.Ma,a))}x("Query.once",2,4,arguments.length),gg("Query.once",t,!1),A("Query.once",2,e,!1);var i=vi("Query.once",arguments[2],arguments[3]),r=this,o=!0;this.Eb(t,n,function(e){r.ic(t,n),i.cancel&&i.cancel.call(i.Ma,e)})},g.He=function(t){if(O("Query.limit() being deprecated. Please use Query.limitToFirst() or Query.limitToLast() instead."),x("Query.limit",1,1,arguments.length),!ga(t)||Math.floor(t)!==t||0>=t)throw Error("Query.limit: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limit: Limit was already set (by another call to limit, limitToFirst, orlimitToLast.");var e=this.n.He(t);return ti(e),new Y(this.k,this.path,e,this.lc)},g.Ie=function(t){if(x("Query.limitToFirst",1,1,arguments.length),!ga(t)||Math.floor(t)!==t||0>=t)throw Error("Query.limitToFirst: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Ie(t),this.lc)},g.Je=function(t){if(x("Query.limitToLast",1,1,arguments.length),!ga(t)||Math.floor(t)!==t||0>=t)throw Error("Query.limitToLast: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Je(t),this.lc)},g.Eg=function(t){if(x("Query.orderByChild",1,1,arguments.length),"$key"===t)throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===t)throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===t)throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ig("Query.orderByChild",t),ui(this,"Query.orderByChild");var e=new L(t);if(e.e())throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");return e=new Ud(e),e=de(this.n,e),si(e),new Y(this.k,this.path,e,!0)},g.Fg=function(){x("Query.orderByKey",0,0,arguments.length),ui(this,"Query.orderByKey");var t=de(this.n,Qd);return si(t),new Y(this.k,this.path,t,!0)},g.Gg=function(){x("Query.orderByPriority",0,0,arguments.length),ui(this,"Query.orderByPriority");var t=de(this.n,N);return si(t),new Y(this.k,this.path,t,!0)},g.Hg=function(){x("Query.orderByValue",0,0,arguments.length),ui(this,"Query.orderByValue");var t=de(this.n,$d);return si(t),new Y(this.k,this.path,t,!0)},g.$d=function(t,e){x("Query.startAt",0,2,arguments.length),bg("Query.startAt",t,this.path,!0),hg("Query.startAt",e);var i=this.n.$d(t,e);if(ti(i),si(i),this.n.ma)throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return n(t)||(e=t=null),new Y(this.k,this.path,i,this.lc)},g.td=function(t,e){x("Query.endAt",0,2,arguments.length),bg("Query.endAt",t,this.path,!0),hg("Query.endAt",e);var n=this.n.td(t,e);if(ti(n),si(n),this.n.pa)throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new Y(this.k,this.path,n,this.lc)},g.kg=function(t,e){if(x("Query.equalTo",1,2,arguments.length),bg("Query.equalTo",t,this.path,!1),hg("Query.equalTo",e),this.n.ma)throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if(this.n.pa)throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.$d(t,e).td(t,e)},g.toString=function(){x("Query.toString",0,0,arguments.length);for(var t=this.path,e="",n=t.Z;n<t.o.length;n++)""!==t.o[n]&&(e+="/"+encodeURIComponent(String(t.o[n])));return this.k.toString()+(e||"/")},g.va=function(){var t=Uc(ee(this.n));return"{}"===t?"default":t},Y.prototype.ref=Y.prototype.Ib,Y.prototype.on=Y.prototype.Eb,Y.prototype.off=Y.prototype.ic,Y.prototype.once=Y.prototype.Dg,Y.prototype.limit=Y.prototype.He,Y.prototype.limitToFirst=Y.prototype.Ie,Y.prototype.limitToLast=Y.prototype.Je,Y.prototype.orderByChild=Y.prototype.Eg,Y.prototype.orderByKey=Y.prototype.Fg,Y.prototype.orderByPriority=Y.prototype.Gg,Y.prototype.orderByValue=Y.prototype.Hg,Y.prototype.startAt=Y.prototype.$d,Y.prototype.endAt=Y.prototype.td,Y.prototype.equalTo=Y.prototype.kg,Y.prototype.toString=Y.prototype.toString;var Z={};Z.vc=Kh,Z.DataConnection=Z.vc,Kh.prototype.Rg=function(t,e){this.Fa("q",{p:t},e)},Z.vc.prototype.simpleListen=Z.vc.prototype.Rg,Kh.prototype.jg=function(t,e){this.Fa("echo",{d:t},e)},Z.vc.prototype.echo=Z.vc.prototype.jg,Kh.prototype.interrupt=Kh.prototype.yb,Z.Vf=yh,Z.RealTimeConnection=Z.Vf,yh.prototype.sendRequest=yh.prototype.Fa,yh.prototype.close=yh.prototype.close,Z.rg=function(t){var e=Kh.prototype.put;return Kh.prototype.put=function(i,r,o,a){n(a)&&(a=t()),e.call(this,i,r,o,a)},function(){Kh.prototype.put=e}},Z.hijackHash=Z.rg,Z.Uf=zc,Z.ConnectionTarget=Z.Uf,Z.va=function(t){return t.va()},Z.queryIdentifier=Z.va,Z.tg=function(t){return t.k.Ra.$},Z.listens=Z.tg,Z.ve=function(t){t.ve()},Z.forceRestClient=Z.ve,ma(U,Y);var wi=U,xi=["Firebase"],yi=aa;xi[0]in yi||!yi.execScript||yi.execScript("var "+xi[0]);for(var zi;xi.length&&(zi=xi.shift());)!xi.length&&n(wi)?yi[zi]=wi:yi=yi[zi]?yi[zi]:yi[zi]={};U.goOffline=function(){x("Firebase.goOffline",0,0,arguments.length),W.ub().yb()},U.goOnline=function(){x("Firebase.goOnline",0,0,arguments.length),W.ub().rc()},U.enableLogging=Lc,U.ServerValue={TIMESTAMP:{".sv":"timestamp"}},U.SDK_VERSION=hb,U.INTERNAL=V,U.Context=W,U.TEST_ACCESS=Z,U.prototype.name=function(){return O("Firebase.name() being deprecated. Please use Firebase.key() instead."),x("Firebase.name",0,0,arguments.length),this.key()},U.prototype.name=U.prototype.name,U.prototype.key=function(){return x("Firebase.key",0,0,arguments.length),this.path.e()?null:Ld(this.path)},U.prototype.key=U.prototype.key,U.prototype.u=function(t){if(x("Firebase.child",1,1,arguments.length),ga(t))t=String(t);else if(!(t instanceof L))if(null===E(this.path)){var e=t;e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),ig("Firebase.child",e)}else ig("Firebase.child",t);return new U(this.k,this.path.u(t))},U.prototype.child=U.prototype.u,U.prototype.parent=function(){x("Firebase.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new U(this.k,t)},U.prototype.parent=U.prototype.parent,U.prototype.root=function(){x("Firebase.ref",0,0,arguments.length);for(var t=this;null!==t.parent();)t=t.parent();return t},U.prototype.root=U.prototype.root,U.prototype.set=function(t,e){x("Firebase.set",1,2,arguments.length),jg("Firebase.set",this.path),bg("Firebase.set",t,this.path,!1),A("Firebase.set",2,e,!0),this.k.Kb(this.path,t,null,e||null)},U.prototype.set=U.prototype.set,U.prototype.update=function(t,e){if(x("Firebase.update",1,2,arguments.length),jg("Firebase.update",this.path),ea(t)){for(var n={},i=0;i<t.length;++i)n[""+i]=t[i];t=n,O("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.update",t,this.path),A("Firebase.update",2,e,!0),this.k.update(this.path,t,e||null)},U.prototype.update=U.prototype.update,U.prototype.Kb=function(t,e,n){if(x("Firebase.setWithPriority",2,3,arguments.length),jg("Firebase.setWithPriority",this.path),bg("Firebase.setWithPriority",t,this.path,!1),fg("Firebase.setWithPriority",2,e),A("Firebase.setWithPriority",3,n,!0),".length"===this.key()||".keys"===this.key())throw"Firebase.setWithPriority failed: "+this.key()+" is a read-only object.";this.k.Kb(this.path,t,e,n||null)},U.prototype.setWithPriority=U.prototype.Kb,U.prototype.remove=function(t){x("Firebase.remove",0,1,arguments.length),jg("Firebase.remove",this.path),A("Firebase.remove",1,t,!0),this.set(null,t)},U.prototype.remove=U.prototype.remove,U.prototype.transaction=function(t,e,i){if(x("Firebase.transaction",1,3,arguments.length),jg("Firebase.transaction",this.path),A("Firebase.transaction",1,t,!1),A("Firebase.transaction",2,e,!0),n(i)&&"boolean"!=typeof i)throw Error(y("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.key()||".keys"===this.key())throw"Firebase.transaction failed: "+this.key()+" is a read-only object.";"undefined"==typeof i&&(i=!0),ji(this.k,this.path,t,e||null,i)},U.prototype.transaction=U.prototype.transaction,U.prototype.Og=function(t,e){x("Firebase.setPriority",1,2,arguments.length),jg("Firebase.setPriority",this.path),fg("Firebase.setPriority",1,t),A("Firebase.setPriority",2,e,!0),this.k.Kb(this.path.u(".priority"),t,null,e)},U.prototype.setPriority=U.prototype.Og,U.prototype.push=function(t,e){x("Firebase.push",0,2,arguments.length),jg("Firebase.push",this.path),bg("Firebase.push",t,this.path,!0),A("Firebase.push",2,e,!0);var n=$h(this.k),n=Fe(n),n=this.u(n);return"undefined"!=typeof t&&null!==t&&n.set(t,e),n},U.prototype.push=U.prototype.push,U.prototype.hb=function(){return jg("Firebase.onDisconnect",this.path),new X(this.k,this.path)},U.prototype.onDisconnect=U.prototype.hb,U.prototype.M=function(t,e,n){O("FirebaseRef.auth() being deprecated. Please use FirebaseRef.authWithCustomToken() instead."),x("Firebase.auth",1,3,arguments.length),kg("Firebase.auth",t),A("Firebase.auth",2,e,!0),A("Firebase.auth",3,e,!0),Yg(this.k.M,t,{},{remember:"none"},e,n)},U.prototype.auth=U.prototype.M,U.prototype.ge=function(t){x("Firebase.unauth",0,1,arguments.length),A("Firebase.unauth",1,t,!0),Zg(this.k.M,t)},U.prototype.unauth=U.prototype.ge,U.prototype.xe=function(){return x("Firebase.getAuth",0,0,arguments.length),this.k.M.xe()},U.prototype.getAuth=U.prototype.xe,U.prototype.xg=function(t,e){x("Firebase.onAuth",1,2,arguments.length),A("Firebase.onAuth",1,t,!1),mb("Firebase.onAuth",2,e),this.k.M.Eb("auth_status",t,e)},U.prototype.onAuth=U.prototype.xg,U.prototype.wg=function(t,e){x("Firebase.offAuth",1,2,arguments.length),A("Firebase.offAuth",1,t,!1),mb("Firebase.offAuth",2,e),this.k.M.ic("auth_status",t,e)},U.prototype.offAuth=U.prototype.wg,U.prototype.Zf=function(t,e,n){x("Firebase.authWithCustomToken",2,3,arguments.length),kg("Firebase.authWithCustomToken",t),A("Firebase.authWithCustomToken",2,e,!1),ng("Firebase.authWithCustomToken",3,n,!0),Yg(this.k.M,t,{},n||{},e)},U.prototype.authWithCustomToken=U.prototype.Zf,U.prototype.$f=function(t,e,n){x("Firebase.authWithOAuthPopup",2,3,arguments.length),mg("Firebase.authWithOAuthPopup",t),A("Firebase.authWithOAuthPopup",2,e,!1),ng("Firebase.authWithOAuthPopup",3,n,!0),ch(this.k.M,t,n,e)},U.prototype.authWithOAuthPopup=U.prototype.$f,U.prototype.ag=function(t,e,n){x("Firebase.authWithOAuthRedirect",2,3,arguments.length),mg("Firebase.authWithOAuthRedirect",t),A("Firebase.authWithOAuthRedirect",2,e,!1),ng("Firebase.authWithOAuthRedirect",3,n,!0);var i=this.k.M;ah(i);var r=[Kg],o=vg(n);"anonymous"===t||"firebase"===t?P(e,Mg("TRANSPORT_UNAVAILABLE")):(yc.set("redirect_client_options",o.od),bh(i,r,"/auth/"+t,o,e))},U.prototype.authWithOAuthRedirect=U.prototype.ag,U.prototype.bg=function(t,e,n,i){x("Firebase.authWithOAuthToken",3,4,arguments.length),mg("Firebase.authWithOAuthToken",t),A("Firebase.authWithOAuthToken",3,n,!1),ng("Firebase.authWithOAuthToken",4,i,!0),p(e)?(lg("Firebase.authWithOAuthToken",2,e),$g(this.k.M,t+"/token",{access_token:e},i,n)):(ng("Firebase.authWithOAuthToken",2,e,!1),$g(this.k.M,t+"/token",e,i,n))},U.prototype.authWithOAuthToken=U.prototype.bg,U.prototype.Yf=function(t,e){x("Firebase.authAnonymously",1,2,arguments.length),A("Firebase.authAnonymously",1,t,!1),ng("Firebase.authAnonymously",2,e,!0),$g(this.k.M,"anonymous",{},e,t)},U.prototype.authAnonymously=U.prototype.Yf,U.prototype.cg=function(t,e,n){x("Firebase.authWithPassword",2,3,arguments.length),ng("Firebase.authWithPassword",1,t,!1),og("Firebase.authWithPassword",t,"email"),og("Firebase.authWithPassword",t,"password"),A("Firebase.authWithPassword",2,e,!1),ng("Firebase.authWithPassword",3,n,!0),$g(this.k.M,"password",t,n,e)},U.prototype.authWithPassword=U.prototype.cg,U.prototype.se=function(t,e){x("Firebase.createUser",2,2,arguments.length),ng("Firebase.createUser",1,t,!1),og("Firebase.createUser",t,"email"),og("Firebase.createUser",t,"password"),A("Firebase.createUser",2,e,!1),this.k.M.se(t,e)},U.prototype.createUser=U.prototype.se,U.prototype.Te=function(t,e){x("Firebase.removeUser",2,2,arguments.length),ng("Firebase.removeUser",1,t,!1),og("Firebase.removeUser",t,"email"),og("Firebase.removeUser",t,"password"),A("Firebase.removeUser",2,e,!1),this.k.M.Te(t,e)},U.prototype.removeUser=U.prototype.Te,U.prototype.pe=function(t,e){x("Firebase.changePassword",2,2,arguments.length),ng("Firebase.changePassword",1,t,!1),og("Firebase.changePassword",t,"email"),og("Firebase.changePassword",t,"oldPassword"),og("Firebase.changePassword",t,"newPassword"),A("Firebase.changePassword",2,e,!1),this.k.M.pe(t,e)},U.prototype.changePassword=U.prototype.pe,U.prototype.oe=function(t,e){x("Firebase.changeEmail",2,2,arguments.length),ng("Firebase.changeEmail",1,t,!1),og("Firebase.changeEmail",t,"oldEmail"),og("Firebase.changeEmail",t,"newEmail"),og("Firebase.changeEmail",t,"password"),A("Firebase.changeEmail",2,e,!1),this.k.M.oe(t,e)},U.prototype.changeEmail=U.prototype.oe,U.prototype.Ve=function(t,e){x("Firebase.resetPassword",2,2,arguments.length),ng("Firebase.resetPassword",1,t,!1),og("Firebase.resetPassword",t,"email"),A("Firebase.resetPassword",2,e,!1),this.k.M.Ve(t,e)},U.prototype.resetPassword=U.prototype.Ve}();
//# sourceMappingURL=data:application/json;base64,
